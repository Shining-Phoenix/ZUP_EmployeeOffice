
&ИзменениеИКонтроль("ВывестиТелоРасчетногоЛистка")
Функция ЛК_ВывестиТелоРасчетногоЛистка(ДокументРезультат, Макет, СтрокиГоловныхСотрудников, СоответствиеПользовательскихПолей, ДанныеПечатнойФормы, ДополнительныеПараметры)

	ИтогиПоГруппам = ОписаниеИтоговПоГруппам();

	НастройкиВывода = ДополнительныеПараметры.НастройкиВывода;
	СвойстваРегистраторов = ДополнительныеПараметры.СвойстваРегистраторов;
	ДанныеРасчетныхЛистков = ДополнительныеПараметры.ДанныеРасчетныхЛистковСтруктура.ДанныеРасчетныхЛистков;
	
	#Вставка
	ДанныеРасчетныхЛистков.Колонки.Добавить("ПериодДействияПредставление");
	ДанныеРасчетныхЛистков.Колонки.Добавить("ПредставлениеРегистратораВыплаты");
	#КонецВставки

	СтрокиОтчетаНачислено = Новый ТаблицаЗначений;
	СтрокиОтчетаНачислено.Колонки.Добавить("ИмяОбласти");
	СтрокиОтчетаНачислено.Колонки.Добавить("СтрокаДанных");
	СтрокиОтчетаНачислено.Колонки.Добавить("Сотрудник");
	СтрокиОтчетаНачислено.Колонки.Добавить("ФизическоеЛицо");
	СтрокиОтчетаНачислено.Колонки.Добавить("Группа");
	СтрокиОтчетаНачислено.Колонки.Добавить("ПриоритетВидаРасчета");
	СтрокиОтчетаНачислено.Колонки.Добавить("ПредставлениеРабочегоМеста");
	СтрокиОтчетаНачислено.Колонки.Добавить("ВидРасчета");
	СтрокиОтчетаНачислено.Колонки.Добавить("ВидРасчетаКраткоеНаименование");
	СтрокиОтчетаНачислено.Колонки.Добавить("ПериодДействия");
	СтрокиОтчетаНачислено.Колонки.Добавить("ПериодДействияПредставление");
	СтрокиОтчетаНачислено.Колонки.Добавить("ОтработаноДней");
	СтрокиОтчетаНачислено.Колонки.Добавить("ОтработаноЧасов");
	СтрокиОтчетаНачислено.Колонки.Добавить("ОплаченныеДниЧасы");
	СтрокиОтчетаНачислено.Колонки.Добавить("Сумма");
	СтрокиОтчетаНачислено.Колонки.Добавить("РасшифровкаВидаРасчета");
	СтрокиОтчетаНачислено.Колонки.Добавить("ДокументОснование");
	СтрокиОтчетаНачислено.Колонки.Добавить("Показатель");
	СтрокиОтчетаНачислено.Колонки.Добавить("Значение");
	СтрокиОтчетаНачислено.Колонки.Добавить("ВидРабот");
	СтрокиОтчетаНачислено.Колонки.Добавить("ОбъемВыполненныхРабот");
	СтрокиОтчетаНачислено.Колонки.Добавить("Расшифровка", Новый ОписаниеТипов("Булево"));

	СтрокиОтчетаУдержано = СтрокиОтчетаНачислено.СкопироватьКолонки();

	СтрокиОтчетаВыплачено = СтрокиОтчетаУдержано.СкопироватьКолонки();
	СтрокиОтчетаВыплачено.Колонки.Добавить("РегистраторВыплаты");

	#Область СборСведений

	ИтогиРазделов = Новый Структура;
	ИтогиРазделов.Вставить("Начислено", 0);
	ИтогиРазделов.Вставить("Удержано", 0);
	ИтогиРазделов.Вставить("Выплачено", 0);
	ИтогиРазделов.Вставить("НачисленоВНатуральнойФорме", 0);

	КоллекцияНачислено = Новый ТаблицаЗначений;
	КоллекцияНачислено.Колонки.Добавить("ФизическоеЛицо");
	КоллекцияНачислено.Колонки.Добавить("Сотрудник");
	КоллекцияНачислено.Колонки.Добавить("Группа");
	КоллекцияНачислено.Колонки.Добавить("ВидРасчета");
	КоллекцияНачислено.Колонки.Добавить("ВидРасчетаКраткоеНаименование");
	КоллекцияНачислено.Колонки.Добавить("ПриоритетВидаРасчета");
	КоллекцияНачислено.Колонки.Добавить("ПериодДействия");
	КоллекцияНачислено.Колонки.Добавить("ПериодДействияПредставление");
	КоллекцияНачислено.Колонки.Добавить("МесяцНачисления");
	КоллекцияНачислено.Колонки.Добавить("ОтработаноДней");
	КоллекцияНачислено.Колонки.Добавить("ОтработаноЧасов");
	КоллекцияНачислено.Колонки.Добавить("ОплаченоДней");
	КоллекцияНачислено.Колонки.Добавить("ОплаченоЧасов");
	КоллекцияНачислено.Колонки.Добавить("Сумма");
	КоллекцияНачислено.Колонки.Добавить("ДокументОснование");
	КоллекцияНачислено.Колонки.Добавить("Показатель");
	КоллекцияНачислено.Колонки.Добавить("Значение");
	КоллекцияНачислено.Колонки.Добавить("ПорядокПоказателей");

	КоллекцияУдержано = Новый ТаблицаЗначений;
	КоллекцияУдержано.Колонки.Добавить("ФизическоеЛицо");
	КоллекцияУдержано.Колонки.Добавить("Сотрудник");
	КоллекцияУдержано.Колонки.Добавить("Группа");
	КоллекцияУдержано.Колонки.Добавить("ВидРасчета");
	КоллекцияУдержано.Колонки.Добавить("ВидРасчетаКраткоеНаименование");
	КоллекцияУдержано.Колонки.Добавить("ПриоритетВидаРасчета");
	КоллекцияУдержано.Колонки.Добавить("ДокументОснование");
	КоллекцияУдержано.Колонки.Добавить("ПериодДействия");
	КоллекцияУдержано.Колонки.Добавить("Сумма");
	КоллекцияУдержано.Колонки.Добавить("Показатель");
	КоллекцияУдержано.Колонки.Добавить("Значение");
	КоллекцияУдержано.Колонки.Добавить("ПорядокПоказателей");
	// Добавлены для совместимости процедур свертки строк
	КоллекцияУдержано.Колонки.Добавить("ПериодДействияПредставление");
	КоллекцияУдержано.Колонки.Добавить("МесяцНачисления");

	КоллекцияВыплачено = Новый ТаблицаЗначений;
	КоллекцияВыплачено.Колонки.Добавить("ФизическоеЛицо");
	КоллекцияВыплачено.Колонки.Добавить("Сотрудник");
	КоллекцияВыплачено.Колонки.Добавить("Группа");
	КоллекцияВыплачено.Колонки.Добавить("РегистраторВыплаты");
	КоллекцияВыплачено.Колонки.Добавить("ПредставлениеРегистратораВыплаты");
	КоллекцияВыплачено.Колонки.Добавить("ВидРасчета");
	КоллекцияВыплачено.Колонки.Добавить("ПриоритетВидаРасчета");
	КоллекцияВыплачено.Колонки.Добавить("ПериодДействия");
	КоллекцияВыплачено.Колонки.Добавить("Сумма");
	КоллекцияВыплачено.Колонки.Добавить("Номер");
	КоллекцияВыплачено.Колонки.Добавить("Дата");

	КоллекцииРазделов = Новый Структура;
	КоллекцииРазделов.Вставить("Начислено", Новый Массив);
	КоллекцииРазделов.Вставить("Удержано",	КоллекцияУдержано);
	КоллекцииРазделов.Вставить("Выплачено", КоллекцияВыплачено);
	КоллекцииРазделов.Вставить("Льготы",	Новый Массив);
	КоллекцииРазделов.Вставить("Справочно", Новый Массив);

	ИзвестныеСтрокиСправочно = Новый Соответствие;
	ИзвестныеСтрокиВыплат = Новый Соответствие;
	ИзвестныеСтрокиЛьготы = Новый Соответствие;

	ИнформацияОВидахРасчета = Новый Соответствие;

	СоответствиеСтрокРасчетногоЛисткаСтрокамОтчета = Новый Соответствие;

	ЗначенияЗаполненияПолейГоловногоСотрудника = Неопределено;

	ИменаИзмеренийНачислений = "Сотрудник,ВидРасчета,ВидРасчетаКраткоеНаименование";
	ИменаИзмеренийУдержаний = "ФизическоеЛицо,ВидРасчета,ВидРасчетаКраткоеНаименование";
	Если НастройкиВывода.ВыводитьПериодыНачислений Тогда
		ИменаИзмеренийНачислений = ИменаИзмеренийНачислений + ",ПериодДействия";
		ИменаИзмеренийУдержаний = ИменаИзмеренийУдержаний + ",ПериодДействия";
	КонецЕсли;
	Если НастройкиВывода.ВыводитьПоказателиНачисленийИУдержаний
		Или НастройкиВывода.ВыводитьВсеПоказателиНачисленийИУдержаний Тогда

		ИменаИзмеренийНачислений = ИменаИзмеренийНачислений + ",Показатель";
		ИменаИзмеренийУдержаний = ИменаИзмеренийУдержаний + ",Показатель";

		Если НастройкиВывода.ВыводитьРасшифровкиОднойСтрокой Тогда
			ИменаИзмеренийНачислений = ИменаИзмеренийНачислений + ",Значение";
			ИменаИзмеренийУдержаний = ИменаИзмеренийУдержаний + ",Значение";
		КонецЕсли;

	КонецЕсли;

	Если НастройкиВывода.ВыводитьОснованияНачисленийИУдержаний Тогда

		ИменаИзмеренийНачислений = ИменаИзмеренийНачислений + ",ДокументОснование";
		ИменаИзмеренийУдержаний = ИменаИзмеренийУдержаний + ",ДокументОснование";

	КонецЕсли;

	ИменаИзмеренийВыплачено = "ФизическоеЛицо,ВидРасчета,ВидРасчетаКраткоеНаименование";
	Если НастройкиВывода.ВыводитьПериодыНачислений Тогда
		ИменаИзмеренийВыплачено = ИменаИзмеренийВыплачено + ",ПериодДействия";
	КонецЕсли;

	СотрудникОтчета = СтрокиГоловныхСотрудников[0].ГоловнойСотрудник;
	ВывестиСдельныйЗаработокПоФизическомуЛицу = Истина;

	ТекущееФизическоеЛицо = Неопределено;
	Для каждого СтрокаГоловногоСотрудника Из СтрокиГоловныхСотрудников Цикл

		ЗначенияЗаполненияПолейГоловногоСотрудника = ЗначенияЗаполненияПользовательскихПолей(СоответствиеПользовательскихПолей, СтрокаГоловногоСотрудника);

		Если ТекущееФизическоеЛицо = Неопределено Тогда
			ТекущееФизическоеЛицо = СтрокаГоловногоСотрудника.ФизическоеЛицо;
		КонецЕсли;

		Для каждого СтрокаСотрудника Из СтрокаГоловногоСотрудника.Строки Цикл

			// Начислено
			РабочееМесто = Новый Структура("СтрокаСотрудника,СтрокиНачислений", СтрокаСотрудника, КоллекцияНачислено.Скопировать());

			СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено, "Группа");
			Если СтрокаГруппы <> Неопределено Тогда

				СторноСтроки = Новый Соответствие;
				РегистраторыНачислений = Новый Соответствие;
				Для каждого СтрокаНачислений Из СтрокаГруппы.Строки Цикл

					СтрокаКоллекции = РабочееМесто.СтрокиНачислений.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаКоллекции, СтрокаНачислений);

					Если Не ЗначениеЗаполнено(СтрокаНачислений.ВидЗанятостиГоловногоСотрудникаНаКонецПериода) Тогда
						СтрокаКоллекции.Сотрудник = СотрудникОтчета;
					КонецЕсли;

					Если НастройкиВывода.ВыводитьПериодыНачислений Тогда

						Если СтрокаНачислений.ПериодДействия = СтрокаНачислений.МесяцНачисления Тогда

							Если СтрокаНачислений.Сторно = Истина
								И СтрокаНачислений.Владелец().Колонки.Найти("ДокументОснование") <> Неопределено
								И СтрокаНачислений.ДокументОснование <> СтрокаНачислений.Регистратор Тогда

								СторноСтроки.Вставить(СтрокаКоллекции, СтрокаНачислений.ДокументОснование);

							Иначе

								Если СтрокаНачислений.Сумма <> 0 Тогда

									СтрокиРегистратора = РегистраторыНачислений.Получить(СтрокаНачислений.Регистратор);
									Если СтрокиРегистратора = Неопределено Тогда
										СтрокиРегистратора = Новый Соответствие;
										РегистраторыНачислений.Вставить(СтрокаНачислений.Регистратор, СтрокиРегистратора);
									КонецЕсли;

									СтрокиРегистратора.Вставить(СтрокаНачислений.ВидРасчета, СтрокаКоллекции);

								КонецЕсли;

							КонецЕсли;

						КонецЕсли;

						СтрокаКоллекции.ПериодДействияПредставление = СтрокаКоллекции.ПериодДействия;
						Если ЗначениеЗаполнено(СтрокаНачислений.ДатаНачала) И ЗначениеЗаполнено(СтрокаНачислений.ДатаОкончания) Тогда

							Если СтрокаНачислений.ДатаНачала <> СтрокаНачислений.ПериодДействия
								Или СтрокаНачислений.ДатаОкончания <> НачалоДня(КонецМесяца(СтрокаНачислений.ПериодДействия)) Тогда

								Если СтрокаНачислений.ДатаНачала = СтрокаНачислений.ДатаОкончания Тогда
									СтрокаКоллекции.ПериодДействияПредставление = Формат(СтрокаНачислений.ДатаНачала, "ДФ=дд.ММ");
								Иначе

									СтрокаКоллекции.ПериодДействияПредставление = Формат(СтрокаНачислений.ДатаНачала, "ДФ=дд.ММ") + "-"
									+ Формат(СтрокаНачислений.ДатаОкончания, "ДФ=дд.ММ");

								КонецЕсли;

							КонецЕсли;

						КонецЕсли;

					КонецЕсли;

					Если НастройкиВывода.ВыводитьОтработанноеОплаченноеВремя Тогда

						СтрокаКоллекции.ОплаченоДней = 0;
						СтрокаКоллекции.ОплаченоЧасов = 0;

						УчетВремениВЧасах = СтрокаНачислений.ВремяВЧасах = Истина;

						Если УчетВремениВЧасах И ЗначениеЗаполнено(СтрокаНачислений.ОплаченоЧасов) И СтрокаНачислений.ОплаченоЧасов <> 0 Тогда
							СтрокаКоллекции.ОплаченоЧасов = СтрокаНачислений.ОплаченоЧасов;
						ИначеЕсли НЕ УчетВремениВЧасах И ЗначениеЗаполнено(СтрокаНачислений.ОплаченоДней) И СтрокаНачислений.ОплаченоДней <> 0 Тогда
							СтрокаКоллекции.ОплаченоДней = СтрокаНачислений.ОплаченоДней;
						КонецЕсли;

					КонецЕсли;

					ИтогиРазделов.Начислено = ИтогиРазделов.Начислено + СтрокаНачислений.Сумма;
					Если ТипЗнч(СтрокаНачислений.ВидРасчета) = Тип("ПланВидовРасчетаСсылка.Начисления") Тогда

						ЯвляетсяДоходомВНатуральнойФорме = ИнформацияОВидахРасчета.Получить(СтрокаНачислений.ВидРасчета);
						Если ЯвляетсяДоходомВНатуральнойФорме = Неопределено Тогда
							ЯвляетсяДоходомВНатуральнойФорме = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаНачислений.ВидРасчета, "ЯвляетсяДоходомВНатуральнойФорме");
							ИнформацияОВидахРасчета.Вставить(СтрокаНачислений.ВидРасчета, ЯвляетсяДоходомВНатуральнойФорме);
						КонецЕсли;

						Если ЯвляетсяДоходомВНатуральнойФорме = Истина Тогда
							ИтогиРазделов.НачисленоВНатуральнойФорме = ИтогиРазделов.НачисленоВНатуральнойФорме + СтрокаНачислений.Сумма;
						КонецЕсли;

					КонецЕсли;

					ДобавитьВСоответствиеСтрокуДанных(
					СоответствиеСтрокРасчетногоЛисткаСтрокамОтчета,
					СтрокаНачислений,
					ИменаИзмеренийНачислений);

				КонецЦикла;

			КонецЕсли;

			Если РабочееМесто.СтрокиНачислений.Количество() > 0 Тогда

				Если СтрокаСотрудника.Сотрудник <> СтрокаСотрудника.ГоловнойСотрудник
					Или СтрокаСотрудника.Сотрудник <> СотрудникОтчета Тогда

					СтрокаОтчета = СтрокиОтчетаНачислено.Добавить();
					СтрокаОтчета.ИмяОбласти = "ЗаголовокРабочееМестоВыплачено";
					СтрокаОтчета.ПредставлениеРабочегоМеста = ПредставлениеРабочегоМеста(РабочееМесто.СтрокаСотрудника);
					СтрокаОтчета.СтрокаДанных = СтрокаСотрудника;

				КонецЕсли;

				Если СторноСтроки.Количество() > 0 Тогда

					Для Каждого ОписаниеСторноСтроки Из СторноСтроки Цикл

						СторноСтрока = ОписаниеСторноСтроки.Ключ;
						СтрокиРегистратора = РегистраторыНачислений.Получить(ОписаниеСторноСтроки.Значение);
						Если СтрокиРегистратора <> Неопределено Тогда

							СтрокаВидаРасчета = СтрокиРегистратора.Получить(СторноСтрока.ВидРасчета);
							Если СтрокаВидаРасчета <> Неопределено Тогда

								ЗаполнитьЗначенияСвойств(СторноСтрока, СтрокаВидаРасчета,
								"ПериодДействия,ПериодДействияПредставление,ПриоритетВидаРасчета,Показатель,Значение,ПорядокПоказателей");

							КонецЕсли;

						КонецЕсли;

					КонецЦикла;

				КонецЕсли;

				СуммируемыеКолонки = "Сумма";
				Если НастройкиВывода.ВыводитьОтработанноеОплаченноеВремя Тогда
					СуммируемыеКолонки = СуммируемыеКолонки + ",ОтработаноДней,ОтработаноЧасов,ОплаченоДней,ОплаченоЧасов";
				КонецЕсли;

				СвернутьСтрокиВидовРасчета(РабочееМесто.СтрокиНачислений, "ФизическоеЛицо,Группа,Сотрудник,ВидРасчета,ВидРасчетаКраткоеНаименование,ПриоритетВидаРасчета", СуммируемыеКолонки, НастройкиВывода, Ложь);

				Если НастройкиВывода.ВыводитьПериодыНачислений Тогда

					УдалятьСтрокиБезПоказателей = РабочееМесто.СтрокиНачислений.Колонки.Найти("ПорядокПоказателей") = Неопределено;
					УдаляемыеСтроки = Новый Массив;
					Для каждого СтрокаНачислений Из РабочееМесто.СтрокиНачислений Цикл

						Если СтрокаНачислений.ПериодДействия = СтрокаНачислений.МесяцНачисления Тогда
							Продолжить;
						КонецЕсли;

						Если УдалятьСтрокиБезПоказателей Или СтрокаНачислений.ПорядокПоказателей = 1 Тогда

							УдалитьСтроку = Истина;
							Для каждого ИмяКолонки Из СтрРазделить(СуммируемыеКолонки, ",") Цикл

								Если СтрокаНачислений[ИмяКолонки] <> 0 Тогда
									УдалитьСтроку = Ложь;
									Прервать;
								КонецЕсли;

							КонецЦикла;

							Если УдалитьСтроку Тогда
								УдаляемыеСтроки.Добавить(СтрокаНачислений);
							КонецЕсли;

						КонецЕсли;

					КонецЦикла;

					Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
						РабочееМесто.СтрокиНачислений.Удалить(УдаляемаяСтрока);
					КонецЦикла;

				КонецЕсли;

				КоллекцииРазделов.Начислено.Добавить(РабочееМесто);

			КонецЕсли;

			ДобавитьСтрокиРаздела(
			СтрокиОтчетаНачислено,
			РабочееМесто.СтрокиНачислений,
			НастройкиВывода,
			СоответствиеСтрокРасчетногоЛисткаСтрокамОтчета,
			СоответствиеПользовательскихПолей,
			ИменаИзмеренийНачислений,
			Макет,
			"ВидНачислено",
			ДополнительныеПараметры.СдельныйЗаработокСотрудников,
			ВывестиСдельныйЗаработокПоФизическомуЛицу);

			ВывестиСдельныйЗаработокПоФизическомуЛицу = Ложь;

			// Удержано
			СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано, "Группа");
			Если СтрокаГруппы <> Неопределено Тогда

				Для каждого СтрокаУдержаний Из СтрокаГруппы.Строки Цикл

					СтрокаКоллекции = КоллекцииРазделов.Удержано.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаКоллекции, СтрокаУдержаний);

					ИтогиРазделов.Удержано = ИтогиРазделов.Удержано + СтрокаУдержаний.Сумма;

					ДобавитьВСоответствиеСтрокуДанных(
					СоответствиеСтрокРасчетногоЛисткаСтрокамОтчета,
					СтрокаУдержаний,
					ИменаИзмеренийУдержаний);

				КонецЦикла;

				СвернутьСтрокиВидовРасчета(КоллекцииРазделов.Удержано, "ФизическоеЛицо,Группа,Сотрудник,ВидРасчета,ВидРасчетаКраткоеНаименование,ПриоритетВидаРасчета", "Сумма", НастройкиВывода, Истина);

			КонецЕсли;

			// Выплачено
			СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Выплачено, "Группа");
			Если СтрокаГруппы <> Неопределено Тогда

				Для каждого СтрокаВыплачено Из СтрокаГруппы.Строки Цикл

					Для каждого СтрокаСРегистратором Из СтрокаВыплачено.Строки Цикл

						СтрокаКоллекции = ИзвестныеСтрокиВыплат.Получить(СтрокаСРегистратором.Регистратор);
						Если СтрокаКоллекции = Неопределено Тогда

							СтрокаКоллекции = КоллекцииРазделов.Выплачено.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаКоллекции, СтрокаСРегистратором);
							СтрокаКоллекции.РегистраторВыплаты = СтрокаСРегистратором.Регистратор;

							СвойстваРегистратора = СвойстваРегистраторов.Получить(СтрокаСРегистратором.Регистратор);
							Если СвойстваРегистратора <> Неопределено Тогда

								Если НастройкиВывода.ДетализироватьВыплатыПоВедомостям Тогда

									СтрокаКоллекции.ПредставлениеРегистратораВыплаты = ПредставлениеРегистраторовВзаиморасчетов(
									СтрокаСРегистратором.Регистратор, СтрокаСРегистратором.ВидРасчета, СвойстваРегистратора);

								Иначе
									СтрокаКоллекции.ПредставлениеРегистратораВыплаты = ПредставлениеВыплаты(СтрокаСРегистратором.ВидРасчета, СвойстваРегистратора)
								КонецЕсли;

								Если НастройкиВывода.ВыводитьПериодыНачислений И СвойстваРегистратора.Свойство("ПериодРегистрации") Тогда
									СтрокаКоллекции.ПериодДействия = СвойстваРегистратора.ПериодРегистрации;
								КонецЕсли;

							КонецЕсли;

							ИзвестныеСтрокиВыплат.Вставить(СтрокаСРегистратором.Регистратор, СтрокаКоллекции);

						Иначе
							СтрокаКоллекции.Сумма = СтрокаКоллекции.Сумма + СтрокаСРегистратором.Сумма;
						КонецЕсли;

						ДобавитьВСоответствиеСтрокуДанных(
						СоответствиеСтрокРасчетногоЛисткаСтрокамОтчета,
						СтрокаВыплачено,
						ИменаИзмеренийВыплачено);

					КонецЦикла;

					ИтогиРазделов.Выплачено = ИтогиРазделов.Выплачено + СтрокаВыплачено.Сумма;

				КонецЦикла;

			КонецЕсли;

			// Льготы
			Если НастройкиВывода.ВыводитьИнформациюОЛьготах Тогда

				СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Льготы, "Группа");
				Если СтрокаГруппы <> Неопределено Тогда

					Для каждого СтрокаЛьготы Из СтрокаГруппы.Строки Цикл

						СтрокаКоллекции = ИзвестныеСтрокиЛьготы.Получить(СтрокаЛьготы.ВидРасчета);
						Если СтрокаКоллекции = Неопределено Тогда

							СтрокаКоллекции = Новый Структура("ФизическоеЛицо,Группа,Сотрудник,ВидРасчета,ВидРасчетаКраткоеНаименование,ПриоритетВидаРасчета,Сумма");
							ЗаполнитьЗначенияСвойств(СтрокаКоллекции, СтрокаЛьготы);
							КоллекцииРазделов.Льготы.Добавить(СтрокаКоллекции);
							ИзвестныеСтрокиЛьготы.Вставить(СтрокаЛьготы.ВидРасчета, СтрокаКоллекции);

						Иначе
							СтрокаКоллекции.Сумма = СтрокаКоллекции.Сумма + СтрокаЛьготы.Сумма;
						КонецЕсли;

					КонецЦикла;

				КонецЕсли;

			КонецЕсли;

			// Справочно
			Если НастройкиВывода.ВыводитьСправочнуюИнформацию Тогда

				СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно, "Группа");
				Если СтрокаГруппы <> Неопределено Тогда

					Для каждого СтрокаСправочно Из СтрокаГруппы.Строки Цикл

						СтрокаКоллекции = ИзвестныеСтрокиСправочно.Получить(СтрокаСправочно.ВидРасчета);
						Если СтрокаКоллекции = Неопределено Тогда

							СтрокаКоллекции = Новый Структура("ФизическоеЛицо,Группа,Сотрудник,ВидРасчета,ВидРасчетаКраткоеНаименование,ПриоритетВидаРасчета,Сумма");
							ЗаполнитьЗначенияСвойств(СтрокаКоллекции, СтрокаСправочно);
							КоллекцииРазделов.Справочно.Добавить(СтрокаКоллекции);
							ИзвестныеСтрокиСправочно.Вставить(СтрокаСправочно.ВидРасчета, СтрокаКоллекции);

						Иначе
							СтрокаКоллекции.Сумма = СтрокаКоллекции.Сумма + СтрокаСправочно.Сумма;
						КонецЕсли;

					КонецЦикла;

				КонецЕсли;

			КонецЕсли;

			// Начальное сальдо
			СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.НачальноеСальдо, "Группа");
			Если СтрокаГруппы <> Неопределено Тогда
				УвеличитьРезультатНаСуммуСтроки(ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца, СтрокаГруппы);
				СтрокаДанныхРасчетногоЛистка = ДанныеРасчетныхЛистков.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДанныхРасчетногоЛистка, СтрокаГруппы);
				СтрокаДанныхРасчетногоЛистка.Сотрудник = СотрудникОтчета;
			КонецЕсли;

			СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.НачальноеСальдоПоМесяцамРасчета, "Группа");
			УвеличитьРезультатНаСуммуСтроки(ИтогиПоГруппам.СуммаДолгаНаНачалоМесяцаРасчета, СтрокаГруппы);

			// КонечноеСальдо
			СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.КонечноеСальдо, "Группа");
			Если СтрокаГруппы <> Неопределено Тогда
				УвеличитьРезультатНаСуммуСтроки(ИтогиПоГруппам.СуммаДолгаНаКонецМесяца, СтрокаГруппы);
				СтрокаДанныхРасчетногоЛистка = ДанныеРасчетныхЛистков.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДанныхРасчетногоЛистка, СтрокаГруппы);
				СтрокаДанныхРасчетногоЛистка.Сотрудник = СотрудникОтчета;
			КонецЕсли;

			СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.КонечноеСальдоПоМесяцамРасчета, "Группа");
			УвеличитьРезультатНаСуммуСтроки(ИтогиПоГруппам.СуммаДолгаНаКонецМесяцаРасчета, СтрокаГруппы);

			Если НастройкиВывода.РассчитатьИтогиПоДанным Тогда

				ИтогиПоГруппам.СуммаДолгаНаКонецМесяца =
				ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца
				+ ИтогиРазделов.Начислено
				- ИтогиРазделов.Удержано
				- ИтогиРазделов.Выплачено;

				ИтогиПоГруппам.СуммаДолгаНаКонецМесяцаРасчета =
				ИтогиПоГруппам.СуммаДолгаНаНачалоМесяцаРасчета
				+ ИтогиРазделов.Начислено
				- ИтогиРазделов.Удержано
				- ИтогиРазделов.Выплачено;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	СворачиваемыеКолонки = "ФизическоеЛицо,Группа,Сотрудник,ВидРасчета,ПриоритетВидаРасчета,ПредставлениеРегистратораВыплаты";
	Если НастройкиВывода.ДетализироватьВыплатыПоВедомостям Тогда
		СворачиваемыеКолонки = СворачиваемыеКолонки + ",РегистраторВыплаты,Дата,Номер";
		КоллекцииРазделов.Выплачено.Сортировать("Дата,Номер");
	КонецЕсли;
	Если НастройкиВывода.ВыводитьПериодыНачислений Тогда
		СворачиваемыеКолонки = СворачиваемыеКолонки + ",ПериодДействия";
	КонецЕсли;
	КоллекцииРазделов.Выплачено.Свернуть(СворачиваемыеКолонки, "Сумма");

	УдалитьСтрокиСНулевойСуммой(КоллекцииРазделов.Выплачено);

	#КонецОбласти

	#Область ВыводТела

	ИтогиПоГруппам.Начислено = ИтогиРазделов.Начислено;
	ИтогиПоГруппам.Удержано = ИтогиРазделов.Удержано;
	ИтогиПоГруппам.Выплачено = ИтогиРазделов.Выплачено;

	ДобавитьСтрокиРаздела(
	СтрокиОтчетаУдержано,
	КоллекцииРазделов.Удержано,
	НастройкиВывода,
	СоответствиеСтрокРасчетногоЛисткаСтрокамОтчета,
	СоответствиеПользовательскихПолей,
	ИменаИзмеренийУдержаний,
	Макет,
	"ВидУдержаноВыплачено");

	Для Каждого СтрокаВыплачено Из КоллекцииРазделов.Выплачено Цикл

		СтрокаОтчета = СтрокиОтчетаВыплачено.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОтчета, СтрокаВыплачено);
		СтрокаОтчета.ИмяОбласти = "Строка";
		СтрокаОтчета.СтрокаДанных = СтрокаДанныхИзСоответствияСтрок(
		СоответствиеСтрокРасчетногоЛисткаСтрокамОтчета,
		СтрокаОтчета,
		ИменаИзмеренийВыплачено);

		СтрокаОтчета.ВидРасчета = СтрокаВыплачено.ПредставлениеРегистратораВыплаты;

	КонецЦикла;

	// Подготовка данных расчетных листков

	СтрокаОтчетаПредставлениеРабочегоМеста = "";
	Для Каждого СтрокаОтчетаНачислено Из СтрокиОтчетаНачислено Цикл

		Если СтрокаОтчетаПредставлениеРабочегоМеста <> СтрокаОтчетаНачислено.ПредставлениеРабочегоМеста
			И ЗначениеЗаполнено(СтрокаОтчетаНачислено.ПредставлениеРабочегоМеста) Тогда

			СтрокаОтчетаПредставлениеРабочегоМеста = СтрокаОтчетаНачислено.ПредставлениеРабочегоМеста;
		КонецЕсли;

		Если СтрокаОтчетаНачислено.ПредставлениеРабочегоМеста <> СтрокаОтчетаПредставлениеРабочегоМеста Тогда
			СтрокаОтчетаНачислено.ПредставлениеРабочегоМеста = СтрокаОтчетаПредставлениеРабочегоМеста
		КонецЕсли;

		СтрокаДанныхРасчетногоЛистка = ДанныеРасчетныхЛистков.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанныхРасчетногоЛистка, СтрокаОтчетаНачислено);
		СтрокаДанныхРасчетногоЛистка.ПриоритетВидаРасчета =
		ПриоритетВидаРасчетаДанныхРасчетныхЛистков(СтрокаДанныхРасчетногоЛистка.ПриоритетВидаРасчета);

	КонецЦикла;

	Для Каждого СтрокаВидаРасчета Из СтрокиОтчетаУдержано Цикл

		СтрокаДанныхРасчетногоЛистка = ДанныеРасчетныхЛистков.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанныхРасчетногоЛистка, СтрокаВидаРасчета);
		СтрокаДанныхРасчетногоЛистка.Сотрудник = СотрудникОтчета;
		СтрокаДанныхРасчетногоЛистка.ПриоритетВидаРасчета =
		ПриоритетВидаРасчетаДанныхРасчетныхЛистков(СтрокаДанныхРасчетногоЛистка.ПриоритетВидаРасчета);
		
		#Вставка
		СтрокаДанныхРасчетногоЛистка.ПериодДействияПредставление = СтрокаВидаРасчета.ПериодДействия; 
		#КонецВставки
		
	КонецЦикла;

	Для Каждого СтрокаВидаРасчета Из КоллекцииРазделов.Выплачено Цикл

		СтрокаДанныхРасчетногоЛистка = ДанныеРасчетныхЛистков.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанныхРасчетногоЛистка, СтрокаВидаРасчета);
		СтрокаДанныхРасчетногоЛистка.Сотрудник = СотрудникОтчета;
		СтрокаДанныхРасчетногоЛистка.ПриоритетВидаРасчета =
		ПриоритетВидаРасчетаДанныхРасчетныхЛистков(СтрокаДанныхРасчетногоЛистка.ПриоритетВидаРасчета);
		
		#Вставка
		СтрокаДанныхРасчетногоЛистка.ПериодДействияПредставление = СтрокаВидаРасчета.ПериодДействия; 
		#КонецВставки
		
	КонецЦикла;

	Для Каждого СтрокаВидаРасчета Из КоллекцииРазделов.Льготы Цикл

		СтрокаДанныхРасчетногоЛистка = ДанныеРасчетныхЛистков.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанныхРасчетногоЛистка, СтрокаВидаРасчета);
		СтрокаДанныхРасчетногоЛистка.Сотрудник = СотрудникОтчета;

	КонецЦикла;

	Для Каждого СтрокаВидаРасчета Из КоллекцииРазделов.Справочно Цикл

		СтрокаДанныхРасчетногоЛистка = ДанныеРасчетныхЛистков.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанныхРасчетногоЛистка, СтрокаВидаРасчета);
		СтрокаДанныхРасчетногоЛистка.Сотрудник = СотрудникОтчета;

	КонецЦикла;

	// Сворачивание итогов и справочных данных
	#Удаление
	ДанныеРасчетныхЛистков.Свернуть(
	"ФизическоеЛицо,Сотрудник,ПредставлениеРабочегоМеста,Группа,ВидРасчета,ВидРасчетаКраткоеНаименование,"
	+ "РегистраторВыплаты,ПриоритетВидаРасчета,ПериодДействия,ОплаченныеДниЧасы",
	"Сумма");
	#КонецУдаления
	
	#Вставка
	ДанныеРасчетныхЛистков.Свернуть(
	"ФизическоеЛицо,Сотрудник,ПредставлениеРабочегоМеста,Группа,ВидРасчета,ВидРасчетаКраткоеНаименование,"
	+ "РегистраторВыплаты,ПриоритетВидаРасчета,ПериодДействия,ОплаченныеДниЧасы, ПредставлениеРегистратораВыплаты, ПериодДействияПредставление",
	"Сумма");	
	#КонецВставки

	#Область ДобавлениеИтоговПоРазделам

	СтрокаОтчета = СтрокиОтчетаНачислено.Вставить(0);
	СтрокаОтчета.ИмяОбласти = "ЗаголовокНачисленоУдержано";
	СтрокаОтчета.СтрокаДанных = СтрокиГоловныхСотрудников[0];
	СтрокаОтчета.Сумма = ИтогиРазделов.Начислено;

	СтрокаОтчета = СтрокиОтчетаУдержано.Вставить(0);
	СтрокаОтчета.ИмяОбласти = "ЗаголовокНачисленоУдержано";
	СтрокаОтчета.СтрокаДанных = СтрокиГоловныхСотрудников[0];
	СтрокаОтчета.Сумма = ИтогиРазделов.Удержано;

	СтрокаОтчета = СтрокиОтчетаВыплачено.Вставить(0);
	СтрокаОтчета.ИмяОбласти = "ЗаголовокРабочееМестоВыплачено";
	СтрокаОтчета.СтрокаДанных = СтрокиГоловныхСотрудников[0];
	СтрокаОтчета.Сумма = ИтогиРазделов.Выплачено;

	Если ИтогиРазделов.НачисленоВНатуральнойФорме <> 0 Тогда

		СтрокаОтчета = СтрокиОтчетаНачислено.Вставить(1);
		СтрокаОтчета.ИмяОбласти = "ЗаголовокНачисленоВНатуральнойФорме";
		СтрокаОтчета.Сумма = ИтогиРазделов.НачисленоВНатуральнойФорме;
		СтрокаОтчета.СтрокаДанных = СтрокаСотрудника;
		СтрокаОтчета.Расшифровка = Истина;

	КонецЕсли;

	#КонецОбласти

	РасшифровкаНачислений = Ложь;
	КорректировкаИндексаНачислений = 0;

	РасшифровкаУдержанийВыплат = Ложь;
	КорректировкаИндексаУдержанийВыплат = 0;

	ПустыеПараметрыЗаполнения = Новый Структура("ПредставлениеРабочегоМеста,ВидРасчета,ВидРасчетаКраткоеНаименование,ПериодДействия,ОтработаноДней,
	|ОтработаноЧасов,ОплаченныеДниЧасы,Сумма,ДокументОснование,Показатель,Значение");

	// Вывод шапки
	Если НастройкиВывода.ВыводитьОтработанноеОплаченноеВремя Тогда
		ВывестиОбластиСтроки(ДокументРезультат, Макет, "ШапкаТаблицы", НастройкиВывода, ДополненныеПараметры(ДанныеПечатнойФормы, ЗначенияЗаполненияПолейГоловногоСотрудника));
	Иначе
		ВывестиОбластиСтроки(ДокументРезультат, Макет, "ШапкаТаблицыНизкая", НастройкиВывода, ДополненныеПараметры(ДанныеПечатнойФормы, ЗначенияЗаполненияПолейГоловногоСотрудника));
	КонецЕсли;

	Индекс = 0;
	Пока Индекс <= Макс(СтрокиОтчетаНачислено.Количество() - 1 + КорректировкаИндексаНачислений, СтрокиОтчетаУдержано.Количество() + СтрокиОтчетаВыплачено.Количество() - 1 + КорректировкаИндексаУдержанийВыплат) Цикл

		// Параметры выводимой строки

		РасшифровкаНачислений = Ложь;
		ИндексНачислений = Индекс - КорректировкаИндексаНачислений;
		Если ИндексНачислений < СтрокиОтчетаНачислено.Количество() Тогда

			СтрокаНачислений = СтрокиОтчетаНачислено[ИндексНачислений];
			РасшифровкаНачислений = СтрокаНачислений.Расшифровка;

		КонецЕсли;

		РасшифровкаУдержанийВыплат = Ложь;
		ИндексУдержанийВыплат = Индекс - КорректировкаИндексаУдержанийВыплат;
		Если ИндексУдержанийВыплат < СтрокиОтчетаУдержано.Количество()
			Или РасшифровкаНачислений И ИндексУдержанийВыплат = СтрокиОтчетаУдержано.Количество() Тогда

			Если ИндексУдержанийВыплат < СтрокиОтчетаУдержано.Количество() Тогда
				СтрокаУдержано = СтрокиОтчетаУдержано[ИндексУдержанийВыплат];
				РасшифровкаУдержанийВыплат = СтрокаУдержано.Расшифровка;
			КонецЕсли;

		КонецЕсли;

		//Начислено

		Если ИндексНачислений < СтрокиОтчетаНачислено.Количество() Тогда

			Если Не РасшифровкаУдержанийВыплат Или РасшифровкаНачислений Тогда

				ИмяОбластиСтроки = СтрокаНачислений.ИмяОбласти;

				Если ЗначениеЗаполнено(СтрокаНачислений.СтрокаДанных) Тогда
					ЗначенияЗаполненияПолейПоПараметрам = ЗначенияЗаполненияПользовательскихПолей(СоответствиеПользовательскихПолей, СтрокаНачислений.СтрокаДанных);
				Иначе
					ЗначенияЗаполненияПолейПоПараметрам = Неопределено;
				КонецЕсли;
				ПараметрыЗаполнения = СтрокаНачислений;

			Иначе
				ИмяОбластиСтроки = "СтрокаРасшифровкаДокументОснование";
				ПараметрыЗаполнения = ПустыеПараметрыЗаполнения;
			КонецЕсли;

		Иначе

			Если Не РасшифровкаУдержанийВыплат Тогда
				ИмяОбластиСтроки = "Строка";
				ЗначенияЗаполненияПолейПоПараметрам = ЗначенияЗаполненияПользовательскихПолей(СоответствиеПользовательскихПолей, СтрокиГоловныхСотрудников[0]);
			Иначе
				ИмяОбластиСтроки = "СтрокаРасшифровкаДокументОснование";
			КонецЕсли;

			ПараметрыЗаполнения = ПустыеПараметрыЗаполнения;

		КонецЕсли;

		ВывестиОбластиСтрокиНачислено(ДокументРезультат, Макет, ИмяОбластиСтроки, НастройкиВывода,
		ДополненныеПараметры(ДанныеПечатнойФормы, ЗначенияЗаполненияПолейПоПараметрам, ПараметрыЗаполнения),
		РасшифровкаНачислений И НастройкиВывода.ВыводитьРасшифровкиОднойСтрокой);

		// Удержано, выплачено
		Если ИндексУдержанийВыплат < СтрокиОтчетаУдержано.Количество()
			Или РасшифровкаНачислений И ИндексУдержанийВыплат = СтрокиОтчетаУдержано.Количество() Тогда

			Если Не РасшифровкаНачислений Или РасшифровкаУдержанийВыплат Тогда

				ИмяОбластиСтроки = СтрокаУдержано.ИмяОбласти;

				Если ЗначениеЗаполнено(СтрокаУдержано.СтрокаДанных) Тогда
					ЗначенияЗаполненияПолейПоПараметрам = ЗначенияЗаполненияПользовательскихПолей(СоответствиеПользовательскихПолей, СтрокаУдержано.СтрокаДанных);
				Иначе
					ЗначенияЗаполненияПолейПоПараметрам = Неопределено;
				КонецЕсли;
				ПараметрыЗаполнения = СтрокаУдержано;

			Иначе
				Если ИндексУдержанийВыплат = 1 Тогда
					ИмяОбластиСтроки = "СтрокаРасшифровка";
				Иначе
					ИмяОбластиСтроки = "СтрокаРасшифровкаДокументОснование";
				КонецЕсли;
				ПараметрыЗаполнения = ПустыеПараметрыЗаполнения;
			КонецЕсли;

		ИначеЕсли ИндексУдержанийВыплат < СтрокиОтчетаУдержано.Количество() + СтрокиОтчетаВыплачено.Количество() Тогда

			ИндексВыплат = ИндексУдержанийВыплат - СтрокиОтчетаУдержано.Количество();
			СтрокаВыплачено = СтрокиОтчетаВыплачено[ИндексВыплат];
			Если Не РасшифровкаНачислений Тогда

				ИмяОбластиСтроки = СтрокаВыплачено.ИмяОбласти;

				Если ЗначениеЗаполнено(СтрокаВыплачено.СтрокаДанных) Тогда
					ЗначенияЗаполненияПолейПоПараметрам = ЗначенияЗаполненияПользовательскихПолей(СоответствиеПользовательскихПолей, СтрокаВыплачено.СтрокаДанных);
				Иначе
					ЗначенияЗаполненияПолейПоПараметрам = Неопределено;
				КонецЕсли;
				ПараметрыЗаполнения = СтрокаВыплачено;

			Иначе
				Если ИндексВыплат = 1 Тогда
					ИмяОбластиСтроки = "СтрокаРасшифровка";
				Иначе
					ИмяОбластиСтроки = "СтрокаРасшифровкаДокументОснование";
				КонецЕсли;
				ПараметрыЗаполнения = ПустыеПараметрыЗаполнения;
			КонецЕсли;

		Иначе

			Если Не РасшифровкаНачислений Тогда
				ИмяОбластиСтроки = "Строка";
				ЗначенияЗаполненияПолейПоПараметрам = Неопределено;
			Иначе
				ИмяОбластиСтроки = "СтрокаРасшифровкаДокументОснование";
			КонецЕсли;

			ПараметрыЗаполнения = ПустыеПараметрыЗаполнения;

		КонецЕсли;

		ПрисоединитьОбластиСтрокиУдержаноВыплачено(ДокументРезультат, Макет, ИмяОбластиСтроки, НастройкиВывода,
		ДополненныеПараметры(ДанныеПечатнойФормы, ЗначенияЗаполненияПолейПоПараметрам, ПараметрыЗаполнения),
		РасшифровкаУдержанийВыплат И НастройкиВывода.ВыводитьРасшифровкиОднойСтрокой);

		Если РасшифровкаНачислений И Не РасшифровкаУдержанийВыплат Тогда
			КорректировкаИндексаУдержанийВыплат = КорректировкаИндексаУдержанийВыплат + 1;
		ИначеЕсли Не РасшифровкаНачислений И РасшифровкаУдержанийВыплат Тогда
			КорректировкаИндексаНачислений = КорректировкаИндексаНачислений + 1;
		КонецЕсли;

		Индекс = Индекс + 1;

	КонецЦикла;

	ВывестиОбластиСтроки(ДокументРезультат, Макет, "ПодвалТаблицы", НастройкиВывода, ДополненныеПараметры(ДанныеПечатнойФормы, ЗначенияЗаполненияПолейГоловногоСотрудника));

	// Льготы

	Если КоллекцииРазделов.Льготы.Количество() > 0 Тогда

		Область = Макет.ПолучитьОбласть("ШапкаЛьготы");
		ДокументРезультат.Вывести(Область);

		ВывестиТелоСправочнойИнформации(ДокументРезультат, Макет, КоллекцииРазделов.Льготы,
		ДополненныеПараметры(ДанныеПечатнойФормы, ЗначенияЗаполненияПолейГоловногоСотрудника));

	КонецЕсли;

	// Справочно

	Если КоллекцииРазделов.Справочно.Количество() > 0 Тогда

		Область = Макет.ПолучитьОбласть("ШапкаСправочно");
		ДокументРезультат.Вывести(Область);

		ВывестиТелоСправочнойИнформации(ДокументРезультат, Макет, КоллекцииРазделов.Справочно,
		ДополненныеПараметры(ДанныеПечатнойФормы, ЗначенияЗаполненияПолейГоловногоСотрудника));

	КонецЕсли;

	#КонецОбласти

	Возврат ИтогиПоГруппам;

КонецФункции
