#Область ПрограммныйИнтерфейс

// Параметры:
//	ИмяСобытия - Строка, соотвествующая ключу из соответствия из функции "СобытияЛогаЛК"
//	Уровень - Строка, соотвествующая значению из структуры из функции "УровниЛога"
//	Период - Дата
//	Ключ - Структура - ключ данных
//       - Строка - ключ в формате JSON 
//  Данные - Структура - данные для лога
//		   - Строка - данные в формате JSON
//
Процедура ДобавитьЗаписьВЛог(УровеньЛога, ИмяСобытия, Уровень, Ключ, Период =  Неопределено,  Данные = "") Экспорт
	
	УровеньЛогирования = ЛК_РаботаСФункциями.Результат(ЛК_ОбменДаннымиПовтИсп.НастройкиСервиса()).УровеньЛогирования;
	Если Не ЗначениеЗаполнено(УровеньЛогирования) 
		ИЛИ (УровеньЛога = ЛК_ОбменДаннымиПовтИсп.УровниЛога().Ошибка И УровеньЛогирования = ЛК_ОбменДаннымиПовтИсп.УровниЛога().Дебаг) Тогда
		Возврат;
	КонецЕсли;
		
	Попытка
		Если ТипЗнч(Ключ) = Тип("Структура") Тогда
			Если Период = Неопределено Тогда
				Период = ТекущаяДатаСеанса();
			КонецЕсли;
			
			Ключ.Вставить("Период", Период);
			КлючJSON   = ЛК_РаботаСJSON.ЗаписатьJSON_АП(Ключ);
		Иначе
			КлючJSON = Ключ;
		КонецЕсли;
		
		Если ТипЗнч(Данные)= Тип("Структура") Тогда
			ДанныеJSON   = ЛК_РаботаСJSON.ЗаписатьJSON_АП(Данные);
		Иначе
			ДанныеJSON = Ключ;
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(	ИмяСобытия, 
									Уровень, 
									,
									КлючJSON, 
									ДанныеJSON);	
	Исключение
		ЗаписьЖурналаРегистрации(	ЛК_ОбменДаннымиПовтИсп.СобытияЛога().ОшибкаЛога, 
									ЛК_ОбменДаннымиПовтИсп.УровниСобытийЛога().Ошибка,
									,
									ИмяСобытия, 
									ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Функция УровниСобытийЛога() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Ошибка",         УровеньЖурналаРегистрации.Ошибка);
	Структура.Вставить("Информация",     УровеньЖурналаРегистрации.Информация);
	Структура.Вставить("Предупреждение", УровеньЖурналаРегистрации.Предупреждение);

	Возврат Структура;
	
КонецФункции

Функция СобытияЛогаЛК() Экспорт
	
	СписокСобытий = Новый Структура;
	СписокСобытий.Вставить("ОшибкаЛога",                      "ЛК.ЗаписьВЛог.Ошибка");
	СписокСобытий.Вставить("РегистрацияЗаданияОчередиОбмена", "ЛК.ОбработкаОчереди.Регистрация");
	СписокСобытий.Вставить("ОшибкаОбработкиОчередиОбмена",    "ЛК.ОбработкаОчереди.Ошибка");
	СписокСобытий.Вставить("Логин",                           "ЛК.Логин");
	СписокСобытий.Вставить("ОтправкаЗапроса",                 "ЛК.ОтправкаЗапроса.Отправка");
	СписокСобытий.Вставить("ОшибкаПриОтправкеЗапроса",        "ЛК.ОтправкаЗапроса.Ошибка");
	СписокСобытий.Вставить("ПолучениеОтвета",                 "ЛК.ПолучениеОтвета.Получение");
	СписокСобытий.Вставить("ОшибкаПриПолученииОтвета",        "ЛК.ПолучениеОтвета.Ошибка");
	СписокСобытий.Вставить("НачатПолныйОбмен",                "ЛК.НачатПолныйОбмен");
	СписокСобытий.Вставить("ЗавершенПолныйОбмен",             "ЛК.ЗавершенПолныйОбмен");
	СписокСобытий.Вставить("НачатаОбработкаЗадания",          "ЛК.НачатаОбработкаЗадания");
	СписокСобытий.Вставить("ЗавершенаОбработкаЗадания",       "ЛК.ЗавершенаОбработкаЗадания");
		
	Возврат СписокСобытий;
	
КонецФункции

Функция УровниЛога() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Дебаг",  "Debug");
	Структура.Вставить("Ошибка", "Error");

	Возврат Структура;
	
КонецФункции

Функция ТипыОбъектов() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("СпрС",          "СправочникСсылка");
	Структура.Вставить("РСНЗ",          "РегистрСведенийНаборЗаписей");
	Структура.Вставить("РННЗ",          "РегистрНакопленияНаборЗаписей");
	Структура.Вставить("Строка",        "Строка");
	Структура.Вставить("Токен",         "Токен");
	Структура.Вставить("РасчетныйЛист", "РасчетныйЛист");
	Структура.Вставить("ЗпГ",           "ЗапросGET");
	Структура.Вставить("ЗпП",           "ЗапросPOST");
	Структура.Вставить("ОЗ",            "ОтветНаЗапрос");

	Возврат Структура;
	
КонецФункции

Функция ОписаниеЗапроса(ИД, АдресСервера, HTTPЗапрос) Экспорт
	
	ОписаниеСервиса = СтрШаблон("{url: ""%1"", service: ""%2""}", 
								АдресСервера, 
								HTTPЗапрос.АдресРесурса);
								
	Заголовки =  HTTPЗапрос.Заголовки;
	ТелоСтрока = HTTPЗапрос.ПолучитьТелоКакСтроку();
	Если ТелоСтрока = Неопределено Тогда 
		ТелоСтрока = "";
	КонецЕсли;
	
	Структура = Новый Структура("id, dateTime, description, headers, body", 
								ИД, 
								ЛК_Логирование.ТекущаяДатаЛК(), 
								ОписаниеСервиса, 
								Заголовки, 
								ТелоСтрока);
	
	Возврат ЛК_РаботаСJSON.ЗаписатьJSON_АП(Структура);
	
КонецФункции

Функция ОписаниеОтвета(ИД, HTTPОтвет) Экспорт
	
	Заголовки =  HTTPОтвет.Заголовки;
	ТелоСтрока = HTTPОтвет.ПолучитьТелоКакСтроку();
	Если ТелоСтрока = Неопределено Тогда 
		ТелоСтрока = "";
	КонецЕсли;
	
	Структура = Новый Структура("id, dateTime, code, headers, body", 
								ИД, 
								ЛК_Логирование.ТекущаяДатаЛК(), 
								HTTPОтвет.КодСостояния, Заголовки, 
								ТелоСтрока);
	
	Возврат ЛК_РаботаСJSON.ЗаписатьJSON_АП(Структура);
	
КонецФункции

Функция ТекущаяДатаЛК() Экспорт
	
	Возврат Строка(ТекущаяДатаСеанса());
КонецФункции

Функция ДанныеJSONОбъектСтрока(УровеньЛога, dateTime, id = "", type, description, object, trace, errore = "") Экспорт
	
	УровеньЛогирования = ЛК_РаботаСФункциями.Результат(ЛК_ОбменДаннымиПовтИсп.НастройкиСервиса()).УровеньЛогирования;
	Если Не ЗначениеЗаполнено(УровеньЛогирования) 
		ИЛИ (УровеньЛога = ЛК_ОбменДаннымиПовтИсп.УровниЛога().Ошибка И УровеньЛогирования = ЛК_ОбменДаннымиПовтИсп.УровниЛога().Дебаг) Тогда
		Возврат "{}"
	КонецЕсли;	
	
	Возврат СтрШаблон("{dateTime: ""%1"", id: ""%2"", type: ""%3"", description = ""%4"", object: ""%5"", trace: ""%6"", errore: ""%7""}", 
						dateTime,
						id,
						type, 
						description,
						object, 
						trace, 
						errore);
		
КонецФункции
					
Функция ДанныеJSONОбъектJSON(УровеньЛога, dateTime, id = "", type, description, object, trace, errore = "") Экспорт
	
	УровеньЛогирования = ЛК_РаботаСФункциями.Результат(ЛК_ОбменДаннымиПовтИсп.НастройкиСервиса()).УровеньЛогирования;
	Если Не ЗначениеЗаполнено(УровеньЛогирования) 
		ИЛИ (УровеньЛога = ЛК_ОбменДаннымиПовтИсп.УровниЛога().Ошибка И УровеньЛогирования = ЛК_ОбменДаннымиПовтИсп.УровниЛога().Дебаг) Тогда
		Возврат "{}"
	КонецЕсли;
	
	Возврат СтрШаблон("{dateTime: ""%1"", id: ""%2"", type: ""%3"", description: ""%4"", object: %5, trace: ""%6"", errore: ""%7""}", 
						dateTime, 
						id,
						type, 
						description,
						object, 
						trace, 
						errore);
		
КонецФункции					

#КонецОбласти
