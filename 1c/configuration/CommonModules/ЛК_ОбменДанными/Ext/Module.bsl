#Область ПрограммныйИнтерфейс

Функция НастройкиСервиса() Экспорт 
	
	Возврат РегистрыСведений.ЛК_НастройкиСервисов.НастройкиСервиса();
	
КонецФункции	

Функция Логин(НастройкиСервиса) Экспорт
	
	РесурсНаСервере = "/api/auth/login";	
	Токен = "";
		
    СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, "");
	Если ЛК_РаботаСФункциями.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциями.Результат(СтруктураВозврата);
	
	ИД = Строка(Новый УникальныйИдентификатор());
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	
	ТелоЗапроса = СтрШаблон("{""email"": ""%1"", ""password"": ""%2"", ""id"": ""%3""}", 
							НастройкиСервиса.ЛогинПользователя, 
							НастройкиСервиса.ПарольПользователя, 
							ИД);
							
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
		
    СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.Логин.ОписаниеЗапроса",
										"token");
										

	Возврат СтруктураОтвета;
	
КонецФункции

Процедура ВыполнитьОбмен(СообщатьОбОшибках = Истина) Экспорт  
	
	НастройкиСервисаСтруктура = ЛК_ОбменДанными.НастройкиСервиса();
	Если ЛК_РаботаСФункциями.Ошибка(НастройкиСервисаСтруктура) Тогда
		Если СообщатьОбОшибках Тогда
			ЛК_РаботаСФункциями.СообщитьОбОшибках(НастройкиСервисаСтруктура);
		КонецЕсли;			
		Возврат;
	КонецЕсли;
	НастройкиСервиса = ЛК_РаботаСФункциями.Результат(НастройкиСервисаСтруктура);
	
	ТокенСтруктура = ЛК_ОбменДанными.Логин(НастройкиСервиса); 
	Если ЛК_РаботаСФункциями.Ошибка(ТокенСтруктура) Тогда
		Если СообщатьОбОшибках Тогда
			ЛК_РаботаСФункциями.СообщитьОбОшибках(ТокенСтруктура);
		КонецЕсли;	
		Возврат;
	КонецЕсли;
	Токен = ЛК_РаботаСФункциями.Результат(ТокенСтруктура);
	
	РезультатОбмена = ЛК_РаботаСФункциями.СтруктураВозврата();
	
	ЛК_Логирование.ДобавитьЗаписьВЛог(	ЛК_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
										ЛК_ОбменДаннымиПовтИсп.СобытияЛога().НачатПолныйОбмен, 
										ЛК_ОбменДаннымиПовтИсп.УровниСобытийЛога().Информация,
										ЛК_Логирование.ДанныеJSONОбъектСтрока(	ЛК_Логирование.ТекущаяДатаЛК(), 
																				"",
																				ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().Строка, 
																				""
																				"", 
																				"ЛК_ОбменДанными.ВыполнитьОбмен",));
	
	
	РезультатОбменСсылочнымиДанными = ВыполнитьОбменСсылочнымиДанными(НастройкиСервиса, Токен);
	ЛК_РаботаСФункциями.ОбъединитьОшибки(РезультатОбмена, РезультатОбменСсылочнымиДанными);
	
	РезультатОбменПроизвольнымиДанными = ВыполнитьОбменПроизвольнымиДанными(НастройкиСервиса, Токен);
	ЛК_РаботаСФункциями.ОбъединитьОшибки(РезультатОбмена, РезультатОбменПроизвольнымиДанными);
	
	Если СообщатьОбОшибках И ЛК_РаботаСФункциями.Ошибка(РезультатОбмена) Тогда
		ЛК_РаботаСФункциями.СообщитьОбОшибках(РезультатОбмена);
	КонецЕсли;	
	
	ЛК_Логирование.ДобавитьЗаписьВЛог(	ЛК_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
										ЛК_ОбменДаннымиПовтИсп.СобытияЛога().ЗавершенПолныйОбмен, 
										ЛК_ОбменДаннымиПовтИсп.УровниСобытийЛога().Информация,
										ЛК_Логирование.ДанныеJSONОбъектСтрока(	ЛК_Логирование.ТекущаяДатаЛК(),
																				,
																				ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().Строка, 
																				"", 
																				"",
																				"ЛК_ОбменДанными.ВыполнитьОбмен",));

	
КонецПроцедуры

Функция ВыполнитьОбменСсылочнымиДанными(НастройкиСервиса, Токен)
	
	СтруктураВозврата = ЛК_РаботаСФункциями.СтруктураВозврата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЛК_ОчередьОбменаСЛКСсылочнымиДанными.Объект КАК Объект,
	               |	ЛК_ОчередьОбменаСЛКСсылочнымиДанными.ВидСобытия КАК ВидСобытия
	               |ИЗ
	               |	РегистрСведений.ЛК_ОчередьОбменаСЛКСсылочнымиДанными КАК ЛК_ОчередьОбменаСЛКСсылочнымиДанными
	               |ГДЕ
	               |	ЛК_ОчередьОбменаСЛКСсылочнымиДанными.Статус <> ЗНАЧЕНИЕ(Перечисление.ЛК_СтатусОбменаСЛК.Выполнен)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВидСобытия,
	               |	Объект";   
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл	
			
		ИД = Строка(Новый УникальныйИдентификатор());
		ИмяМетаданных = Выборка.Объект.Метаданные().Имя;	
		Объект = СтрШаблон(	"{name: ""%1"", object: ""%2""}", 
							ИмяМетаданных, 
							Строка(Выборка.Объект.УникальныйИдентификатор()));
		
		ЛК_Логирование.ДобавитьЗаписьВЛог(	ЛК_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
											ЛК_ОбменДаннымиПовтИсп.СобытияЛога().НачатаОбработкаЗадания, 
											ЛК_ОбменДаннымиПовтИсп.УровниСобытийЛога().Информация,
											ЛК_Логирование.ДанныеJSONОбъектJSON(ЛК_Логирование.ТекущаяДатаЛК(),
																				ИД,
																				ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().СпрС,
																				ИмяМетаданных, 
																				Объект, 
																				"ЛК_ОбменДанными.ВыполнитьОбменСсылочнымиДанными"));
		
		
		Если ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.Организации") Тогда
			Если Выборка.ВидСобытия = Перечисления.ЛК_ВидыСобытийСОбъектамиЛК.Добавление Тогда
				Результат = ЛК_ОбменДанными.ДобавитьОрганизацию(НастройкиСервиса, Токен, ИД, Выборка.Объект);
			ИначеЕсли Выборка.ВидСобытия = Перечисления.ЛК_ВидыСобытийСОбъектамиЛК.Изменение Тогда
				Результат = ЛК_ОбменДанными.ОбновитьОрганизацию(НастройкиСервиса, Токен, ИД, Выборка.Объект);		
			КонецЕсли;			
		ИначеЕсли ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			Если Выборка.ВидСобытия = Перечисления.ЛК_ВидыСобытийСОбъектамиЛК.Добавление Тогда
				Результат = ЛК_ОбменДанными.ДобавитьПодразделение(НастройкиСервиса, Токен, ИД, Выборка.Объект);
			ИначеЕсли Выборка.ВидСобытия = Перечисления.ЛК_ВидыСобытийСОбъектамиЛК.Изменение Тогда
				Результат = ЛК_ОбменДанными.ОбновитьПодразделение(НастройкиСервиса, Токен, ИД, Выборка.Объект);		
			КонецЕсли;			
		ИначеЕсли ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.Должности") Тогда
			Если Выборка.ВидСобытия = Перечисления.ЛК_ВидыСобытийСОбъектамиЛК.Добавление Тогда
				Результат = ЛК_ОбменДанными.ДобавитьДолжность(НастройкиСервиса, Токен, ИД, Выборка.Объект);
			ИначеЕсли Выборка.ВидСобытия = Перечисления.ЛК_ВидыСобытийСОбъектамиЛК.Изменение Тогда
				Результат = ЛК_ОбменДанными.ОбновитьДолжность(НастройкиСервиса, Токен, ИД, Выборка.Объект);		
			КонецЕсли;			
		КонецЕсли;
		
		Если Результат <> Неопределено И Не ЛК_РаботаСФункциями.Ошибка(Результат) Тогда
			РегистрыСведений.ЛК_ОчередьОбменаСЛКСсылочнымиДанными.ЗарегистрироватьУспехОбработки(ИД, Выборка.Объект, Выборка.ВидСобытия);
		ИначеЕсли Результат <> Неопределено  Тогда
			РегистрыСведений.ЛК_ОчередьОбменаСЛКСсылочнымиДанными.ЗарегистрироватьОшибкуОбработки(ИД, Выборка.Объект, Выборка.ВидСобытия, 
																								  "ЛК_ОбменДанными.ВыполнитьОбменСсылочнымиДанными",
																								  ЛК_РаботаСФункциями.ОшибкиСтрокой(Результат));
			ЛК_РаботаСФункциями.ОбъединитьОшибки(СтруктураВозврата, Результат); 
		КонецЕсли;
		
		ЛК_Логирование.ДобавитьЗаписьВЛог(	ЛК_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
											ЛК_ОбменДаннымиПовтИсп.СобытияЛога().ЗавершенаОбработкаЗадания, 
											ЛК_ОбменДаннымиПовтИсп.УровниСобытийЛога().Информация,
											ЛК_Логирование.ДанныеJSONОбъектJSON(ЛК_Логирование.ТекущаяДатаЛК(),
																				ИД,
																				ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().СпрС, 
																				ИмяМетаданных,
																				Объект, 
																				"ЛК_ОбменДанными.ВыполнитьОбменСсылочнымиДанными"));

		
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции	

Функция ВыполнитьОбменПроизвольнымиДанными(НастройкиСервиса, Токен)
	
	СтруктураВозврата = ЛК_РаботаСФункциями.СтруктураВозврата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
					|	ЛК_ОчередьОбменаСЛКПроизвольнымиДанными.ТипОбъкта КАК ТипОбъкта,
					|	ЛК_ОчередьОбменаСЛКПроизвольнымиДанными.ИмяОбъекта КАК ИмяОбъекта,
					|	ЛК_ОчередьОбменаСЛКПроизвольнымиДанными.ВидСобытия КАК ВидСобытия,
					|	ЛК_ОчередьОбменаСЛКПроизвольнымиДанными.ХЭШ КАК ХЭШ,
					|	ЛК_ОчередьОбменаСЛКПроизвольнымиДанными.Данные КАК Данные,
					|	ЛК_ОчередьОбменаСЛКПроизвольнымиДанными.ДатаСобытия КАК ДатаСобытия
					|ИЗ
					|	РегистрСведений.ЛК_ОчередьОбменаСЛКПроизвольнымиДанными КАК ЛК_ОчередьОбменаСЛКПроизвольнымиДанными
					|ГДЕ
					|	ЛК_ОчередьОбменаСЛКПроизвольнымиДанными.Статус <> ЗНАЧЕНИЕ(Перечисление.ЛК_СтатусОбменаСЛК.Выполнен)
					|
					|УПОРЯДОЧИТЬ ПО
					|	ДатаСобытия,
					|	ИмяОбъекта,
					|	ВидСобытия,
					|	ТипОбъкта,
					|	ХЭШ";   
	                                   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИД = Строка(Новый УникальныйИдентификатор());
		
		ЛК_Логирование.ДобавитьЗаписьВЛог(	ЛК_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
											ЛК_ОбменДаннымиПовтИсп.СобытияЛога().НачатаОбработкаЗадания, 
											ЛК_ОбменДаннымиПовтИсп.УровниСобытийЛога().Информация,
											ЛК_Логирование.ДанныеJSONОбъектJSON(ЛК_Логирование.ТекущаяДатаЛК(),
																				ИД,
																				Выборка.ТипОбъкта,
																				Выборка.ИмяОбъекта, 
																				Выборка.Данные, 
																				"ЛК_ОбменДанными.ВыполнитьОбменПроизвольнымиДанными"));

		Если Выборка.ТипОбъкта = ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().РСНЗ Тогда
			Если Выборка.ИмяОбъекта = "ФотографииФизическихЛиц" Тогда
				ДанныеСтрутура = ЛК_РаботаСJSON.ПрочитатьJSON_АП(Выборка.Данные);
				СоответствиеФизЛиц = ЛК_РаботаСJSON.ЧтениеJSON(ДанныеСтрутура["Объект"]);
				Для Каждого Запись Из СоответствиеФизЛиц Цикл 	
					ФизическоеЛицоСсылка = Запись.Ключ;
					Результат = ЛК_ОбменДанными.ОбновитьФотоПользователя(НастройкиСервиса, Токен, ИД, ФизическоеЛицоСсылка); 
				КонецЦикла;
			ИначеЕсли Выборка.ИмяОбъекта = "КадроваяИсторияСотрудниковИнтервальный" Тогда
				Если Выборка.ВидСобытия = Перечисления.ЛК_ВидыСобытийСОбъектамиЛК.Удаление Тогда
					ДанныеСтрутура = ЛК_РаботаСJSON.ПрочитатьJSON_АП(Выборка.Данные);
					НаборЗаписнй = ЛК_РаботаСJSON.ЧтениеJSON(ДанныеСтрутура["Объект"]);
					
					СотрудникСсылка = НаборЗаписнй.Отбор.Сотрудник.Значение;
					Год = НаборЗаписнй.Отбор.Год.Значение; 
					ДатаНачала = НаборЗаписнй.Отбор.ДатаНачала.Значение;
					
					Результат = ЛК_ОбменДанными.УдалитьЗаписьКадровойИстории(НастройкиСервиса, Токен, ИД, СотрудникСсылка);
				ИначеЕсли Выборка.ВидСобытия = Перечисления.ЛК_ВидыСобытийСОбъектамиЛК.Добавление Тогда
					ДанныеСтрутура = ЛК_РаботаСJSON.ПрочитатьJSON_АП(Выборка.Данные);
					НаборЗаписнй = ЛК_РаботаСJSON.ЧтениеJSON(ДанныеСтрутура["Объект"]);
					
					Соответсвие = Новый Соответствие;
					Для Каждого Запись Из НаборЗаписнй Цикл 
						Соответсвие.Вставить(Запись.Сотрудник);
					КонецЦикла;
					
					Для Каждого Запись Из Соответсвие Цикл 
						Результат = ЛК_ОбменДанными.УдалитьЗаписьКадровойИстории(ИД, НастройкиСервиса, Токен, Запись.Ключ); 
						ЛК_РаботаСФункциями.ОбъединитьОшибки(СтруктураВозврата, Результат); 
					КонецЦикла;
					
					Если Не ЛК_РаботаСФункциями.Ошибка(СтруктураВозврата) Тогда
						Для Каждого Запись Из Соответсвие Цикл
							СотрудникСсылка = Запись.Ключ; 
							Запрос = Новый Запрос;
							Запрос.Текст = "ВЫБРАТЬ
							|	КадроваяИсторияСотрудниковИнтервальный.ФизическоеЛицо КАК ФизическоеЛицо,
							|	КадроваяИсторияСотрудниковИнтервальный.ДатаНачала КАК ДатаНачала,
							|	КадроваяИсторияСотрудниковИнтервальный.Подразделение КАК Подразделение,
							|	КадроваяИсторияСотрудниковИнтервальный.Должность КАК Должность,
							|	КадроваяИсторияСотрудниковИнтервальный.Сотрудник КАК Сотрудник
							|ИЗ
							|	РегистрСведений.КадроваяИсторияСотрудниковИнтервальный КАК КадроваяИсторияСотрудниковИнтервальный
							|ГДЕ
							|	КадроваяИсторияСотрудниковИнтервальный.Сотрудник = &Сотрудник";
							
							Запрос.УстановитьПараметр("Сотрудник",СотрудникСсылка);
							
							НастройкиСервиса = ЛК_РаботаСФункциями.Результат(ЛК_ОбменДанными.НастройкиСервиса());
							Токен = ЛК_РаботаСФункциями.Результат(ЛК_ОбменДанными.Логин(НастройкиСервиса));
							
							ВыборкаСотрудника = Запрос.Выполнить().Выбрать();
							
							Пока ВыборкаСотрудника.Следующий() Цикл
								Результат = ЛК_ОбменДанными.СоздатьЗаписьКадровойИстории(ИД, НастройкиСервиса, Токен, ВыборкаСотрудника.Сотрудник, 
																						 ВыборкаСотрудника.Подразделение, ВыборкаСотрудника.Должность, ВыборкаСотрудника.ДатаНачала);
								
								ЛК_РаботаСФункциями.ОбъединитьОшибки(СтруктураВозврата, Результат); 
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Выборка.ТипОбъкта = ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().РасчетныйЛист Тогда
			ДанныеСтрутура = ЛК_РаботаСJSON.ЧтениеJSON(Выборка.Данные);
			СотрудникСсылка = ДанныеСтрутура["Сотрудник"];
			Месяц = ДанныеСтрутура["Месяц"];
			ФизическоеЛицоСсылка = ДанныеСтрутура["ФизическоеЛицо"];
			ОрганизацияСсылка = ДанныеСтрутура["Организация"];
			
			Результат = ЛК_ОбменДанными.ДобавитьОбновитьРасчетныйЛист(НастройкиСервиса, Токен, ИД, Месяц, СотрудникСсылка, ФизическоеЛицоСсылка); 
		КонецЕсли;
		                                                                   
		Если Результат <> Неопределено И Не ЛК_РаботаСФункциями.Ошибка(Результат) Тогда
			РегистрыСведений.ЛК_ОчередьОбменаСЛКПроизвольнымиДанными.ЗарегистрироватьУспехОбработки(ИД, 
																									Выборка.ТипОбъкта, 
																									Выборка.ИмяОбъекта, 
																									Выборка.ВидСобытия, 
																									Выборка.ХЭШ, 
																									Выборка.Данные);
		ИначеЕсли Результат <> Неопределено  Тогда
			РегистрыСведений.ЛК_ОчередьОбменаСЛКПроизвольнымиДанными.ЗарегистрироватьОшибкуОбработки(ИД, 
																									Выборка.ТипОбъкта, 
																									Выборка.ИмяОбъекта, 
																									Выборка.ВидСобытия, 
																									Выборка.ХЭШ, 
																									Выборка.Данные, 
																									"ЛК_ОбменДанными.ВыполнитьОбменПроизвольнымиДанными",
																									ЛК_РаботаСФункциями.ОшибкиСтрокой(Результат));
			ЛК_РаботаСФункциями.ОбъединитьОшибки(СтруктураВозврата, Результат); 																						
		КонецЕсли;
		
		ЛК_Логирование.ДобавитьЗаписьВЛог(	ЛК_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
											ЛК_ОбменДаннымиПовтИсп.СобытияЛога().ЗавершенаОбработкаЗадания, 
											ЛК_ОбменДаннымиПовтИсп.УровниСобытийЛога().Информация,
											ЛК_Логирование.ДанныеJSONОбъектJSON(ЛК_Логирование.ТекущаяДатаЛК(),
																				ИД,
																				Выборка.ТипОбъкта,
																				Выборка.ИмяОбъекта, 
																				Выборка.Данные, 
																				"ЛК_ОбменДанными.ВыполнитьОбменПроизвольнымиДанными"));

	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции	

#Область НСИ

Функция ДобавитьОрганизацию(НастройкиСервиса, Токен, ИД, ОрганизацияСсылка) Экспорт
	
	Возврат ДобавитьОбновитьОрганизацию(НастройкиСервиса, Токен, ИД, ОрганизацияСсылка);
	
КонецФункции

Функция ОбновитьОрганизацию(НастройкиСервиса, Токен, ИД, ОрганизацияСсылка) Экспорт
	
	Возврат ДобавитьОбновитьОрганизацию(НастройкиСервиса, Токен, ИД, ОрганизацияСсылка);
	
КонецФункции

Функция ДобавитьПодразделение(НастройкиСервиса, Токен, ИД, ПодразделениеСсылка) Экспорт
	
	Возврат ДобавитьОбновитьПодразделение(НастройкиСервиса, Токен, ИД, ПодразделениеСсылка);
	
КонецФункции

Функция ОбновитьПодразделение(НастройкиСервиса, Токен, ИД, ПодразделениеСсылка) Экспорт
	
	Возврат ДобавитьОбновитьПодразделение(НастройкиСервиса, Токен, ИД, ПодразделениеСсылка);
	
КонецФункции

Функция ДобавитьДолжность(НастройкиСервиса, Токен, ИД, ДолжностьСсылка) Экспорт 
	
	РесурсНаСервере = "/api/common/employee-position"; 
	
	СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциями.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциями.Результат(СтруктураВозврата);

	НаименованиеДолжности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДолжностьСсылка, "Наименование");
	
	Структура = Новый Структура;
	Структура.Вставить("position_name", НаименованиеДолжности);
	Структура.Вставить("base_pk",    	НастройкиСервиса.ИДБазы);
	Структура.Вставить("pk",            ДолжностьСсылка);
	ТелоЗапроса = ЛК_РаботаСJSON.ЗаписатьJSON_АП(Структура);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ГЕТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ДобавитьОбновитьОрганизацию.ОписаниеЗапроса",
										"pk");
	
		
	
	Возврат СтруктураОтвета;	
	
КонецФункции	

Функция ОбновитьДолжность(НастройкиСервиса, Токен, ИД, ДолжностьСсылка) Экспорт 
	
	РесурсНаСервере = "/api/common/employee-position"; 
	
	СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциями.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциями.Результат(СтруктураВозврата);
		
	НаименованиеДолжности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДолжностьСсылка, "Наименование");
	
	Структура = Новый Структура;
	Структура.Вставить("position_name", НаименованиеДолжности);
	Структура.Вставить("base_pk",    	НастройкиСервиса.ИДБазы);
	Структура.Вставить("pk",            ДолжностьСсылка);
	ТелоЗапроса = ЛК_РаботаСJSON.ЗаписатьJSON_АП(Структура);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);		
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПУТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ДобавитьОбновитьОрганизацию.ОписаниеЗапроса",
										"pk");		
	
	Возврат СтруктураВозврата;	
	
КонецФункции

#КонецОбласти

#Область Пользователи

Функция СоздатьПользователя(НастройкиСервиса, Токен, ФизЛицоСсылка, ЛогинПользователя, ПарольПользователя) Экспорт 
	
	РесурсНаСервере = "/api/user"; 
	
    СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, "");
	Если ЛК_РаботаСФункциями.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциями.Результат(СтруктураВозврата);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
					|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
					|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество
					|ИЗ
					|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних КАК ФИОФизическихЛицСрезПоследних
					|ГДЕ
					|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо = &ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизЛицоСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Структура = Новый Структура;
	Структура.Вставить("user_name",     Выборка.Имя); 
	Структура.Вставить("base_pk",    	НастройкиСервиса.ИДБазы);
	Структура.Вставить("surname",       Выборка.Фамилия);
	Структура.Вставить("patronymic",    Выборка.Отчество);
	Структура.Вставить("id_1c",         ФизЛицоСсылка);
	Структура.Вставить("email",         ЛогинПользователя);
	Структура.Вставить("user_password", ПарольПользователя);
	ТелоЗапроса = ЛК_РаботаСJSON.ЗаписатьJSON_АП(Структура);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
		
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										"", 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.СоздатьПользователя.ОписаниеЗапроса",
										"pk");
										
	Если Не ЛК_РаботаСФункциями.Ошибка(СтруктураОтвета) Тогда									
		МенеджерЗаписи                = РегистрыСведений.ЛК_ПользователиЛК.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ФизическоеЛицо = ФизЛицоСсылка;
		МенеджерЗаписи.id             = ЛК_РаботаСФункциями.Результат(СтруктураОтвета);
		МенеджерЗаписи.Логин          = ЛогинПользователя;
		МенеджерЗаписи.Пароль         = ПарольПользователя;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	Возврат СтруктураОтвета;	
	
КонецФункции	

Функция ОбновитьПользователя(НастройкиСервиса, Токен, ФизЛицоСсылка, ЛогинПользователя, ПарольПользователя) Экспорт
	
	РесурсНаСервере = "/api/user"; 
	
    СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, "");
	Если ЛК_РаботаСФункциями.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциями.Результат(СтруктураВозврата);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество,
	|	ЛК_ПользователиЛК.id КАК id,
	|	ЛК_ПользователиЛК.Логин КАК Логин,
	|	ЛК_ПользователиЛК.Пароль КАК Пароль
	
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних КАК ФИОФизическихЛицСрезПоследних
	|  				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛК_ПользователиЛК КАК ЛК_ПользователиЛК
	|			ПО ФИОФизическихЛицСрезПоследних.ФизическоеЛицо = ЛК_ПользователиЛК.ФизическоеЛицо
	
	|ГДЕ
	|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо = &ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизЛицоСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Структура = Новый Структура;
	Структура.Вставить("user_name",     Выборка.Имя);
	Структура.Вставить("surname",       Выборка.Фамилия);
	Структура.Вставить("patronymic",    Выборка.Отчество);
	Структура.Вставить("id_1c",         ФизЛицоСсылка);
	Структура.Вставить("email",         Выборка.Логин);
	Структура.Вставить("user_password", Выборка.Пароль);
	Структура.Вставить("pk",            Выборка.id);
	Структура.Вставить("base_pk",    	НастройкиСервиса.ИДБазы);
	ТелоЗапроса = ЛК_РаботаСJSON.ЗаписатьJSON_АП(Структура);

	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
		
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										"", 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПУТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ДобавитьОбновитьОрганизацию.ОписаниеЗапроса",
										"pk");		
										
	Если Не ЛК_РаботаСФункциями.Ошибка(СтруктураОтвета) Тогда
		МенеджерЗаписи                = РегистрыСведений.ЛК_ПользователиЛК.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ФизическоеЛицо = ФизЛицоСсылка;
		МенеджерЗаписи.id             = ЛК_РаботаСФункциями.Результат(СтруктураВозврата);
		МенеджерЗаписи.Логин          = ЛогинПользователя;
		МенеджерЗаписи.Пароль         = ПарольПользователя;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	Возврат СтруктураОтвета;	
	
КонецФункции

Функция ОбновитьФотоПользователя(НастройкиСервиса, Токен, ИД, ФизЛицоСсылка) Экспорт 
	
	РесурсНаСервере = "/api/picture"; 
	
	СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциями.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциями.Результат(СтруктураВозврата);
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ 
					|	ФотографииФизическихЛиц.ФизическоеЛицо,
					|	ФотографииФизическихЛиц.Фотография
					|ИЗ
					|	РегистрСведений.ФотографииФизическихЛиц КАК ФотографииФизическихЛиц
					|ГДЕ
					|	ФотографииФизическихЛиц.ФизическоеЛицо = &ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизЛицоСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ФотоДвочныеДанные = Неопределено;
	
	Если Не РезультатЗапроса.Пустой() Тогда		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ФотоДвочныеДанные = Выборка.Фотография.Получить();
	КонецЕсли;
		
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);		
	
	Если ФотоДвочныеДанные <> Неопределено Тогда  
		Разделитель = "--------------------------469740299757949141411855";
		HTTPЗапрос.Заголовки.Вставить("Content-type", "multipart/form-data; boundary=" + Разделитель);
		
		СообщениеТекст_Ид1с 	= СоздатьСообщение_Текст("""userId1c""", Строка(ФизЛицоСсылка.УникальныйИдентификатор()));
		СообщениеТекст_ИдБазы1с = СоздатьСообщение_Текст("""base_pk""", "" + НастройкиСервиса.ИДБазы);
		СообщениеКартинка 		= СоздатьСообщение_Изображение("""image""", """" + Строка(ФизЛицоСсылка.УникальныйИдентификатор()) + ".png""", ФотоДвочныеДанные);
		
		Тело = Новый ПотокВПамяти();
		ЗаписьДанных = Новый ЗаписьДанных(Тело);               
		ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
		ЗаписьДанных.Записать(СообщениеТекст_Ид1с);
		ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
		ЗаписьДанных.Записать(СообщениеТекст_ИдБазы1с);		
		ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
		ЗаписьДанных.Записать(СообщениеКартинка);
		ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
		ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель + "--");
		ЗаписьДанных.Закрыть();
		ДанныеТела = Тело.ЗакрытьИПолучитьДвоичныеДанные();
		HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ДанныеТела);
		
	Иначе 
		Структура = Новый Структура;
		Структура.Вставить("userId1c", ФизЛицоСсылка);
		Структура.Вставить("base_pk",  НастройкиСервиса.ИДБазы);
		ТелоЗапроса = ЛК_РаботаСJSON.ЗаписатьJSON_АП(Структура);
		
		HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);			
	КонецЕсли;	 
		
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ДобавитьОбновитьОрганизацию.ОписаниеЗапроса",
										"");
	
	Возврат СтруктураОтвета;	
	
КонецФункции

#КонецОбласти

#Область Сотрудники

Функция СоздатьСотрудника(НастройкиСервиса, Токен, ИД, СотрудникСсылка) Экспорт 
	
	РесурсНаСервере = "/api/employee"; 

    СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциями.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциями.Результат(СтруктураВозврата);
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество,
	|	ЛК_ПользователиЛК.id КАК id,
	|	ЛК_ПользователиЛК.Логин КАК Логин,
	|	ЛК_ПользователиЛК.Пароль КАК Пароль,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних КАК ФИОФизическихЛицСрезПоследних
	|			ПО Сотрудники.ФизическоеЛицо = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо
	|  		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛК_ПользователиЛК КАК ЛК_ПользователиЛК
	|			ПО ФИОФизическихЛицСрезПоследних.ФизическоеЛицо = ЛК_ПользователиЛК.ФизическоеЛицо		
	|ГДЕ
	|	Сотрудники.Ссылка = &СотрудникСсылка";
	
	
	Запрос.УстановитьПараметр("СотрудникСсылка", СотрудникСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Структура = Новый Структура;
	Структура.Вставить("pk",         Строка(СотрудникСсылка.УникальныйИдентификатор()));
	Структура.Вставить("user_id_1c", Строка(Выборка.ФизическоеЛицо.УникальныйИдентификатор()));
	Структура.Вставить("base_pk",    НастройкиСервиса.ИДБазы);
	ТелоЗапроса = ЛК_РаботаСJSON.ЗаписатьJSON_АП(Структура);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ДобавитьОбновитьОрганизацию.ОписаниеЗапроса",
										"pk");
										
	Возврат СтруктураОтвета;	
	
КонецФункции	

#КонецОбласти

#Область КадроваяИстория

Функция СоздатьЗаписьКадровойИстории(ИД, НастройкиСервиса, Токен, СотрудникСсылка, ПодразделениеСсылка, ДолжностьСсылка, ДатаНачала) Экспорт 
	
	РесурсНаСервере = "/api/employee/workplace"; 

    СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциями.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциями.Результат(СтруктураВозврата);
		
	Структура = Новый Структура;
	Структура.Вставить("position_pk",    ДолжностьСсылка);
	Структура.Вставить("subdivision_pk", ПодразделениеСсылка);
	Структура.Вставить("employee_pk",    СотрудникСсылка);
	Структура.Вставить("date_from",      ДатаНачала);
	Структура.Вставить("base_pk",        НастройкиСервиса.ИДБазы);
	ТелоЗапроса = ЛК_РаботаСJSON.ЗаписатьJSON_АП(Структура);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);		
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
		
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ДобавитьОбновитьОрганизацию.ОписаниеЗапроса",
										"pk");	
	
	Возврат СтруктураОтвета;	
	
КонецФункции	

Функция УдалитьЗаписьКадровойИстории(ИД, НастройкиСервиса, Токен, СотрудникСсылка) Экспорт 
	
	РесурсНаСервере = "/api/employee/workplace"; 
	
	СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциями.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциями.Результат(СтруктураВозврата);
		
	Структура = Новый Структура;
	Структура.Вставить("employee_pk",    СотрудникСсылка);
	Структура.Вставить("base_pk",        НастройкиСервиса.ИДБазы);
	ТелоЗапроса = ЛК_РаботаСJSON.ЗаписатьJSON_АП(Структура);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
		
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ДЕЛ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ДобавитьОбновитьОрганизацию.ОписаниеЗапроса",
										"pk");
										
	Возврат СтруктураВозврата;	
	
КонецФункции	

#КонецОбласти

Функция ДобавитьОбновитьРасчетныйЛист(НастройкиСервиса, Токен, ИД, МесяцРасчетногоЛистка, Сотрудник, ФизическоеЛицо) Экспорт 
	
	РесурсНаСервере = "/api/employee/payment-list"; 

    СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциями.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциями.Результат(СтруктураВозврата);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачалоПериода = НачалоМесяца(МесяцРасчетногоЛистка);
	ОкончаниеПериода = КонецМесяца(МесяцРасчетногоЛистка);
	ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.НачалоПериода       = НачалоПериода;
	ПараметрыПолученияСотрудников.ОкончаниеПериода    = ОкончаниеПериода;
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = ФизическиеЛица;
	ПараметрыПолученияСотрудников.КадровыеДанные      = "Организация";
	
	ДанныеФизическихЛиц = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
	
	Если ДанныеФизическихЛиц.Количество() = 0 Тогда 
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, "Не найдены кадровые данные сотрудника");
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	КадровыеДанные = ДанныеФизическихЛиц[0];
	
	ДанныеРасчетногоЛистка = Отчеты.АнализНачисленийИУдержаний.ДанныеРасчетныхЛистков(ФизическиеЛица, КадровыеДанные.Организация, ОкончаниеПериода, ОкончаниеПериода, Неопределено);
	
	УстановитьПривилегированныйРежим(Ложь);
	МассивСтрок = Новый Массив;
	
	Если ДанныеРасчетногоЛистка.ДанныеРасчетныхЛистков <> Неопределено Тогда
		ТЗ = ДанныеРасчетногоЛистка.ДанныеРасчетныхЛистков.ДанныеРасчетныхЛистков;
		ТЗ.Свернуть("ВидРасчета, Группа", "Сумма");
		Для Каждого СтрокаТЗ Из ТЗ Цикл
			Структура = Новый Структура;
			Структура.Вставить("payment_position", Строка(СтрокаТЗ.ВидРасчета));
			Структура.Вставить("payment_sum",      СтрокаТЗ.Сумма);
			Структура.Вставить("payment_group",    Строка(СтрокаТЗ.Группа));
			Структура.Вставить("payment_group_id", Перечисления.ГруппыНачисленияУдержанияВыплаты.Индекс(СтрокаТЗ.Группа));
			МассивСтрок.Добавить(Структура);
		КонецЦикла; 
	КонецЕсли;
		
	Структура = Новый Структура;
	Структура.Вставить("employee_pk",   Сотрудник);
	Структура.Вставить("base_pk",    	НастройкиСервиса.ИДБазы);
	Структура.Вставить("payment_month", УниверсальноеВремя(МесяцРасчетногоЛистка));
	Структура.Вставить("payments", МассивСтрок);		
	ТелоЗапроса = ЛК_РаботаСJSON.ЗаписатьJSON_АП(Структура);
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ДобавитьОбновитьОрганизацию.ОписаниеЗапроса",
										"pk");	
	Возврат СтруктураОтвета;	
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоздатьСоединение(НастройкиСервиса, ИД)
	
	СтруктураВозврата = ЛК_РаботаСФункциями.СтруктураВозврата();
	
	Попытка
		Соединение = Новый HTTPСоединение(НастройкиСервиса.АдресСервера, , , , );
		ЛК_РаботаСФункциями.ДобавитьРезультат(СтруктураВозврата, Соединение);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки);
		
		Объект = НастройкиСервиса.АдресСервера;
		ЛК_Логирование.ДобавитьЗаписьВЛог(	ЛК_ОбменДаннымиПовтИсп.УровниЛога().Ошибка,
											ЛК_ОбменДаннымиПовтИсп.СобытияЛога().Логин, 
											ЛК_ОбменДаннымиПовтИсп.УровниСобытийЛога().Ошибка,
											ЛК_Логирование.ДанныеJSONОбъектСтрока(ЛК_Логирование.ТекущаяДатаЛК(),
																				ИД,
																				ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().Токен,
																				"",
																				Объект, 
																				"ЛК_ОбменДанными.СоздатьСоединение", 
																				ОписаниеОшибки()));
	КонецПопытки;

	Возврат СтруктураВозврата;
	
КонецФункции

Функция ОтправитьЗапрос(РесурсНаСервере, Соединение,  ИД, Метод, HTTPЗапрос, Трасса, ПолеОтвета)
	
	СтруктураВозврата = ЛК_РаботаСФункциями.СтруктураВозврата();
	Попытка	
		ОписаниеЗапроса = ЛК_Логирование.ОписаниеЗапроса(ИД, РесурсНаСервере, HTTPЗапрос);
		ЛК_Логирование.ДобавитьЗаписьВЛог(  ЛК_ОбменДаннымиПовтИсп.УровниЛога().Дебаг,
											ЛК_ОбменДаннымиПовтИсп.СобытияЛога().ОтправкаЗапроса, 
											ЛК_ОбменДаннымиПовтИсп.УровниСобытийЛога().Информация, 
											ЛК_Логирование.ДанныеJSONОбъектJSON(ЛК_Логирование.ТекущаяДатаЛК(),
																				ИД,
																				ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().ЗпП,
																				"Запрос",
																				ОписаниеЗапроса, 
																				Трасса));					 
		
		HTTPОтвет  = Соединение.ВызватьHTTPМетод(Метод, HTTPЗапрос);
		
		ОписаниеОтвета = ЛК_Логирование.ОписаниеОтвета(ИД, HTTPОтвет);
		ЛК_Логирование.ДобавитьЗаписьВЛог(	ЛК_ОбменДаннымиПовтИсп.УровниЛога().Дебаг,
											ЛК_ОбменДаннымиПовтИсп.СобытияЛога().ПолучениеОтвета, 
											ЛК_ОбменДаннымиПовтИсп.УровниСобытийЛога().Информация,
											ЛК_Логирование.ДанныеJSONОбъектJSON(ЛК_Логирование.ТекущаяДатаЛК(),
																				ИД,
																				ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().ЗпП, 
																				"Ответ",
																				ОписаниеОтвета, 
																				Трасса));
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки);
		
		ЛК_Логирование.ДобавитьЗаписьВЛог(	ЛК_ОбменДаннымиПовтИсп.УровниЛога().Ошибка,
											ЛК_ОбменДаннымиПовтИсп.СобытияЛога().ОшибкаПриОтправкеЗапроса, 
											ЛК_ОбменДаннымиПовтИсп.УровниСобытийЛога().Ошибка,			
											ЛК_Логирование.ДанныеJSONОбъектJSON(ЛК_Логирование.ТекущаяДатаЛК(),
																				ИД,
																				ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().Токен, 
																				"Запрос",
																				ОписаниеЗапроса, 
																				Трасса,
																				ОписаниеОшибки));
		Возврат СтруктураВозврата;
	КонецПопытки;

	СтруктураОтвета = РазобратьОтвет(   HTTPОтвет, ОписаниеОтвета, ИД, 
											ПолеОтвета, "ЛК_ОбменДанными.Логин", "Ошибка разбора ответа");
	Возврат СтруктураОтвета;

КонецФункции

Функция РазобратьОтвет(HTTPОтвет, ОписаниеОтвета, ИД, КлючОтвета, Трасса, СообщениеОбОшибке)
	
	СтруктураВозврата = ЛК_РаботаСФункциями.СтруктураВозврата();
	
	Если HTTPОтвет.КодСостояния > 299 Тогда
		ЛК_Логирование.ДобавитьЗаписьВЛог(	ЛК_ОбменДаннымиПовтИсп.УровниЛога().Ошибка,
											ЛК_ОбменДаннымиПовтИсп.СобытияЛога().ОшибкаПриПолученииОтвета, 
											ЛК_ОбменДаннымиПовтИсп.УровниСобытийЛога().Ошибка,
											ЛК_Логирование.ДанныеJSONОбъектJSON(ЛК_Логирование.ТекущаяДатаЛК(),
																				ИД,
																				ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().ОЗ, 
																				"Ответ",
																				ОписаниеОтвета, 
																				Трасса));
		Сообщение = СтрШаблон("Код состояния: %1. %2.", HTTPОтвет.КодСостояния, 
														"Действие не выполнено");
																		
		ContentType = HTTPОтвет.Заголовки.Получить("Content-Type");																		
		Если ContentType = "application/json; charset=utf-8" Тогда
			ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
			ТелоОтветаСоответствие = ЛК_РаботаСJSON.ПрочитатьJSON_АП(ТелоОтвета);
			Message = ТелоОтветаСоответствие.Получить("message");
			Если Message <> Неопределено  Тогда
				Сообщение = СтрШаблон("Код состояния: %1. %2.", HTTPОтвет.КодСостояния, 
																Message);
			КонецЕсли;
		КонецЕсли;																		
		
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, Сообщение);
		Возврат СтруктураВозврата;
	КонецЕсли;

	Если КлючОтвета <> "" Тогда 	
		Результат = HTTPОтвет.ПолучитьТелоКакСтроку();
		РезультатОбъект = ЛК_РаботаСJSON.ПрочитатьJSON_АП(Результат);
		
		Если РезультатОбъект.Получить(КлючОтвета) <> Неопределено Тогда
			ЛК_РаботаСФункциями.ДобавитьРезультат(СтруктураВозврата, РезультатОбъект[КлючОтвета]);
		Иначе
			ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, СообщениеОбОшибке);	
			
			ЛК_Логирование.ДобавитьЗаписьВЛог(	ЛК_ОбменДаннымиПовтИсп.УровниЛога().Ошибка,
												ЛК_ОбменДаннымиПовтИсп.СобытияЛога().ОшибкаПриПолученииОтвета, 
												ЛК_ОбменДаннымиПовтИсп.УровниСобытийЛога().Ошибка,				
												ЛК_Логирование.ДанныеJSONОбъектJSON(ЛК_Логирование.ТекущаяДатаЛК(),
																					ИД,
																					ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().ОЗ,
																					"Ответ",
																					ОписаниеОтвета, 
																					Трасса),
																					СообщениеОбОшибке);
		КонецЕсли;
	КонецЕсли;																		

	Возврат СтруктураВозврата;
	
КонецФункции

Функция ДобавитьОбновитьОрганизацию(НастройкиСервиса, Токен, ИД, ОрганизацияСсылка) 
	
	РесурсНаСервере = "/api/common/organisation";
	
	НаименованиеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОрганизацияСсылка, "НаименованиеСокращенное");
	
    СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциями.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциями.Результат(СтруктураВозврата);
	
	Структура = Новый Структура;
	Структура.Вставить("organization_name", НаименованиеОрганизации);
	Структура.Вставить("pk",                ОрганизацияСсылка);
	Структура.Вставить("base_pk",           НастройкиСервиса.ИДБазы);
	Структура.Вставить("id",           		ИД);
	ТелоЗапроса = ЛК_РаботаСJSON.ЗаписатьJSON_АП(Структура);

	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ДобавитьОбновитьОрганизацию.ОписаниеЗапроса",
										"pk");
										
	Возврат СтруктураОтвета;		
	
КонецФункции	

Функция ДобавитьОбновитьПодразделение(НастройкиСервиса, Токен, ИД, ПодразделениеСсылка) 
	
	РесурсНаСервере = "/api/common/subdivision";
		
  	СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциями.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциями.Результат(СтруктураВозврата);
	
	РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПодразделениеСсылка, "Наименование, Родитель, Владелец");
	
	Структура = Новый Структура;
	Структура.Вставить("subdivision_name",  РеквизитыПодразделения.Наименование);
	Структура.Вставить("pk",                ПодразделениеСсылка);
	Структура.Вставить("parent_pk",         РеквизитыПодразделения.Родитель);
	Структура.Вставить("organization_pk",   РеквизитыПодразделения.Владелец);
	Структура.Вставить("base_pk",           НастройкиСервиса.ИДБазы);
	ТелоЗапроса = ЛК_РаботаСJSON.ЗаписатьJSON_АП(Структура);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);	
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ДобавитьОбновитьПодразделение.ОписаниеЗапроса",
										"pk");
		
	Возврат СтруктураОтвета;;		
	
КонецФункции

// Возвращается HTTP-сообщение в виде ДвоичныеДанные
Функция СоздатьСообщение_Текст(ИмяСообщения, Текст)
	Поток = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Поток);
	// Заголовки
	ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=" + ИмяСообщения);
	ЗаписьДанных.ЗаписатьСтроку("");
	// Тело
	ЗаписьДанных.ЗаписатьСтроку(Текст);
	ЗаписьДанных.Закрыть();
	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
КонецФункции

// Возвращается HTTP-сообщение в виде ДвоичныеДанные
Функция СоздатьСообщение_Изображение(ИмяСообщения, ИмяФайла, КартинкаДвоичныеДанные)       
	Поток = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Поток);
	// Заголовки
	ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=" + ИмяСообщения + "; filename=" + имяФайла);
	ЗаписьДанных.ЗаписатьСтроку("Content-type: image/png");
	ЗаписьДанных.ЗаписатьСтроку("");
	// Тело
	ЗаписьДанных.Записать(КартинкаДвоичныеДанные);
	ЗаписьДанных.Закрыть();
	
	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
КонецФункции

#КонецОбласти