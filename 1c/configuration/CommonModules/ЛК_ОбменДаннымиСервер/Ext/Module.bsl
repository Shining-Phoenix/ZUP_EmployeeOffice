#Область ПрограммныйИнтерфейс

Функция Логин(НастройкиСервиса) Экспорт
	
	РесурсНаСервере = "/api/auth/login";	
	Токен = "";
		
    СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, "");
	Если ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
	
	ИД = Строка(Новый УникальныйИдентификатор());
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	
	ТелоЗапроса = СтрШаблон("{""email"": ""%1"", ""password"": ""%2"", ""id"": ""%3""}", 
							НастройкиСервиса.ЛогинПользователя, 
							НастройкиСервиса.ПарольПользователя, 
							ИД);
							
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
		
    СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.Логин.ОписаниеЗапроса",
										"token");
										

	Возврат СтруктураОтвета;
	
КонецФункции

Процедура ВыполнитьОбмен(СообщатьОбОшибках = Истина) Экспорт  
	
	НастройкиСервисаСтруктура = ЛК_ОбменДаннымиПовтИсп.НастройкиСервиса();
	Если ЛК_РаботаСФункциямиКлиентСервер.Ошибка(НастройкиСервисаСтруктура) Тогда
		Если СообщатьОбОшибках Тогда
			ЛК_РаботаСФункциямиКлиентСервер.СообщитьОбОшибках(НастройкиСервисаСтруктура);
		КонецЕсли;			
		Возврат;
	КонецЕсли;
	НастройкиСервиса = ЛК_РаботаСФункциямиКлиентСервер.Результат(НастройкиСервисаСтруктура);
	
	ТокенСтруктура = ЛК_ОбменДаннымиСервер.Логин(НастройкиСервиса); 
	Если ЛК_РаботаСФункциямиКлиентСервер.Ошибка(ТокенСтруктура) Тогда
		Если СообщатьОбОшибках Тогда
			ЛК_РаботаСФункциямиКлиентСервер.СообщитьОбОшибках(ТокенСтруктура);
		КонецЕсли;	
		Возврат;
	КонецЕсли;
	Токен = ЛК_РаботаСФункциямиКлиентСервер.Результат(ТокенСтруктура);
	
	РезультатОбмена = ЛК_РаботаСФункциямиКлиентСервер.СтруктураВозврата();
	
	ЛК_ЛогированиеСервер.ДобавитьЗаписьВЛог(	ЛК_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
										ЛК_ОбменДаннымиПовтИсп.СобытияЛога().НачатПолныйОбмен, 
										ЛК_ОбменДаннымиПовтИсп.УровниСобытийЛога().Информация,
										ЛК_ЛогированиеСервер.ДанныеJSONОбъектСтрока(	ЛК_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
																				ЛК_ЛогированиеСервер.ТекущаяДатаЛК(), 
																				"",
																				ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().Строка, 
																				""
																				"", 
																				"ЛК_ОбменДанными.ВыполнитьОбмен",));
	
	
	РезультатОбменСсылочнымиДанными = ВыполнитьОбменСсылочнымиДанными(НастройкиСервиса, Токен);
	ЛК_РаботаСФункциямиКлиентСервер.ОбъединитьОшибки(РезультатОбмена, РезультатОбменСсылочнымиДанными);
	
	РезультатОбменПроизвольнымиДанными = ВыполнитьОбменПроизвольнымиДанными(НастройкиСервиса, Токен);
	ЛК_РаботаСФункциямиКлиентСервер.ОбъединитьОшибки(РезультатОбмена, РезультатОбменПроизвольнымиДанными);
	
	РезультатПолученияДанных = ВыполнитьПолучениеДанных(НастройкиСервиса, Токен);
	ЛК_РаботаСФункциямиКлиентСервер.ОбъединитьОшибки(РезультатОбмена, РезультатПолученияДанных);
	
	Если СообщатьОбОшибках И ЛК_РаботаСФункциямиКлиентСервер.Ошибка(РезультатОбмена) Тогда
		ЛК_РаботаСФункциямиКлиентСервер.СообщитьОбОшибках(РезультатОбмена);
	ИначеЕсли СообщатьОбОшибках Тогда
		
		Сообщение = Новый  СообщениеПользователю;
		Сообщение.Текст = "Обмен выполнен";
		Сообщение.Сообщить();
		
	КонецЕсли;	
	
	ЛК_ЛогированиеСервер.ДобавитьЗаписьВЛог(	ЛК_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
										ЛК_ОбменДаннымиПовтИсп.СобытияЛога().ЗавершенПолныйОбмен, 
										ЛК_ОбменДаннымиПовтИсп.УровниСобытийЛога().Информация,
										ЛК_ЛогированиеСервер.ДанныеJSONОбъектСтрока(	ЛК_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
																				ЛК_ЛогированиеСервер.ТекущаяДатаЛК(),
																				,
																				ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().Строка, 
																				"", 
																				"",
																				"ЛК_ОбменДанными.ВыполнитьОбмен",));

	
КонецПроцедуры

Функция ВыполнитьОбменСсылочнымиДанными(НастройкиСервиса, Токен)
	
	СтруктураВозврата = ЛК_РаботаСФункциямиКлиентСервер.СтруктураВозврата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЛК_ОчередьОбменаСЛКСсылочнымиДанными.Объект КАК Объект,
	               |	ЛК_ОчередьОбменаСЛКСсылочнымиДанными.ВидСобытия КАК ВидСобытия
	               |ИЗ
	               |	РегистрСведений.ЛК_ОчередьОбменаСЛКСсылочнымиДанными КАК ЛК_ОчередьОбменаСЛКСсылочнымиДанными
	               |ГДЕ
	               |	ЛК_ОчередьОбменаСЛКСсылочнымиДанными.Статус <> ЗНАЧЕНИЕ(Перечисление.ЛК_СтатусОбменаСЛК.Выполнен)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВидСобытия,
	               |	Объект";   
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл	
			
		ИД = Строка(Новый УникальныйИдентификатор());
		ИмяМетаданных = Выборка.Объект.Метаданные().Имя;	
		Объект = СтрШаблон(	"{name: ""%1"", object: ""%2""}", 
							ИмяМетаданных, 
							Строка(Выборка.Объект.УникальныйИдентификатор()));
		
		ЛК_ЛогированиеСервер.ДобавитьЗаписьВЛог(	ЛК_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
											ЛК_ОбменДаннымиПовтИсп.СобытияЛога().НачатаОбработкаЗадания, 
											ЛК_ОбменДаннымиПовтИсп.УровниСобытийЛога().Информация,
											ЛК_ЛогированиеСервер.ДанныеJSONОбъектJSON(ЛК_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
																				ЛК_ЛогированиеСервер.ТекущаяДатаЛК(),
																				ИД,
																				ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().СпрС,
																				ИмяМетаданных, 
																				Объект, 
																				"ЛК_ОбменДанными.ВыполнитьОбменСсылочнымиДанными"));
		
		
		Если ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.Организации") Тогда
			
			Если Выборка.ВидСобытия = Перечисления.ЛК_ВидыСобытийСОбъектамиЛК.Добавление Тогда
				Результат = ЛК_ОбменДаннымиСервер.ДобавитьОрганизацию(НастройкиСервиса, Токен, ИД, Выборка.Объект);
			ИначеЕсли Выборка.ВидСобытия = Перечисления.ЛК_ВидыСобытийСОбъектамиЛК.Изменение Тогда
				Результат = ЛК_ОбменДаннымиСервер.ОбновитьОрганизацию(НастройкиСервиса, Токен, ИД, Выборка.Объект);		
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			
			Если Выборка.ВидСобытия = Перечисления.ЛК_ВидыСобытийСОбъектамиЛК.Добавление Тогда
				Результат = ЛК_ОбменДаннымиСервер.ДобавитьПодразделение(НастройкиСервиса, Токен, ИД, Выборка.Объект);
			ИначеЕсли Выборка.ВидСобытия = Перечисления.ЛК_ВидыСобытийСОбъектамиЛК.Изменение Тогда
				Результат = ЛК_ОбменДаннымиСервер.ОбновитьПодразделение(НастройкиСервиса, Токен, ИД, Выборка.Объект);		
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.Должности") Тогда
			
			Если Выборка.ВидСобытия = Перечисления.ЛК_ВидыСобытийСОбъектамиЛК.Добавление Тогда
				Результат = ЛК_ОбменДаннымиСервер.ДобавитьДолжность(НастройкиСервиса, Токен, ИД, Выборка.Объект);
			ИначеЕсли Выборка.ВидСобытия = Перечисления.ЛК_ВидыСобытийСОбъектамиЛК.Изменение Тогда
				Результат = ЛК_ОбменДаннымиСервер.ОбновитьДолжность(НастройкиСервиса, Токен, ИД, Выборка.Объект);		
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.ЛК_ТипыСправок") Тогда
			
			Если Выборка.ВидСобытия = Перечисления.ЛК_ВидыСобытийСОбъектамиЛК.Добавление Тогда
				Результат = ЛК_ОбменДаннымиСервер.ДобавитьТипСправки(НастройкиСервиса, Токен, ИД, Выборка.Объект);		
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Выборка.Объект) = Тип("ДокументСсылка.ЛК_ЗаявкиНаСправки") Тогда
			
			Если Выборка.ВидСобытия = Перечисления.ЛК_ВидыСобытийСОбъектамиЛК.Изменение Тогда
				Результат = ЛК_ОбменДаннымиСервер.ОбновитьЗаявкуНаСправкуНаБеке(НастройкиСервиса, Токен, ИД, Выборка.Объект);		
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.ВидыИспользованияРабочегоВремени") Тогда
			
			Если Выборка.ВидСобытия = Перечисления.ЛК_ВидыСобытийСОбъектамиЛК.Добавление Тогда
				Результат = ЛК_ОбменДаннымиСервер.ДобавитьВидИспользованияРабочегоВремени(НастройкиСервиса, Токен, ИД, Выборка.Объект);
			ИначеЕсли Выборка.ВидСобытия = Перечисления.ЛК_ВидыСобытийСОбъектамиЛК.Изменение Тогда
				Результат = ЛК_ОбменДаннымиСервер.ОбновитьВидИспользованияРабочегоВремени(НастройкиСервиса, Токен, ИД, Выборка.Объект);		
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.ГрафикиРаботыСотрудников") Тогда
			
			Если Выборка.ВидСобытия = Перечисления.ЛК_ВидыСобытийСОбъектамиЛК.Добавление Тогда
				Результат = ЛК_ОбменДаннымиСервер.ДобавитьГрафикРаботы(НастройкиСервиса, Токен, ИД, Выборка.Объект);
			ИначеЕсли Выборка.ВидСобытия = Перечисления.ЛК_ВидыСобытийСОбъектамиЛК.Изменение Тогда
				Результат = ЛК_ОбменДаннымиСервер.ОбновитьГрафикРаботы(НастройкиСервиса, Токен, ИД, Выборка.Объект);		
			КонецЕсли;  
			
		ИначеЕсли ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.Сотрудники") Тогда
			
			Если Выборка.ВидСобытия = Перечисления.ЛК_ВидыСобытийСОбъектамиЛК.Добавление Тогда
				Результат = ЛК_ОбменДаннымиСервер.СоздатьСотрудника(НастройкиСервиса, Токен, ИД, Выборка.Объект);
			ИначеЕсли Выборка.ВидСобытия = Перечисления.ЛК_ВидыСобытийСОбъектамиЛК.Изменение Тогда
				Результат = ЛК_ОбменДаннымиСервер.ОбновитьСотрудника(НастройкиСервиса, Токен, ИД, Выборка.Объект);		
			КонецЕсли; 	
			
		КонецЕсли;
		
		Если Результат <> Неопределено И Не ЛК_РаботаСФункциямиКлиентСервер.Ошибка(Результат) Тогда
			РегистрыСведений.ЛК_ОчередьОбменаСЛКСсылочнымиДанными.ЗарегистрироватьУспехОбработки(ИД, Выборка.Объект, Выборка.ВидСобытия);
		ИначеЕсли Результат <> Неопределено  Тогда
			
			РегистрыСведений.ЛК_ОчередьОбменаСЛКСсылочнымиДанными.ЗарегистрироватьОшибкуОбработки(ИД, Выборка.Объект, Выборка.ВидСобытия, 
																								  "ЛК_ОбменДанными.ВыполнитьОбменСсылочнымиДанными",
																								  ЛК_РаботаСФункциямиКлиентСервер.ОшибкиСтрокой(Результат));
			ЛК_РаботаСФункциямиКлиентСервер.ОбъединитьОшибки(СтруктураВозврата, Результат); 
			
		КонецЕсли;
		
		ЛК_ЛогированиеСервер.ДобавитьЗаписьВЛог(	ЛК_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
											ЛК_ОбменДаннымиПовтИсп.СобытияЛога().ЗавершенаОбработкаЗадания, 
											ЛК_ОбменДаннымиПовтИсп.УровниСобытийЛога().Информация,
											ЛК_ЛогированиеСервер.ДанныеJSONОбъектJSON(ЛК_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
																				ЛК_ЛогированиеСервер.ТекущаяДатаЛК(),
																				ИД,
																				ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().СпрС, 
																				ИмяМетаданных,
																				Объект, 
																				"ЛК_ОбменДанными.ВыполнитьОбменСсылочнымиДанными"));

		
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции	

Функция ВыполнитьОбменПроизвольнымиДанными(НастройкиСервиса, Токен)
	
	СтруктураВозврата = ЛК_РаботаСФункциямиКлиентСервер.СтруктураВозврата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
					|	ЛК_ОчередьОбменаСЛКПроизвольнымиДанными.ТипОбъкта КАК ТипОбъкта,
					|	ЛК_ОчередьОбменаСЛКПроизвольнымиДанными.ИмяОбъекта КАК ИмяОбъекта,
					|	ЛК_ОчередьОбменаСЛКПроизвольнымиДанными.ВидСобытия КАК ВидСобытия,
					|	ЛК_ОчередьОбменаСЛКПроизвольнымиДанными.ХЭШ КАК ХЭШ,
					|	ЛК_ОчередьОбменаСЛКПроизвольнымиДанными.Данные КАК Данные,
					|	ЛК_ОчередьОбменаСЛКПроизвольнымиДанными.ДатаСобытия КАК ДатаСобытия
					|ИЗ
					|	РегистрСведений.ЛК_ОчередьОбменаСЛКПроизвольнымиДанными КАК ЛК_ОчередьОбменаСЛКПроизвольнымиДанными
					|ГДЕ
					|	ЛК_ОчередьОбменаСЛКПроизвольнымиДанными.Статус <> ЗНАЧЕНИЕ(Перечисление.ЛК_СтатусОбменаСЛК.Выполнен)
					|
					|УПОРЯДОЧИТЬ ПО
					|	ДатаСобытия,
					|	ИмяОбъекта,
					|	ВидСобытия,
					|	ТипОбъкта,
					|	ХЭШ";   
	                                   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИД = Строка(Новый УникальныйИдентификатор());
		
		ЛК_ЛогированиеСервер.ДобавитьЗаписьВЛог(	ЛК_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
											ЛК_ОбменДаннымиПовтИсп.СобытияЛога().НачатаОбработкаЗадания, 
											ЛК_ОбменДаннымиПовтИсп.УровниСобытийЛога().Информация,
											ЛК_ЛогированиеСервер.ДанныеJSONОбъектJSON(ЛК_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
																				ЛК_ЛогированиеСервер.ТекущаяДатаЛК(),
																				ИД,
																				Выборка.ТипОбъкта,
																				Выборка.ИмяОбъекта, 
																				Выборка.Данные, 
																				"ЛК_ОбменДанными.ВыполнитьОбменПроизвольнымиДанными"));

		Если Выборка.ТипОбъкта = ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().РСНЗ Тогда
			Если Выборка.ИмяОбъекта = "ФотографииФизическихЛиц" Тогда
				
				ДанныеСтрутура = ЛК_РаботаСJSONСервер.ПрочитатьJSON_АП(Выборка.Данные);
				СоответствиеФизЛиц = ЛК_РаботаСJSONСервер.ЧтениеJSON(ДанныеСтрутура["Объект"]);
				Для Каждого Запись Из СоответствиеФизЛиц Цикл 
					
					ФизическоеЛицоСсылка = Запись.Ключ;
					Результат = ЛК_ОбменДаннымиСервер.ОбновитьФотоПользователя(НастройкиСервиса, Токен, ИД, ФизическоеЛицоСсылка); 
					
				КонецЦикла;
				
			ИначеЕсли Выборка.ИмяОбъекта = "ГрафикиРаботыПоВидамВремени" Тогда
				
				ДанныеСтрутура = ЛК_РаботаСJSONСервер.ЧтениеJSON(Выборка.Данные);
				ГрафикРаботыСсылка = ДанныеСтрутура.ГрафикРаботы;
				Месяц = ДанныеСтрутура.Месяц;
				Результат = ЛК_ОбменДаннымиСервер.ОбновитьГрафикиРаботыПоВидамВремения(НастройкиСервиса, Токен, ИД, ГрафикРаботыСсылка, Месяц); 
	
			ИначеЕсли Выборка.ИмяОбъекта = "КадроваяИсторияСотрудников" Тогда
				
				Если Выборка.ВидСобытия = Перечисления.ЛК_ВидыСобытийСОбъектамиЛК.Добавление Тогда
					
					ДанныеСтрутура = ЛК_РаботаСJSONСервер.ЧтениеJSON(Выборка.Данные);
					СотрудникСсылка      = ДанныеСтрутура.Сотрудник;
					ФизическоеЛицоСсылка = ДанныеСтрутура.ФизическоеЛицо;
					
					ЗапросКадровойИстории = Новый Запрос;
					ЗапросКадровойИстории.Текст = "ВЫБРАТЬ
													|	КадроваяИсторияСотрудниковИнтервальный.ДатаНачала КАК ДатаНачала,
													|	КадроваяИсторияСотрудниковИнтервальный.Должность КАК Должность,
													|	КадроваяИсторияСотрудниковИнтервальный.Подразделение КАК Подразделение
													|ИЗ
													|	РегистрСведений.КадроваяИсторияСотрудниковИнтервальный КАК КадроваяИсторияСотрудниковИнтервальный
													|ГДЕ
													|	КадроваяИсторияСотрудниковИнтервальный.Сотрудник = &Сотрудник";
					ЗапросКадровойИстории.УстановитьПараметр("Сотрудник", СотрудникСсылка);
					
					СтруктураРабочихМест = Новый Структура;
					МассивРабочихМест = Новый Массив;
					
					ВыборкаКадровойИстории = ЗапросКадровойИстории.Выполнить().Выбрать();
					Пока ВыборкаКадровойИстории.Следующий() Цикл
						СтруктураРабочегоМеста = Новый Структура;
						СтруктураРабочегоМеста.Вставить("position_pk",    ВыборкаКадровойИстории.Должность);
						СтруктураРабочегоМеста.Вставить("subdivision_pk", ВыборкаКадровойИстории.Подразделение);
						СтруктураРабочегоМеста.Вставить("date_from",      ВыборкаКадровойИстории.ДатаНачала);
						МассивРабочихМест.Добавить(СтруктураРабочегоМеста);
					КонецЦикла;
					
					Результат = ЛК_ОбменДаннымиСервер.СоздатьОбновитьКадровойИсториюСотрудника(ИД, НастройкиСервиса, Токен, СотрудникСсылка, МассивРабочихМест);
					
				КонецЕсли;
				
			ИначеЕсли Выборка.ИмяОбъекта = "ГрафикРаботыСотрудников" Тогда	
				
				СтруктураДанных = ЛК_РаботаСJSONСервер.ЧтениеJSON(Выборка.Данные);
				Сотрудник = СтруктураДанных.Сотрудник;
				Период = СтруктураДанных.Период;
				Результат = ЛК_ОбменДаннымиСервер.ОбновитьДанныеОГрафикахСотрудников(НастройкиСервиса, Токен, ИД, Сотрудник, Период); 

			ИначеЕсли Выборка.ИмяОбъекта = "ВидыЗанятостиСотрудников" Тогда	
				
				СтруктураДанных = ЛК_РаботаСJSONСервер.ЧтениеJSON(Выборка.Данные);
				Сотрудник = СтруктураДанных.Сотрудник;
				Период = СтруктураДанных.Период;
				Результат = ЛК_ОбменДаннымиСервер.ОбновитьВидыЗанятостиСотрудников(НастройкиСервиса, Токен, ИД, Сотрудник, Период); 
				
			КонецЕсли;
			
		ИначеЕсли Выборка.ТипОбъкта = ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().РасчетныйЛист Тогда
			
			ДанныеСтрутура = ЛК_РаботаСJSONСервер.ЧтениеJSON(Выборка.Данные);
			СотрудникСсылка      = ДанныеСтрутура["Сотрудник"];
			Месяц                = ДанныеСтрутура["Месяц"];
			ФизическоеЛицоСсылка = ДанныеСтрутура["ФизическоеЛицо"];
			ОрганизацияСсылка    = ДанныеСтрутура["Организация"];
			
			Результат = ЛК_ОбменДаннымиСервер.ДобавитьОбновитьРасчетныйЛист(НастройкиСервиса, Токен, ИД, Месяц, СотрудникСсылка, ФизическоеЛицоСсылка); 
			
		ИначеЕсли Выборка.ТипОбъкта = ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().Табель Тогда
			
			ДанныеСтрутура = ЛК_РаботаСJSONСервер.ЧтениеJSON(Выборка.Данные);
			СотрудникСсылка         = ДанныеСтрутура["Сотрудник"];
			Месяц                   = ДанныеСтрутура["Месяц"]; 
			ОрганизацияНаименование = ДанныеСтрутура["ОрганизацияНаименование"];  
			
			Результат = ЛК_ОбменДаннымиСервер.ДобавитьОбновитьТабель(НастройкиСервиса, Токен, ИД, Месяц, СотрудникСсылка, ОрганизацияНаименование); 	
			
		ИначеЕсли Выборка.ИмяОбъекта = "ДанныеИндивидуальныхГрафиковСотрудников" Тогда	
			
			ДанныеСтрутура = ЛК_РаботаСJSONСервер.ЧтениеJSON(Выборка.Данные);
			СотрудникСсылка = ДанныеСтрутура.Сотрудник;
			Дата 	  		= ДанныеСтрутура.Период;
			Результат = ЛК_ОбменДаннымиСервер.ОбновитьДанныеИндивидуальныхГрафиковСотрудников(НастройкиСервиса, Токен, ИД, СотрудникСсылка, Дата); 	
			
		ИначеЕсли Выборка.ТипОбъкта = ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().ПодтвОбм Тогда
			
			Данные = ЛК_РаботаСJSONСервер.ПрочитатьJSON_АП(Выборка.Данные);
			Ключ      = Данные.Получить("Ключ");
			Результат = ЛК_ОбменДаннымиСервер.ПодтвердитьПолучениеДанных(НастройкиСервиса, Токен, ИД, Ключ); 
			
		КонецЕсли;
		                                                                   
		Если Результат <> Неопределено И Не ЛК_РаботаСФункциямиКлиентСервер.Ошибка(Результат) Тогда
			РегистрыСведений.ЛК_ОчередьОбменаСЛКПроизвольнымиДанными.ЗарегистрироватьУспехОбработки(ИД, 
																									Выборка.ТипОбъкта, 
																									Выборка.ИмяОбъекта, 
																									Выборка.ВидСобытия, 
																									Выборка.ХЭШ, 
																									Выборка.Данные);
		ИначеЕсли Результат <> Неопределено  Тогда

			РегистрыСведений.ЛК_ОчередьОбменаСЛКПроизвольнымиДанными.ЗарегистрироватьОшибкуОбработки(ИД, 
																									Выборка.ТипОбъкта, 
																									Выборка.ИмяОбъекта, 
																									Выборка.ВидСобытия, 
																									Выборка.ХЭШ, 
																									Выборка.Данные, 
																									"ЛК_ОбменДанными.ВыполнитьОбменПроизвольнымиДанными",
																									ЛК_РаботаСФункциямиКлиентСервер.ОшибкиСтрокой(Результат));
			ЛК_РаботаСФункциямиКлиентСервер.ОбъединитьОшибки(СтруктураВозврата, Результат); 
			
		КонецЕсли;
		
		ЛК_ЛогированиеСервер.ДобавитьЗаписьВЛог(	ЛК_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
											ЛК_ОбменДаннымиПовтИсп.СобытияЛога().ЗавершенаОбработкаЗадания, 
											ЛК_ОбменДаннымиПовтИсп.УровниСобытийЛога().Информация,
											ЛК_ЛогированиеСервер.ДанныеJSONОбъектJSON(ЛК_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
																				ЛК_ЛогированиеСервер.ТекущаяДатаЛК(),
																				ИД,
																				Выборка.ТипОбъкта,
																				Выборка.ИмяОбъекта, 
																				Выборка.Данные, 
																				"ЛК_ОбменДанными.ВыполнитьОбменПроизвольнымиДанными"));

	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции	

Функция ВыполнитьПолучениеДанных(НастройкиСервиса, Токен)
	
	СтруктураВозврата = ЛК_РаботаСФункциямиКлиентСервер.СтруктураВозврата();
	
	РесурсНаСервере = "/api/exchange" + "?base_pk=" + НастройкиСервиса.ИДБазы; 

    СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, 0);
	Если ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										0, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ГЕТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ВыполнитьПолучениеДанных.ОписаниеЗапроса",
										"data");
	
	                                   
	Если ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураОтвета) Тогда
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	МассивОбъектов = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураОтвета);
	
	Для Каждого ОбъектОбмена Из МассивОбъектов Цикл
		
		ИД = Строка(Новый УникальныйИдентификатор());
		
		КлючОбъекта = ОбъектОбмена.Получить("pk");
		Данные      = ОбъектОбмена.Получить("ex_data");
		ВидОбъекта  = ОбъектОбмена.Получить("ex_type");
		КлючСобытия = ОбъектОбмена.Получить("event_pk");
		
		ЛК_ЛогированиеСервер.ДобавитьЗаписьВЛог(	ЛК_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
											ЛК_ОбменДаннымиПовтИсп.СобытияЛога().НачалоОбработкиПолученихДанных, 
											ЛК_ОбменДаннымиПовтИсп.УровниСобытийЛога().Информация,
											ЛК_ЛогированиеСервер.ДанныеJSONОбъектJSON(ЛК_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
																				ЛК_ЛогированиеСервер.ТекущаяДатаЛК(),
																				ИД,
																				ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().ОБМ,
																				ВидОбъекта,
																				Данные, 
																				"ЛК_ОбменДанными.ВыполнитьПолучениеДанных"));

		Если ВидОбъекта = ЛК_ОбменДаннымиПовтИсп.ВидыОбъектов().ЗапрСпр Тогда
			
			ДанныеСтрутура = ЛК_РаботаСJSONСервер.ПрочитатьJSON_ISO(Данные, "doc_date");
			
			Если КлючСобытия = 1 Тогда
				Результат = СоздатьЗаявкуНаСправку(ИД, КлючОбъекта, ДанныеСтрутура);
			ИначеЕсли КлючСобытия = 2 Тогда	
				Результат = ОбновитьЗаявкуНаСправку(ИД, КлючОбъекта, ДанныеСтрутура);
			КонецЕсли;
			
		КонецЕсли;	
		
		ЛК_ЛогированиеСервер.ДобавитьЗаписьВЛог(	ЛК_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
											ЛК_ОбменДаннымиПовтИсп.СобытияЛога().ЗавершенаОбработкаЗадания, 
											ЛК_ОбменДаннымиПовтИсп.УровниСобытийЛога().Информация,
											ЛК_ЛогированиеСервер.ДанныеJSONОбъектJSON(ЛК_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
																				ЛК_ЛогированиеСервер.ТекущаяДатаЛК(),
																				ИД,
																				ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().ОБМ,
																				ВидОбъекта,
																				Данные, 
																				"ЛК_ОбменДанными.ЗавершениеОбработкиПолученихДанных"));


	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПодтвердитьПолучениеДанных(НастройкиСервиса, Токен, ИД, Ключ) Экспорт 
	
	РесурсНаСервере = "/api/exchange"; 

    СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
	
	Структура = Новый Структура;
	Структура.Вставить("pk", Ключ);
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Структура);
		
	ТелоЗапроса = ЛК_РаботаСJSONСервер.ЗаписатьJSON_АП(МассивОбъектов);
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ДобавитьОбновитьОрганизацию.ПодтвердитьПолучениеДанных",
										"");	
	Возврат СтруктураОтвета;	
	
КонецФункции

#Область НСИ

#Область Организации

Функция ДобавитьОрганизацию(НастройкиСервиса, Токен, ИД, ОрганизацияСсылка) Экспорт
	
	Возврат ДобавитьОбновитьОрганизацию(НастройкиСервиса, Токен, ИД, ОрганизацияСсылка);
	
КонецФункции

Функция ОбновитьОрганизацию(НастройкиСервиса, Токен, ИД, ОрганизацияСсылка) Экспорт
	
	Возврат ДобавитьОбновитьОрганизацию(НастройкиСервиса, Токен, ИД, ОрганизацияСсылка);
	
КонецФункции

#КонецОбласти

#Область Подразделения

Функция ДобавитьПодразделение(НастройкиСервиса, Токен, ИД, ПодразделениеСсылка) Экспорт
	
	Возврат ДобавитьОбновитьПодразделение(НастройкиСервиса, Токен, ИД, ПодразделениеСсылка);
	
КонецФункции

Функция ОбновитьПодразделение(НастройкиСервиса, Токен, ИД, ПодразделениеСсылка) Экспорт
	
	Возврат ДобавитьОбновитьПодразделение(НастройкиСервиса, Токен, ИД, ПодразделениеСсылка);
	
КонецФункции

#КонецОбласти

#Область Должности

Функция ДобавитьДолжность(НастройкиСервиса, Токен, ИД, ДолжностьСсылка) Экспорт 
	
	РесурсНаСервере = "/api/common/employee-position"; 
	
	СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);

	НаименованиеДолжности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДолжностьСсылка, "Наименование");
	
	Структура = Новый Структура;
	Структура.Вставить("position_name", НаименованиеДолжности);
	Структура.Вставить("base_pk",    	НастройкиСервиса.ИДБазы);
	Структура.Вставить("pk",            ДолжностьСсылка);
	ТелоЗапроса = ЛК_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	HTTPЗапрос.Заголовки.Вставить("Content-type",  "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
	HTTPЗапрос.Заголовки.Вставить("ID",            ИД);

	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ДобавитьОбновитьОрганизацию.ОписаниеЗапроса",
										"pk");
	
		
	
	Возврат СтруктураОтвета;	
	
КонецФункции	

Функция ОбновитьДолжность(НастройкиСервиса, Токен, ИД, ДолжностьСсылка) Экспорт 
	
	РесурсНаСервере = "/api/common/employee-position"; 
	
	СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
		
	НаименованиеДолжности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДолжностьСсылка, "Наименование");
	
	Структура = Новый Структура;
	Структура.Вставить("position_name", НаименованиеДолжности);
	Структура.Вставить("base_pk",    	НастройкиСервиса.ИДБазы);
	Структура.Вставить("pk",            ДолжностьСсылка);
	ТелоЗапроса = ЛК_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);		
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	HTTPЗапрос.Заголовки.Вставить("Content-type",  "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
	HTTPЗапрос.Заголовки.Вставить("ID",            ИД);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПУТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ДобавитьОбновитьОрганизацию.ОписаниеЗапроса",
										"pk");		
	
	Возврат СтруктураОтвета;	
	
КонецФункции

#КонецОбласти

#Область ВидыИспользованияРабочегоВремени

Функция ДобавитьВидИспользованияРабочегоВремени(НастройкиСервиса, Токен, ИД, ВидИспользованияРабочегоВремениСсылка) Экспорт 
	
	РесурсНаСервере = "/api/common/type-of-time"; 

    СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
			
	Запрос = Новый Запрос;
	Запрос.Текст = " ВЫБРАТЬ
					|	ВидыИспользованияРабочегоВремени.Ссылка КАК Ссылка,
					|	ВидыИспользованияРабочегоВремени.ПометкаУдаления КАК ПометкаУдаления,
					|	ВидыИспользованияРабочегоВремени.Наименование КАК Наименование,
					|	ВидыИспользованияРабочегоВремени.БуквенныйКод КАК БуквенныйКод,
					|	ВидыИспользованияРабочегоВремени.ОсновноеВремя КАК ОсновноеВремя,
					|	ВидыИспользованияРабочегоВремени.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
					|ИЗ
					|	Справочник.ВидыИспользованияРабочегоВремени КАК ВидыИспользованияРабочегоВремени
					|ГДЕ ВидыИспользованияРабочегоВремени.Ссылка = &Ссылка
					|";
	
	Запрос.Параметры.Вставить("Ссылка", ВидИспользованияРабочегоВремениСсылка); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Структура = Новый Структура;
	Структура.Вставить("time_name",  			Выборка.Наименование);
	Структура.Вставить("id_1c",      			Строка(ВидИспользованияРабочегоВремениСсылка.УникальныйИдентификатор()));
	Структура.Вставить("deleted",  	 			Выборка.ПометкаУдаления);
	Структура.Вставить("time_kod",  	 		Выборка.БуквенныйКод);
	Структура.Вставить("general_time_id_ic", 	Строка(Выборка.ОсновноеВремя.УникальныйИдентификатор()));
	Структура.Вставить("base_pk",    			НастройкиСервиса.ИДБазы);
	Структура.Вставить("time_name_id", 			Выборка.ИмяПредопределенныхДанных);
	ТелоЗапроса = ЛК_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	HTTPЗапрос.Заголовки.Вставить("Content-type",  "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
	HTTPЗапрос.Заголовки.Вставить("ID",            ИД);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ДобавитьВидИспользованияРабочегоВремени.ОписаниеЗапроса",
										"pk");
										
	Возврат СтруктураОтвета;

КонецФункции

Функция ОбновитьВидИспользованияРабочегоВремени(НастройкиСервиса, Токен, ИД, ВидИспользованияРабочегоВремениСсылка) Экспорт 
	
	РесурсНаСервере = "/api/common/type-of-time"; 

    СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
			
	Запрос = Новый Запрос;
	Запрос.Текст = " ВЫБРАТЬ
					|	ВидыИспользованияРабочегоВремени.Ссылка КАК Ссылка,
					|	ВидыИспользованияРабочегоВремени.ПометкаУдаления КАК ПометкаУдаления,
					|	ВидыИспользованияРабочегоВремени.Наименование КАК Наименование,
					|	ВидыИспользованияРабочегоВремени.БуквенныйКод КАК БуквенныйКод,
					|	ВидыИспользованияРабочегоВремени.ОсновноеВремя КАК ОсновноеВремя,
					|	ВидыИспользованияРабочегоВремени.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
					|ИЗ
					|	Справочник.ВидыИспользованияРабочегоВремени КАК ВидыИспользованияРабочегоВремени
					|ГДЕ ВидыИспользованияРабочегоВремени.Ссылка = &Ссылка
					|";
	
	Запрос.Параметры.Вставить("Ссылка", ВидИспользованияРабочегоВремениСсылка); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Структура = Новый Структура;
	Структура.Вставить("time_name",  			Выборка.Наименование);
	Структура.Вставить("id_1c",      			Строка(ВидИспользованияРабочегоВремениСсылка.УникальныйИдентификатор()));
	Структура.Вставить("deleted",  	 			Выборка.ПометкаУдаления);
	Структура.Вставить("time_kod",  	 		Выборка.БуквенныйКод);
	Структура.Вставить("general_time_id_ic", 	Строка(Выборка.ОсновноеВремя.УникальныйИдентификатор()));
	Структура.Вставить("time_name_id", 			Выборка.ИмяПредопределенныхДанных);
	Структура.Вставить("base_pk",    			НастройкиСервиса.ИДБазы);
	ТелоЗапроса = ЛК_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	HTTPЗапрос.Заголовки.Вставить("Content-type",  "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
	HTTPЗапрос.Заголовки.Вставить("ID",            ИД);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПАТЧ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ОбновитьВидИспользованияРабочегоВремени.ОписаниеЗапроса",
										"pk");
										
	Возврат СтруктураОтвета;

КонецФункции

#КонецОбласти

#Область ГрафикиРаботы

Функция ДобавитьГрафикРаботы(НастройкиСервиса, Токен, ИД, ГрафикРаботыСсылка) Экспорт 
	
	РесурсНаСервере = "/api/common/work-schedule"; 

    СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
			
	Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГрафикРаботыСсылка, "Наименование");	
	
	Структура = Новый Структура;
	Структура.Вставить("id_1c",  				ГрафикРаботыСсылка);
	Структура.Вставить("title",      			Наименование);
	Структура.Вставить("base_pk",    			НастройкиСервиса.ИДБазы);
	ТелоЗапроса = ЛК_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	HTTPЗапрос.Заголовки.Вставить("Content-type",  "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
	HTTPЗапрос.Заголовки.Вставить("ID",            ИД);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ДобавитьГрафикРаботы.ОписаниеЗапроса",
										"");
										
	Возврат СтруктураОтвета;

КонецФункции

Функция ОбновитьГрафикРаботы(НастройкиСервиса, Токен, ИД, ГрафикРаботыСсылка) Экспорт 
	
	РесурсНаСервере = "/api/common/work-schedule"; 

    СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
			
	Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГрафикРаботыСсылка, "Наименование");	
	
	Структура = Новый Структура;
	Структура.Вставить("id_1c",  				ГрафикРаботыСсылка);
	Структура.Вставить("title",      			Наименование);
	Структура.Вставить("base_pk",    			НастройкиСервиса.ИДБазы);
	ТелоЗапроса = ЛК_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	HTTPЗапрос.Заголовки.Вставить("Content-type",  "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
	HTTPЗапрос.Заголовки.Вставить("ID",            ИД);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПАТЧ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ОбновитьГрафикРаботы.ОписаниеЗапроса",
										"");
										
	Возврат СтруктураОтвета;

КонецФункции

#КонецОбласти

Функция ДобавитьТипСправки(НастройкиСервиса, Токен, ИД, ТипСправкиСсылка) Экспорт 
	
	РесурсНаСервере = "/api/common/inquiry-request-type"; 

    СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
			
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЛК_ТипыСправок.Ссылка КАК Ссылка,
	               |	ЛК_ТипыСправок.Код КАК Код,
	               |	ЛК_ТипыСправок.Наименование КАК Наименование,
	               |	ЛК_ТипыСправок.ПометкаУдаления КАК ПометкаУдаления
	               |ИЗ
	               |	Справочник.ЛК_ТипыСправок КАК ЛК_ТипыСправок
	               |ГДЕ
	               |	ЛК_ТипыСправок.Ссылка = &ТипСправкиСсылка";
	
	
	Запрос.УстановитьПараметр("ТипСправкиСсылка", ТипСправкиСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Структура = Новый Структура;
	Структура.Вставить("req_Id",     ИД);
	Структура.Вставить("type_name",  Выборка.Наименование);
	Структура.Вставить("id_1c",      Строка(ТипСправкиСсылка.УникальныйИдентификатор()));
	Структура.Вставить("deleted",  	 Выборка.ПометкаУдаления);
	Структура.Вставить("base_pk",    НастройкиСервиса.ИДБазы);
	ТелоЗапроса = ЛК_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	HTTPЗапрос.Заголовки.Вставить("Content-type",  "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
	HTTPЗапрос.Заголовки.Вставить("ID",            ИД);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ДобавитьТипСправки.ОписаниеЗапроса",
										"pk");
										
	Если Не ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураОтвета) Тогда
		
		Менеджер = РегистрыСведений.ЛК_СоответствиеОбъектовДляОбмена.СоздатьМенеджерЗаписи();
		Менеджер.Объект = ТипСправкиСсылка;
		Менеджер.КлючОбъекта = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураОтвета);
		
		Попытка
			Менеджер.Записать();
		Исключение
			
			ОписаниеОшибки = ОписаниеОшибки();
			ЛК_РаботаСФункциямиКлиентСервер.ДобавитьОшибку(СтруктураОтвета, ОписаниеОшибки);	
			
			ЛК_ЛогированиеСервер.ДобавитьЗаписьВЛог(	ЛК_ОбменДаннымиПовтИсп.УровниЛога().Ошибка,
											ЛК_ОбменДаннымиПовтИсп.СобытияЛога().ОшибкаПриОтправкеЗапроса, 
											ЛК_ОбменДаннымиПовтИсп.УровниСобытийЛога().Ошибка,			
											ЛК_ЛогированиеСервер.ДанныеJSONОбъектСтрока(ЛК_ОбменДаннымиПовтИсп.УровниЛога().Ошибка, 
																				ЛК_ЛогированиеСервер.ТекущаяДатаЛК(),
																				ИД,
																				ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().ЗС, 
																				"Ключ",
																				ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураОтвета), 
																				"ЛК_ОбменДанными.ДобавитьТипСправки.ОписаниеЗапроса",
																				ОписаниеОшибки));
			
		КонецПопытки;
	КонецЕсли;	
										
	Возврат СтруктураОтвета;

КонецФункции

#КонецОбласти

#Область Пользователи

Функция СоздатьПользователя(НастройкиСервиса, Токен, ФизЛицоСсылка, ЛогинПользователя, ПарольПользователя) Экспорт 
	
	РесурсНаСервере = "/api/user"; 
	
    СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, "");
	Если ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
					|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
					|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество
					|ИЗ
					|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних КАК ФИОФизическихЛицСрезПоследних
					|ГДЕ
					|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо = &ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизЛицоСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Структура = Новый Структура;
	Структура.Вставить("user_name",     Выборка.Имя); 
	Структура.Вставить("base_pk",    	НастройкиСервиса.ИДБазы);
	Структура.Вставить("surname",       Выборка.Фамилия);
	Структура.Вставить("patronymic",    Выборка.Отчество);
	Структура.Вставить("id_1c",         ФизЛицоСсылка);
	Структура.Вставить("email",         ЛогинПользователя);
	Структура.Вставить("user_password", ПарольПользователя);
	ТелоЗапроса = ЛК_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
		
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										"", 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.СоздатьПользователя.ОписаниеЗапроса",
										"pk");
										
	Если Не ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураОтвета) Тогда									
		
		МенеджерЗаписи                = РегистрыСведений.ЛК_ПользователиЛК.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ФизическоеЛицо = ФизЛицоСсылка;
		МенеджерЗаписи.id             = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураОтвета);
		МенеджерЗаписи.Логин          = ЛогинПользователя;
		МенеджерЗаписи.Пароль         = ПарольПользователя;
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
	
	Возврат СтруктураОтвета;	
	
КонецФункции	

Функция ОбновитьПользователя(НастройкиСервиса, Токен, ФизЛицоСсылка, ЛогинПользователя, ПарольПользователя) Экспорт
	
	РесурсНаСервере = "/api/user"; 
	
    СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, "");
	Если ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
					|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
					|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество,
					|	ЛК_ПользователиЛК.id КАК id,
					|	ЛК_ПользователиЛК.Логин КАК Логин,
					|	ЛК_ПользователиЛК.Пароль КАК Пароль
					
					|ИЗ
					|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних КАК ФИОФизическихЛицСрезПоследних
					|  				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛК_ПользователиЛК КАК ЛК_ПользователиЛК
					|			ПО ФИОФизическихЛицСрезПоследних.ФизическоеЛицо = ЛК_ПользователиЛК.ФизическоеЛицо
					
					|ГДЕ
					|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо = &ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизЛицоСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Структура = Новый Структура;
	Структура.Вставить("user_name",     Выборка.Имя);
	Структура.Вставить("surname",       Выборка.Фамилия);
	Структура.Вставить("patronymic",    Выборка.Отчество);
	Структура.Вставить("id_1c",         ФизЛицоСсылка);
	Структура.Вставить("email",         Выборка.Логин);
	Структура.Вставить("user_password", Выборка.Пароль);
	Структура.Вставить("pk",            Выборка.id);
	Структура.Вставить("base_pk",    	НастройкиСервиса.ИДБазы);
	ТелоЗапроса = ЛК_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);

	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
		
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										"", 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПУТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ДобавитьОбновитьОрганизацию.ОписаниеЗапроса",
										"pk");		
										
	Если Не ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураОтвета) Тогда

		МенеджерЗаписи                = РегистрыСведений.ЛК_ПользователиЛК.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ФизическоеЛицо = ФизЛицоСсылка;
		МенеджерЗаписи.id             = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
		МенеджерЗаписи.Логин          = ЛогинПользователя;
		МенеджерЗаписи.Пароль         = ПарольПользователя;
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
	
	Возврат СтруктураОтвета;	
	
КонецФункции

Функция ОбновитьФотоПользователя(НастройкиСервиса, Токен, ИД, ФизЛицоСсылка) Экспорт 
	
	РесурсНаСервере = "/api/picture"; 
	
	СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ 
					|	ФотографииФизическихЛиц.ФизическоеЛицо,
					|	ФотографииФизическихЛиц.Фотография
					|ИЗ
					|	РегистрСведений.ФотографииФизическихЛиц КАК ФотографииФизическихЛиц
					|ГДЕ
					|	ФотографииФизическихЛиц.ФизическоеЛицо = &ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизЛицоСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ФотоДвочныеДанные = Неопределено;
	
	Если Не РезультатЗапроса.Пустой() Тогда		
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ФотоДвочныеДанные = Выборка.Фотография.Получить();
		
	КонецЕсли;
		
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);		
	
	Если ФотоДвочныеДанные <> Неопределено Тогда  
		
		Разделитель = "--------------------------469740299757949141411855";
		HTTPЗапрос.Заголовки.Вставить("Content-type", "multipart/form-data; boundary=" + Разделитель);
		
		СообщениеТекстAutho     = СоздатьСообщение_Текст("""Authorization""", Токен);
		СообщениеТекстID        = СоздатьСообщение_Текст("""ID""", ИД);
		СообщениеТекст_Ид1с 	= СоздатьСообщение_Текст("""userId1c""", Строка(ФизЛицоСсылка.УникальныйИдентификатор()));
		СообщениеТекст_ИдБазы1с = СоздатьСообщение_Текст("""base_pk""", "" + НастройкиСервиса.ИДБазы);
		СообщениеКартинка 		= СоздатьСообщение_Изображение("""image""", """" + Строка(ФизЛицоСсылка.УникальныйИдентификатор()) + ".png""", ФотоДвочныеДанные);
		
		Тело = Новый ПотокВПамяти();
		ЗаписьДанных = Новый ЗаписьДанных(Тело);
		ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
		ЗаписьДанных.Записать(СообщениеТекстAutho);
		ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
		ЗаписьДанных.Записать(СообщениеТекстID);
		ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
		ЗаписьДанных.Записать(СообщениеТекст_Ид1с);
		ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
		ЗаписьДанных.Записать(СообщениеТекст_ИдБазы1с);		
		ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
		ЗаписьДанных.Записать(СообщениеКартинка);
		ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
		ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель + "--");
		ЗаписьДанных.Закрыть();
		ДанныеТела = Тело.ЗакрытьИПолучитьДвоичныеДанные();
		HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ДанныеТела);
		
	Иначе 
		
		Структура = Новый Структура;
		Структура.Вставить("userId1c", ФизЛицоСсылка);
		Структура.Вставить("base_pk",  НастройкиСервиса.ИДБазы);
		ТелоЗапроса = ЛК_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
		
		HTTPЗапрос.Заголовки.Вставить("Content-type",  "application/json; charset=utf-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
		HTTPЗапрос.Заголовки.Вставить("ID",            ИД);

		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);			
		
	КонецЕсли;	 
		
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ДобавитьОбновитьОрганизацию.ОписаниеЗапроса",
										"");
	
	Возврат СтруктураОтвета;	
	
КонецФункции

#КонецОбласти

#Область Сотрудники

Функция СоздатьСотрудника(НастройкиСервиса, Токен, ИД, СотрудникСсылка) Экспорт 
	
	РесурсНаСервере = "/api/employee"; 

    СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
					|	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
					|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
					|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество,
					|	ЛК_ПользователиЛК.id КАК id,
					|	ЛК_ПользователиЛК.Логин КАК Логин,
					|	ЛК_ПользователиЛК.Пароль КАК Пароль,
					|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
					|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
					|	Сотрудники.ПометкаУдаления КАК ПометкаУдаления,
					|	Сотрудники.Код КАК Код,
					|	ВЫБОР
					|		КОГДА Прием.Период ЕСТЬ NULL
					|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
					|		ИНАЧЕ НАЧАЛОПЕРИОДА(Прием.Период, ДЕНЬ)
					|	КОНЕЦ КАК ДатаПриема,
					|	ВЫБОР
					|		КОГДА Увольнение.Период ЕСТЬ NULL
					|			ТОГДА ДАТАВРЕМЯ(3000, 1, 1)
					|		ИНАЧЕ НАЧАЛОПЕРИОДА(Увольнение.Период, ДЕНЬ)
					|	КОНЕЦ КАК ДатаУвольнения
					|ИЗ
					|	Справочник.Сотрудники КАК Сотрудники
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних КАК ФИОФизическихЛицСрезПоследних
					|		ПО (Сотрудники.ФизическоеЛицо = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо)
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛК_ПользователиЛК КАК ЛК_ПользователиЛК
					|		ПО (ФИОФизическихЛицСрезПоследних.ФизическоеЛицо = ЛК_ПользователиЛК.ФизическоеЛицо)
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников КАК Прием
					|		ПО (Сотрудники.Ссылка = Прием.Сотрудник)
					|			И (Прием.ВидСобытия = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ВидыКадровыхСобытий.Прием))
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников КАК Увольнение
					|		ПО (Сотрудники.Ссылка = Увольнение.Сотрудник)
					|			И (Увольнение.ВидСобытия = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ВидыКадровыхСобытий.Увольнение))
					|ГДЕ
					|	Сотрудники.Ссылка = &СотрудникСсылка";
	
	Запрос.УстановитьПараметр("СотрудникСсылка", СотрудникСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Структура = Новый Структура;
	Структура.Вставить("pk",                  Строка(СотрудникСсылка.УникальныйИдентификатор()));
	Структура.Вставить("organization_pk",     Строка(Выборка.ГоловнаяОрганизация.УникальныйИдентификатор()));
	Структура.Вставить("user_id_1c", 	      Строка(Выборка.ФизическоеЛицо.УникальныйИдентификатор()));
	Структура.Вставить("deleted",             Выборка.ПометкаУдаления);
	Структура.Вставить("tab_nom",             Выборка.Код);
	Структура.Вставить("base_pk",             НастройкиСервиса.ИДБазы); 
	Структура.Вставить("date_of_appointment", Выборка.ДатаПриема);
	Структура.Вставить("date_of_dismissal",   Выборка.ДатаУвольнения);
	
	ТелоЗапроса = ЛК_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	HTTPЗапрос.Заголовки.Вставить("Content-type",  "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
	HTTPЗапрос.Заголовки.Вставить("ID",            ИД);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.СоздатьСотрудника.ОписаниеЗапроса",
										"pk");
										
	Возврат СтруктураОтвета;	
	
КонецФункции

Функция ОбновитьСотрудника(НастройкиСервиса, Токен, ИД, СотрудникСсылка) Экспорт 
	
	РесурсНаСервере = "/api/employee/update"; 

    СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
					|	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
					|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
					|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество,
					|	ЛК_ПользователиЛК.id КАК id,
					|	ЛК_ПользователиЛК.Логин КАК Логин,
					|	ЛК_ПользователиЛК.Пароль КАК Пароль,
					|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
					|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
					|	Сотрудники.ПометкаУдаления КАК ПометкаУдаления,
					|	Сотрудники.Код КАК Код,
					|	ВЫБОР
					|		КОГДА Прием.Период ЕСТЬ NULL
					|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
					|		ИНАЧЕ НАЧАЛОПЕРИОДА(Прием.Период, ДЕНЬ)
					|	КОНЕЦ КАК ДатаПриема,
					|	ВЫБОР
					|		КОГДА Увольнение.Период ЕСТЬ NULL
					|			ТОГДА ДАТАВРЕМЯ(3000, 1, 1)
					|		ИНАЧЕ НАЧАЛОПЕРИОДА(Увольнение.Период, ДЕНЬ)
					|	КОНЕЦ КАК ДатаУвольнения
					|ИЗ
					|	Справочник.Сотрудники КАК Сотрудники
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних КАК ФИОФизическихЛицСрезПоследних
					|		ПО (Сотрудники.ФизическоеЛицо = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо)
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛК_ПользователиЛК КАК ЛК_ПользователиЛК
					|		ПО (ФИОФизическихЛицСрезПоследних.ФизическоеЛицо = ЛК_ПользователиЛК.ФизическоеЛицо)
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников КАК Прием
					|		ПО (Сотрудники.Ссылка = Прием.Сотрудник)
					|			И (Прием.ВидСобытия = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ВидыКадровыхСобытий.Прием))
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников КАК Увольнение
					|		ПО (Сотрудники.Ссылка = Увольнение.Сотрудник)
					|			И (Увольнение.ВидСобытия = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ВидыКадровыхСобытий.Увольнение))
					|ГДЕ
					|	Сотрудники.Ссылка = &СотрудникСсылка";
	
	Запрос.УстановитьПараметр("СотрудникСсылка", СотрудникСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Структура = Новый Структура;
	Структура.Вставить("pk",                  Строка(СотрудникСсылка.УникальныйИдентификатор()));
	Структура.Вставить("organization_pk",     Строка(Выборка.ГоловнаяОрганизация.УникальныйИдентификатор()));
	Структура.Вставить("user_id_1c", 	      Строка(Выборка.ФизическоеЛицо.УникальныйИдентификатор()));
	Структура.Вставить("deleted",             Выборка.ПометкаУдаления);
	Структура.Вставить("tab_nom",             Выборка.Код);
	Структура.Вставить("base_pk",             НастройкиСервиса.ИДБазы); 
	Структура.Вставить("date_of_appointment", Выборка.ДатаПриема);
	Структура.Вставить("date_of_dismissal",   Выборка.ДатаУвольнения);
	
	ТелоЗапроса = ЛК_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	HTTPЗапрос.Заголовки.Вставить("Content-type",  "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
	HTTPЗапрос.Заголовки.Вставить("ID",            ИД);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ОбновитьСотрудника.ОписаниеЗапроса",
										"pk");
										
	Возврат СтруктураОтвета;
	
КонецФункции	



#КонецОбласти

#Область КадроваяИстория

Функция СоздатьЗаписьКадровойИстории(ИД, НастройкиСервиса, Токен, СотрудникСсылка, ПодразделениеСсылка, ДолжностьСсылка, ДатаНачала) Экспорт 
	
	РесурсНаСервере = "/api/employee/workplace"; 

    СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
		
	Структура = Новый Структура;
	Структура.Вставить("position_pk",    ДолжностьСсылка);
	Структура.Вставить("subdivision_pk", ПодразделениеСсылка);
	Структура.Вставить("employee_pk",    СотрудникСсылка);
	Структура.Вставить("date_from",      ДатаНачала);
	Структура.Вставить("base_pk",        НастройкиСервиса.ИДБазы);
	ТелоЗапроса = ЛК_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);		
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	HTTPЗапрос.Заголовки.Вставить("Content-type",  "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
	HTTPЗапрос.Заголовки.Вставить("ID",            ИД);
		
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ДобавитьОбновитьОрганизацию.ОписаниеЗапроса",
										"pk");	
	
	Возврат СтруктураОтвета;	
	
КонецФункции

Функция СоздатьОбновитьКадровойИсториюСотрудника(ИД, НастройкиСервиса, Токен, СотрудникСсылка, МассивРабочихМест) Экспорт 
	
	РесурсНаСервере = "/api/employee/workplaces"; 

    СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
		
	Структура = Новый Структура;
	Структура.Вставить("employee_pk",    СотрудникСсылка);
	Структура.Вставить("base_pk",        НастройкиСервиса.ИДБазы); 
	Структура.Вставить("workplaces",     МассивРабочихМест);

	ТелоЗапроса = ЛК_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);		
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	HTTPЗапрос.Заголовки.Вставить("Content-type",  "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
	HTTPЗапрос.Заголовки.Вставить("ID",            ИД);
		
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ДобавитьОбновитьОрганизацию.ОписаниеЗапроса",
										"pk");	
	
	Возврат СтруктураОтвета;	
	
КонецФункции

Функция УдалитьЗаписьКадровойИстории(ИД, НастройкиСервиса, Токен, СотрудникСсылка) Экспорт 
	
	РесурсНаСервере = "/api/employee/workplace"; 
	
	СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
		
	Структура = Новый Структура;
	Структура.Вставить("employee_pk",    СотрудникСсылка);
	Структура.Вставить("base_pk",        НастройкиСервиса.ИДБазы);
	ТелоЗапроса = ЛК_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	HTTPЗапрос.Заголовки.Вставить("Content-type",  "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
	HTTPЗапрос.Заголовки.Вставить("ID",            ИД);
		
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ДЕЛ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ДобавитьОбновитьОрганизацию.ОписаниеЗапроса",
										"pk");
										
	Возврат СтруктураВозврата;	
	
КонецФункции	

#КонецОбласти

Функция ДобавитьОбновитьРасчетныйЛист(НастройкиСервиса, Токен, ИД, МесяцРасчетногоЛистка, Сотрудник, ФизическоеЛицо) Экспорт 
	
	РесурсНаСервере = "/api/employee/payment-list"; 

    СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	HTTPЗапрос.Заголовки.Вставить("Content-type",  "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
	HTTPЗапрос.Заголовки.Вставить("ID",            ИД);
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачалоПериода = НачалоМесяца(МесяцРасчетногоЛистка);
	ОкончаниеПериода = КонецМесяца(МесяцРасчетногоЛистка);
	ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.НачалоПериода       = НачалоПериода;
	ПараметрыПолученияСотрудников.ОкончаниеПериода    = ОкончаниеПериода;
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = ФизическиеЛица;
	ПараметрыПолученияСотрудников.КадровыеДанные      = "Организация";
	
	ДанныеФизическихЛиц = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
	
	Если ДанныеФизическихЛиц.Количество() = 0 Тогда 
		
		ЛК_РаботаСФункциямиКлиентСервер.ДобавитьОшибку(СтруктураВозврата, "Не найдены кадровые данные сотрудника");
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	ТЗОрганизаций = ДанныеФизическихЛиц.Скопировать(,"Организация");
	ТЗОрганизаций.Свернуть("Организация"); 
	
	МассивСотрудников = ДанныеФизическихЛиц.ВыгрузитьКолонку("Сотрудник");
	
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("base_pk",    	НастройкиСервиса.ИДБазы);
	СтруктураЗапроса.Вставить("payment_month",  МесяцРасчетногоЛистка);
	МассивСтрок = Новый Массив;
	
	Для Каждого СтрокаОрганизаций Из ТЗОрганизаций Цикл
		
		ДанныеРасчетногоЛистка = Отчеты.АнализНачисленийИУдержаний.ДанныеРасчетныхЛистков(ФизическиеЛица, СтрокаОрганизаций.Организация, ОкончаниеПериода, ОкончаниеПериода, Неопределено);
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ДанныеРасчетногоЛистка.ДанныеРасчетныхЛистков <> Неопределено Тогда
			
			ТЗ = ДанныеРасчетногоЛистка.ДанныеРасчетныхЛистков.ДанныеРасчетныхЛистков;
			ТЗ.Свернуть("Сотрудник, ВидРасчета, Группа", "Сумма");
			
			Для Каждого СтрокаТЗ Из ТЗ Цикл
				
				Если Не ЗначениеЗаполнено(СтрокаТЗ.Группа) Тогда
					Продолжить;
				КонецЕсли;	
				
				Структура = Новый Структура; 
				Структура.Вставить("employee_pk", 	   СтрокаТЗ.Сотрудник);
				Структура.Вставить("payment_position", Строка(СтрокаТЗ.ВидРасчета));
				Структура.Вставить("payment_sum",      СтрокаТЗ.Сумма);
				Структура.Вставить("payment_group",    Строка(СтрокаТЗ.Группа));
				Структура.Вставить("payment_group_id", Перечисления.ГруппыНачисленияУдержанияВыплаты.Индекс(СтрокаТЗ.Группа));
				МассивСтрок.Добавить(Структура); 
				
			КонецЦикла; 
			
		КонецЕсли;	
		
	КонецЦикла;  
	
	СтруктураЗапроса.Вставить("payments",  МассивСтрок); 
	СтруктураЗапроса.Вставить("employees", МассивСотрудников);
	
	ТелоЗапроса = ЛК_РаботаСJSONСервер.ЗаписатьJSON_АП(СтруктураЗапроса);
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ДобавитьОбновитьРасчетныйЛист.ОписаниеЗапроса",
										"pk");	
	Возврат СтруктураОтвета;	
	
КонецФункции

Функция ДобавитьОбновитьТабель(НастройкиСервиса, Токен, ИД, Месяц, Сотрудник, ОрганизацияНаименование) Экспорт 
	
	РесурсНаСервере = "/api/employee/tabel"; 

    СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	HTTPЗапрос.Заголовки.Вставить("Content-type",  "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
	HTTPЗапрос.Заголовки.Вставить("ID",            ИД);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПериодОтчета = Новый СтандартныйПериод;
	ПериодОтчета.ДатаНачала    = НачалоМесяца(Месяц);
	ПериодОтчета.ДатаОкончания = КонецМесяца(Месяц);
	
	ОтчетТ13 = Отчеты.УнифицированнаяФормаТ13.Создать();
	ОтчетТ13.ИнициализироватьОтчет();
	ОтчетТ13.КомпоновщикНастроек.ЗагрузитьНастройки(ОтчетТ13.СхемаКомпоновкиДанных.ВариантыНастроек.УнифицированнаяФормаТ13.Настройки);
	
	ОтчетТ13.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодОтчета", ПериодОтчета);
	
	НовыйЭлементОтбора = ОтчетТ13.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ПолеОтбора = Новый ПолеКомпоновкиДанных("Сотрудник");
    НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
    НовыйЭлементОтбора.Использование  = Истина;
    НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
    НовыйЭлементОтбора.ПравоеЗначение = Сотрудник;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(ОтчетТ13.СхемаКомпоновкиДанных, ОтчетТ13.КомпоновщикНастроек.Настройки);
	
	ОтчетТ13.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ДанныеОтчета", Новый Массив);
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ОтчетТ13.СкомпоноватьРезультат(ДокументРезультат);
	
	МассивДанных = Новый Массив;
	ОтчетТ13.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ДанныеОтчета", МассивДанных);
	
	МассивДанных[0].organizationName = ОрганизацияНаименование;
		
	Структура = Новый Структура;
	Структура.Вставить("employee_id_1c", Сотрудник);
	Структура.Вставить("base_pk",    	 НастройкиСервиса.ИДБазы);
	Структура.Вставить("tabel_month",    Месяц);
	Структура.Вставить("tabel_data",     МассивДанных[0]);		
	ТелоЗапроса = ЛК_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ДобавитьОбновитьТабель.ОписаниеЗапроса",
										"");	
	Возврат СтруктураОтвета;	
	
КонецФункции

Функция ДобавитьОбновитьГрафикРаботы(НастройкиСервиса, Токен, ИД, Месяц, Сотрудник) Экспорт 
	
	РесурсНаСервере = "/api/employee/work-schedule"; 

    СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	HTTPЗапрос.Заголовки.Вставить("Content-type",  "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
	HTTPЗапрос.Заголовки.Вставить("ID",            ИД);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(Месяц));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(Месяц));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	&Сотрудник КАК Сотрудник,
	               |	&ДатаНачала КАК ДатаНачала,
	               |	&ДатаОкончания КАК ДатаОкончания
	               |ПОМЕСТИТЬ ВТСотрудники";
	
	Запрос.Выполнить();
	
	ПараметрыЗаполнения = УчетРабочегоВремениРасширенный.ПараметрыДляЗапросВТДанныеУчетаВремениИСостоянийСотрудников();
	ПараметрыЗаполнения.ИмяВТСотрудники = "ВТСотрудники";
	ПараметрыЗаполнения.ИмяВТРезультат = "ВТДанныеУчетаВремени";
	ПараметрыЗаполнения.РассчитыватьПлановоеВремя = Ложь;
	ПараметрыЗаполнения.ДатаАктуальности  = НачалоМесяца(Месяц);
	ПараметрыЗаполнения.ДатаНачала = НачалоМесяца(Месяц);
	ПараметрыЗаполнения.ДатаОкончания = КонецМесяца(Месяц);
	ПараметрыЗаполнения.МесяцДатаНачала = ПараметрыЗаполнения.ДатаНачала;
	ПараметрыЗаполнения.МесяцДатаОкончания = ПараметрыЗаполнения.ДатаОкончания;
	ПараметрыЗаполнения.ВыделятьВыходныеВПериодыОтклонений = Ложь;
	ПараметрыЗаполнения.ПолучатьУсловияТрудаИТерритории = Истина;
	УчетРабочегоВремениРасширенный.СоздатьВТДанныеУчетаВремениИСостоянийСотрудников(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыЗаполнения);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеУчетаВремени.Сотрудник КАК Сотрудник,
	               |	ДанныеУчетаВремени.Дата КАК Дата,
	               |	ДанныеУчетаВремени.Часы КАК Часы,
				   |	ДанныеУчетаВремени.ВидУчетаВремени КАК ВидУчетаВремени
				   |ИЗ
	               |	ВТДанныеУчетаВремени КАК ДанныеУчетаВремени
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Сотрудник,
	               |	Дата";
	
	ТЗ = Запрос.Выполнить().Выгрузить();

	
	УстановитьПривилегированныйРежим(Ложь);
	МассивСтрок = Новый Массив;

	Для Каждого СтрокаТЗ Из ТЗ Цикл
		
		Структура = Новый Структура;
		Структура.Вставить("work_date",            СтрокаТЗ.Дата);
		Структура.Вставить("work_hour",            СтрокаТЗ.Часы);
		Структура.Вставить("types_of_time_id_1c",  СтрокаТЗ.ВидУчетаВремени);
		МассивСтрок.Добавить(Структура);
		
	КонецЦикла; 
		
	Структура = Новый Структура;
	Структура.Вставить("emloyee_id_1c", Сотрудник);
	Структура.Вставить("base_pk",    	НастройкиСервиса.ИДБазы);
	Структура.Вставить("begin_date",    Месяц);
	Структура.Вставить("begin_date",    КонецМесяца(Месяц));
	Структура.Вставить("items", МассивСтрок);		
	ТелоЗапроса = ЛК_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ДобавитьОбновитьГрафикРаботы.ОписаниеЗапроса",
										"");	
	Возврат СтруктураОтвета;	
	
КонецФункции

Функция ОбновитьГрафикиРаботыПоВидамВремения(НастройкиСервиса, Токен, ИД, ГрафикРаботыСсылка, Месяц) Экспорт 
	
	РесурсНаСервере = "/api/common/general-work-schedules-data"; 

    СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	HTTPЗапрос.Заголовки.Вставить("Content-type",  "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
	HTTPЗапрос.Заголовки.Вставить("ID",            ИД);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ
					|	ГрафикиРаботыПоВидамВремени.Дата КАК Дата,
					|	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени КАК ВидУчетаВремени,
					|	МАКСИМУМ(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение) КАК ДополнительноеЗначение
					|ИЗ
					|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
					|ГДЕ
					|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &ГрафикРаботы
					|	И ГрафикиРаботыПоВидамВремени.Месяц = &Месяц
					|	И ГрафикиРаботыПоВидамВремени.ПереходящаяЧастьПредыдущейСмены = ЛОЖЬ
					|	И ГрафикиРаботыПоВидамВремени.ПереходящаяЧастьТекущейСмены = ЛОЖЬ
					|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя)
					|
					|СГРУППИРОВАТЬ ПО
					|	ГрафикиРаботыПоВидамВремени.Дата,
					|	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени";
	Запрос.Параметры.Вставить("ГрафикРаботы", ГрафикРаботыСсылка); 
	Запрос.Параметры.Вставить("Месяц", Месяц); 
	
	УстановитьПривилегированныйРежим(Ложь);
	МассивСтрок = Новый Массив;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		
		Структура = Новый Структура;
		Структура.Вставить("work_date",            Выборка.Дата);
		Структура.Вставить("work_hour",            Выборка.ДополнительноеЗначение);
		Структура.Вставить("types_of_time_id_1c",  Выборка.ВидУчетаВремени);
		МассивСтрок.Добавить(Структура);
		
	КонецЦикла; 
	
	Структура = Новый Структура;
	Структура.Вставить("work_schedule_id_1c", ГрафикРаботыСсылка);
	Структура.Вставить("base_pk",    	НастройкиСервиса.ИДБазы);
	Структура.Вставить("begin_date",    Месяц);
	Структура.Вставить("end_date",      КонецМесяца(Месяц));
	Структура.Вставить("items", МассивСтрок);		
	ТелоЗапроса = ЛК_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ОбновитьГрафикиРаботыПоВидамВремения.ОписаниеЗапроса",
										"");	
	Возврат СтруктураОтвета;	
	
КонецФункции

Функция ОбновитьДанныеИндивидуальныхГрафиковСотрудников(НастройкиСервиса, Токен, ИД, СотрудникСсылка, Дата) Экспорт 
	
	РесурсНаСервере = "/api/employee/personal-work-schedules-data"; 

    СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	МассивПользователейЛК = ЛК_ОбменДаннымиПовтИсп.МассивПользователейЛК();
	
	ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СотрудникСсылка, "ФизическоеЛицо");
	
	Если МассивПользователейЛК.Найти(ФизическоеЛицо) = Неопределено  Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Соединение = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	HTTPЗапрос.Заголовки.Вставить("Content-type",  "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
	HTTPЗапрос.Заголовки.Вставить("ID",            ИД);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
    Запрос.Текст =" ВЫБРАТЬ
					|	ДанныеИндивидуальныхГрафиковСотрудников.ВидУчетаВремени КАК ВидУчетаВремени,
					|	СУММА(ДанныеИндивидуальныхГрафиковСотрудников.Часы) КАК Часы
					|ИЗ
					|	РегистрНакопления.ДанныеИндивидуальныхГрафиковСотрудников КАК ДанныеИндивидуальныхГрафиковСотрудников
					|ГДЕ
					|	ДанныеИндивидуальныхГрафиковСотрудников.Сотрудник = &Сотрудник
					|	И ДанныеИндивидуальныхГрафиковСотрудников.Период = &Период
					|   И ДанныеИндивидуальныхГрафиковСотрудников.ВидУчетаВремени <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя)
					|
					|СГРУППИРОВАТЬ ПО
					|	ДанныеИндивидуальныхГрафиковСотрудников.ВидУчетаВремени
					|";

	Запрос.Параметры.Вставить("Период", Дата); 
	Запрос.Параметры.Вставить("Сотрудник", СотрудникСсылка); 
	
	УстановитьПривилегированныйРежим(Ложь);
	МассивСтрок = Новый Массив;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл   
		
		Структура = Новый Структура;
		Структура.Вставить("work_hour",            Выборка.Часы);
		Структура.Вставить("types_of_time_id_1c",  Выборка.ВидУчетаВремени);
		МассивСтрок.Добавить(Структура);
		
	КонецЦикла; 
	
	Структура = Новый Структура;
	Структура.Вставить("employee_id_1c", СотрудникСсылка);
	Структура.Вставить("base_pk",    	 НастройкиСервиса.ИДБазы);
	Структура.Вставить("work_date",      Дата);
	Структура.Вставить("items", МассивСтрок);		
	ТелоЗапроса = ЛК_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ОбновитьДанныеИндивидуальныхГрафиковСотрудников.ОписаниеЗапроса",
										"");	
	Возврат СтруктураОтвета;	
	
КонецФункции

Функция ОбновитьДанныеОГрафикахСотрудников(НастройкиСервиса, Токен, ИД, Сотрудник, Период) Экспорт 
	
	РесурсНаСервере = "/api/employee/employee-work-schedules-data"; 

    СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
    Запрос.Текст =" ВЫБРАТЬ
					|	ГрафикРаботыСотрудниковИнтервальный.Сотрудник КАК Сотрудник,
					|	ГрафикРаботыСотрудниковИнтервальный.ДатаНачала КАК ДатаНачала,
					|	ГрафикРаботыСотрудниковИнтервальный.ДатаОкончания КАК ДатаОкончания,
					|	ГрафикРаботыСотрудниковИнтервальный.ГрафикРаботы КАК ГрафикРаботы,
					|	&Период КАК ПериодИзменения
					|ИЗ
					|	РегистрСведений.ГрафикРаботыСотрудниковИнтервальный КАК ГрафикРаботыСотрудниковИнтервальный
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛК_ПользователиЛК КАК ЛК_ПользователиЛК
					|		ПО ГрафикРаботыСотрудниковИнтервальный.Сотрудник.ФизическоеЛицо = ЛК_ПользователиЛК.ФизическоеЛицо
					|ГДЕ
					|	(ГрафикРаботыСотрудниковИнтервальный.ДатаНачала >= &Период
					|			ИЛИ ГрафикРаботыСотрудниковИнтервальный.ДатаОкончания >= &Период)
					|				И ГрафикРаботыСотрудниковИнтервальный.Сотрудник = &Сотрудник
					
					|УПОРЯДОЧИТЬ ПО
					|	ДатаНачала
					|";
	Запрос.Параметры.Вставить("Период",    Период);
	Запрос.Параметры.Вставить("Сотрудник", Сотрудник);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;	


	Соединение = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	HTTPЗапрос.Заголовки.Вставить("Content-type",  "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
	HTTPЗапрос.Заголовки.Вставить("ID",            ИД);
	
	УстановитьПривилегированныйРежим(Ложь);
	МассивСтрок = Новый Массив;
	
	ПериодНачала = Период;
	ПерваяЗапись = Истина;
			
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ПерваяЗапись Тогда
			ПериодНачала = Выборка.ДатаНачала;
			ПерваяЗапись = Ложь;
		КонецЕсли;	
		
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("date_from",            Выборка.ДатаНачала);
		СтруктураЗаписи.Вставить("date_to",              Выборка.ДатаОкончания);
		СтруктураЗаписи.Вставить("work_schedules_id_1c", Выборка.ГрафикРаботы);
		
		МассивСтрок.Добавить(СтруктураЗаписи);
		
	КонецЦикла;	
	
	Структура = Новый Структура;
	Структура.Вставить("base_pk",    	 НастройкиСервиса.ИДБазы);
	Структура.Вставить("employee_id_1c", Сотрудник);
	Структура.Вставить("date_from",  	 НачалоДня(ПериодНачала));
	Структура.Вставить("items", 		 МассивСтрок);		
	ТелоЗапроса = ЛК_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ОбновитьДанныеОГрафикахСотрудников.ОписаниеЗапроса",
										"");	
	Возврат СтруктураОтвета;	
	
КонецФункции

Функция ОбновитьВидыЗанятостиСотрудников(НастройкиСервиса, Токен, ИД, Сотрудник, Период) Экспорт 
	
	РесурсНаСервере = "/api/employee/types-of-employment"; 

    СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
    Запрос.Текст =" ВЫБРАТЬ
					|	ВидыЗанятостиСотрудниковИнтервальный.Сотрудник КАК Сотрудник,
					|	ВидыЗанятостиСотрудниковИнтервальный.ДатаНачала КАК ДатаНачала,
					|	ВидыЗанятостиСотрудниковИнтервальный.ДатаОкончания КАК ДатаОкончания,
					|	ВЫБОР КОГДА ВидыЗанятостиСотрудниковИнтервальный.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы) 
					|		     ТОГДА 4
					|		  КОГДА ВидыЗанятостиСотрудниковИнтервальный.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство) 
					|		     ТОГДА 3
					|		  КОГДА ВидыЗанятостиСотрудниковИнтервальный.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство) 
					|		     ТОГДА 2					
					|		  КОГДА ВидыЗанятостиСотрудниковИнтервальный.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Подработка) 
					|		     ТОГДА 1					
					|   КОНЕЦ КАК ВидЗанятости,
					|	&Период КАК ПериодИзменения
					|ИЗ
					|	РегистрСведений.ВидыЗанятостиСотрудниковИнтервальный КАК ВидыЗанятостиСотрудниковИнтервальный
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛК_ПользователиЛК КАК ЛК_ПользователиЛК
					|		ПО ВидыЗанятостиСотрудниковИнтервальный.Сотрудник.ФизическоеЛицо = ЛК_ПользователиЛК.ФизическоеЛицо
					|ГДЕ
					|	(ВидыЗанятостиСотрудниковИнтервальный.ДатаНачала >= &Период
					|			ИЛИ ВидыЗанятостиСотрудниковИнтервальный.ДатаОкончания >= &Период)
					|				И ВидыЗанятостиСотрудниковИнтервальный.Сотрудник = &Сотрудник
					
					|УПОРЯДОЧИТЬ ПО
					|	ДатаНачала
					|";
	Запрос.Параметры.Вставить("Период",    Период);
	Запрос.Параметры.Вставить("Сотрудник", Сотрудник);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;	


	Соединение = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	HTTPЗапрос.Заголовки.Вставить("Content-type",  "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
	HTTPЗапрос.Заголовки.Вставить("ID",            ИД);
	
	УстановитьПривилегированныйРежим(Ложь);
	МассивСтрок = Новый Массив;
	
	ПериодНачала = Период;
	ПерваяЗапись = Истина;
			
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ПерваяЗапись Тогда
			ПериодНачала = Выборка.ДатаНачала;
			ПерваяЗапись = Ложь;
		КонецЕсли;	
		
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("date_from",            Выборка.ДатаНачала);
		СтруктураЗаписи.Вставить("date_to",              Выборка.ДатаОкончания);
		СтруктураЗаписи.Вставить("type_of_employment",   Выборка.ВидЗанятости);
		
		МассивСтрок.Добавить(СтруктураЗаписи);
		
	КонецЦикла;	
	
	Структура = Новый Структура;
	Структура.Вставить("base_pk",    	 НастройкиСервиса.ИДБазы);
	Структура.Вставить("employee_pk",    Сотрудник);
	Структура.Вставить("date_from",  	 НачалоДня(ПериодНачала));
	Структура.Вставить("items", 		 МассивСтрок);		
	ТелоЗапроса = ЛК_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ОбновитьВидыЗанятостиСотрудников.ОписаниеЗапроса",
										"");	
	Возврат СтруктураОтвета;	
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоздатьСоединение(НастройкиСервиса, ИД)
	
	СтруктураВозврата = ЛК_РаботаСФункциямиКлиентСервер.СтруктураВозврата();
	
	Попытка
		
		Соединение = Новый HTTPСоединение(НастройкиСервиса.АдресСервера, , , , );
		ЛК_РаботаСФункциямиКлиентСервер.ДобавитьРезультат(СтруктураВозврата, Соединение);
		
	Исключение
		
		ОписаниеОшибки = ОписаниеОшибки();
		ЛК_РаботаСФункциямиКлиентСервер.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки);
		
		Объект = НастройкиСервиса.АдресСервера;
		ЛК_ЛогированиеСервер.ДобавитьЗаписьВЛог(	ЛК_ОбменДаннымиПовтИсп.УровниЛога().Ошибка,
											ЛК_ОбменДаннымиПовтИсп.СобытияЛога().Логин, 
											ЛК_ОбменДаннымиПовтИсп.УровниСобытийЛога().Ошибка,
											ЛК_ЛогированиеСервер.ДанныеJSONОбъектСтрока(ЛК_ОбменДаннымиПовтИсп.УровниЛога().Ошибка, 
																				ЛК_ЛогированиеСервер.ТекущаяДатаЛК(),
																				ИД,
																				ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().Токен,
																				"",
																				Объект, 
																				"ЛК_ОбменДанными.СоздатьСоединение", 
																				ОписаниеОшибки()));
		
	КонецПопытки;

	Возврат СтруктураВозврата;
	
КонецФункции

Функция ОтправитьЗапрос(РесурсНаСервере, Соединение,  ИД, Метод, HTTPЗапрос, Трасса, ПолеОтвета)
	
	СтруктураВозврата = ЛК_РаботаСФункциямиКлиентСервер.СтруктураВозврата();
	Попытка	
		
		ОписаниеЗапроса = ЛК_ЛогированиеСервер.ОписаниеЗапроса(ИД, РесурсНаСервере, HTTPЗапрос);
		ЛК_ЛогированиеСервер.ДобавитьЗаписьВЛог(  ЛК_ОбменДаннымиПовтИсп.УровниЛога().Дебаг,
											ЛК_ОбменДаннымиПовтИсп.СобытияЛога().ОтправкаЗапроса, 
											ЛК_ОбменДаннымиПовтИсп.УровниСобытийЛога().Информация, 
											ЛК_ЛогированиеСервер.ДанныеJSONОбъектJSON(ЛК_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
																				ЛК_ЛогированиеСервер.ТекущаяДатаЛК(),
																				ИД,
																				ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().ЗпП,
																				"Запрос",
																				ОписаниеЗапроса, 
																				Трасса));					 
		
		HTTPОтвет  = Соединение.ВызватьHTTPМетод(Метод, HTTPЗапрос);
		
		ОписаниеОтвета = ЛК_ЛогированиеСервер.ОписаниеОтвета(ИД, HTTPОтвет);
		ЛК_ЛогированиеСервер.ДобавитьЗаписьВЛог(	ЛК_ОбменДаннымиПовтИсп.УровниЛога().Дебаг,
											ЛК_ОбменДаннымиПовтИсп.СобытияЛога().ПолучениеОтвета, 
											ЛК_ОбменДаннымиПовтИсп.УровниСобытийЛога().Информация,
											ЛК_ЛогированиеСервер.ДанныеJSONОбъектJSON(ЛК_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
																				ЛК_ЛогированиеСервер.ТекущаяДатаЛК(),
																				ИД,
																				ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().ЗпП, 
																				"Ответ",
																				ОписаниеОтвета, 
																				Трасса));
		
	Исключение
		
		ОписаниеОшибки = ОписаниеОшибки();
		ЛК_РаботаСФункциямиКлиентСервер.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки);
		
		ЛК_ЛогированиеСервер.ДобавитьЗаписьВЛог(	ЛК_ОбменДаннымиПовтИсп.УровниЛога().Ошибка,
											ЛК_ОбменДаннымиПовтИсп.СобытияЛога().ОшибкаПриОтправкеЗапроса, 
											ЛК_ОбменДаннымиПовтИсп.УровниСобытийЛога().Ошибка,			
											ЛК_ЛогированиеСервер.ДанныеJSONОбъектJSON(ЛК_ОбменДаннымиПовтИсп.УровниЛога().Ошибка, 
																				ЛК_ЛогированиеСервер.ТекущаяДатаЛК(),
																				ИД,
																				ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().Токен, 
																				"Запрос",
																				ОписаниеЗапроса, 
																				Трасса,
																				ОписаниеОшибки));
		Возврат СтруктураВозврата;
		
	КонецПопытки;

	СтруктураОтвета = РазобратьОтвет(   HTTPОтвет, ОписаниеОтвета, ИД, 
											ПолеОтвета, "ЛК_ОбменДанными.Логин", "Ошибка разбора ответа");
	Возврат СтруктураОтвета;

КонецФункции

Функция РазобратьОтвет(HTTPОтвет, ОписаниеОтвета, ИД, КлючОтвета, Трасса, СообщениеОбОшибке)
	
	СтруктураВозврата = ЛК_РаботаСФункциямиКлиентСервер.СтруктураВозврата();
	
	Если HTTPОтвет.КодСостояния > 299 Тогда
		
		ЛК_ЛогированиеСервер.ДобавитьЗаписьВЛог(	ЛК_ОбменДаннымиПовтИсп.УровниЛога().Ошибка,
											ЛК_ОбменДаннымиПовтИсп.СобытияЛога().ОшибкаПриПолученииОтвета, 
											ЛК_ОбменДаннымиПовтИсп.УровниСобытийЛога().Ошибка,
											ЛК_ЛогированиеСервер.ДанныеJSONОбъектJSON(ЛК_ОбменДаннымиПовтИсп.УровниЛога().Ошибка, 
																				ЛК_ЛогированиеСервер.ТекущаяДатаЛК(),
																				ИД,
																				ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().ОЗ, 
																				"Ответ",
																				ОписаниеОтвета, 
																				Трасса));
		Сообщение = СтрШаблон("Код состояния: %1. %2.", HTTPОтвет.КодСостояния, 
														"Действие не выполнено");
																		
		ContentType = HTTPОтвет.Заголовки.Получить("Content-Type");																		
		
		Если ContentType = "application/json; charset=utf-8" Тогда
			
			ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
			ТелоОтветаСоответствие = ЛК_РаботаСJSONСервер.ПрочитатьJSON_АП(ТелоОтвета);
			Message = ТелоОтветаСоответствие.Получить("message");
			Если Message <> Неопределено  Тогда
				Сообщение = СтрШаблон("Код состояния: %1. %2.", HTTPОтвет.КодСостояния, 
																Message);
			КонецЕсли;
			
		КонецЕсли;																		
		
		ЛК_РаботаСФункциямиКлиентСервер.ДобавитьОшибку(СтруктураВозврата, Сообщение);
		Возврат СтруктураВозврата;
		
	КонецЕсли;

	Если КлючОтвета <> "" Тогда 	
		
		Результат = HTTPОтвет.ПолучитьТелоКакСтроку();
		РезультатОбъект = ЛК_РаботаСJSONСервер.ПрочитатьJSON_АП(Результат);
		
		Если РезультатОбъект.Получить(КлючОтвета) <> Неопределено Тогда
			ЛК_РаботаСФункциямиКлиентСервер.ДобавитьРезультат(СтруктураВозврата, РезультатОбъект[КлючОтвета]);
		Иначе
			
			ЛК_РаботаСФункциямиКлиентСервер.ДобавитьОшибку(СтруктураВозврата, СообщениеОбОшибке);	
			
			ЛК_ЛогированиеСервер.ДобавитьЗаписьВЛог(	ЛК_ОбменДаннымиПовтИсп.УровниЛога().Ошибка,
												ЛК_ОбменДаннымиПовтИсп.СобытияЛога().ОшибкаПриПолученииОтвета, 
												ЛК_ОбменДаннымиПовтИсп.УровниСобытийЛога().Ошибка,				
												ЛК_ЛогированиеСервер.ДанныеJSONОбъектJSON(ЛК_ОбменДаннымиПовтИсп.УровниЛога().Ошибка, 
																					ЛК_ЛогированиеСервер.ТекущаяДатаЛК(),
																					ИД,
																					ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().ОЗ,
																					"Ответ",
																					ОписаниеОтвета, 
																					Трасса),
																					СообщениеОбОшибке);
		КонецЕсли;

	КонецЕсли;																		

	Возврат СтруктураВозврата;
	
КонецФункции

Функция ДобавитьОбновитьОрганизацию(НастройкиСервиса, Токен, ИД, ОрганизацияСсылка) 
	
	РесурсНаСервере = "/api/common/organisation";
	
	НаименованиеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОрганизацияСсылка, "НаименованиеСокращенное");
	
    СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
	
	Структура = Новый Структура;
	Структура.Вставить("organization_name", НаименованиеОрганизации);
	Структура.Вставить("pk",                ОрганизацияСсылка);
	Структура.Вставить("base_pk",           НастройкиСервиса.ИДБазы);
	ТелоЗапроса = ЛК_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);

	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	HTTPЗапрос.Заголовки.Вставить("Content-type",  "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
	HTTPЗапрос.Заголовки.Вставить("ID",            ИД);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ДобавитьОбновитьОрганизацию.ОписаниеЗапроса",
										"pk");
										
	Возврат СтруктураОтвета;		
	
КонецФункции	

Функция ДобавитьОбновитьПодразделение(НастройкиСервиса, Токен, ИД, ПодразделениеСсылка) 
	
	РесурсНаСервере = "/api/common/subdivision";
		
  	СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
	
	РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПодразделениеСсылка, "Наименование, Родитель, Владелец");
	
	Структура = Новый Структура;
	Структура.Вставить("subdivision_name",  РеквизитыПодразделения.Наименование);
	Структура.Вставить("pk",                ПодразделениеСсылка);
	Структура.Вставить("parent_pk",         РеквизитыПодразделения.Родитель);
	Структура.Вставить("organization_pk",   РеквизитыПодразделения.Владелец);
	Структура.Вставить("base_pk",           НастройкиСервиса.ИДБазы);
	ТелоЗапроса = ЛК_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);	
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	HTTPЗапрос.Заголовки.Вставить("Content-type",  "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
	HTTPЗапрос.Заголовки.Вставить("ID",            ИД);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										HTTPЗапрос,  
										"ЛК_ОбменДанными.ДобавитьОбновитьПодразделение.ОписаниеЗапроса",
										"pk");
		
	Возврат СтруктураОтвета;;		
	
КонецФункции

// Возвращается HTTP-сообщение в виде ДвоичныеДанные
Функция СоздатьСообщение_Текст(ИмяСообщения, Текст)
	
	Поток = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Поток);
	// Заголовки
	ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=" + ИмяСообщения);
	ЗаписьДанных.ЗаписатьСтроку("");
	// Тело
	ЗаписьДанных.ЗаписатьСтроку(Текст);
	ЗаписьДанных.Закрыть();
	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции

// Возвращается HTTP-сообщение в виде ДвоичныеДанные
Функция СоздатьСообщение_Изображение(ИмяСообщения, ИмяФайла, КартинкаДвоичныеДанные)    
	
	Поток = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Поток);
	// Заголовки
	ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=" + ИмяСообщения + "; filename=" + имяФайла);
	ЗаписьДанных.ЗаписатьСтроку("Content-type: image/png");
	ЗаписьДанных.ЗаписатьСтроку("");
	// Тело
	ЗаписьДанных.Записать(КартинкаДвоичныеДанные);
	ЗаписьДанных.Закрыть();
	
	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции

#Область ЗаявкиНаСправку

Функция ОбновитьЗаявкуНаСправкуНаБеке(НастройкиСервиса, Токен, ИД, ДокументСсылка) Экспорт 
	
	РесурсНаСервере = "/api/inquiry-request"; 
	
	СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ЛК_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ЛК_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЛК_СоответствиеОбъектовДляОбмена.КлючОбъекта КАК КлючОбъекта
	               |ИЗ
	               |	РегистрСведений.ЛК_СоответствиеОбъектовДляОбмена КАК ЛК_СоответствиеОбъектовДляОбмена
	               |ГДЕ
	               |	ЛК_СоответствиеОбъектовДляОбмена.Объект = &Объект";
	Запрос.УстановитьПараметр("Объект", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Статус.Код, Описание, ПометкаУдаления");
		МассивРеквизитов = Новый Массив;
			
		Структура = Новый Структура;
		
		Структура.Вставить("base_pk", НастройкиСервиса.ИДБазы);
		Структура.Вставить("pk",      Выборка.КлючОбъекта);
		
		СтруктураРеквизита = Новый Структура;
		СтруктураРеквизита.Вставить("name",  "status_pk"); 
		СтруктураРеквизита.Вставить("value", РеквизитыДокумента.СтатусКод);
		МассивРеквизитов.Добавить(СтруктураРеквизита);
		СтруктураРеквизита = Новый Структура;
		СтруктураРеквизита.Вставить("name",  "description");
		СтруктураРеквизита.Вставить("value", РеквизитыДокумента.Описание);
		МассивРеквизитов.Добавить(СтруктураРеквизита);
		СтруктураРеквизита = Новый Структура;               
		СтруктураРеквизита.Вставить("name", "deleted");
		СтруктураРеквизита.Вставить("value", РеквизитыДокумента.ПометкаУдаления);
		МассивРеквизитов.Добавить(СтруктураРеквизита);
		
		Структура.Вставить("fields", МассивРеквизитов);

		ТелоЗапроса = ЛК_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
		
		HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);		
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
		HTTPЗапрос.Заголовки.Вставить("Content-type",  "application/json; charset=utf-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
		HTTPЗапрос.Заголовки.Вставить("ID",            ИД);
		
		СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
											Соединение, 
											ИД, 
											ЛК_ОбменДаннымиПовтИсп.МетодыЗапроса().ПАТЧ, 
											HTTPЗапрос,  
											"ЛК_ОбменДанными.ДобавитьОбновитьОрганизацию.ОбновитьЗаявкуНаСправкуНаБеке",
											"");
		Возврат СтруктураОтвета;									
										
	Иначе
		
		ЛК_РаботаСФункциямиКлиентСервер.ДобавитьОшибку(СтруктураВозврата, "Не найдено соответсвие объекта");
		Возврат СтруктураВозврата;
		
	КонецЕсли;	
	
КонецФункции

Функция СоздатьЗаявкуНаСправку(ИД, КлючОбъекта, Данные) 
	
	СтруктураВозврата = ЛК_РаботаСФункциямиКлиентСервер.СтруктураВозврата();
	
	НачатьТранзакцию();

	Попытка		
				
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЛК_СоответствиеОбъектовДляОбмена.Объект КАК Объект
		               |ИЗ
		               |	РегистрСведений.ЛК_СоответствиеОбъектовДляОбмена КАК ЛК_СоответствиеОбъектовДляОбмена
		               |ГДЕ
		               |	ЛК_СоответствиеОбъектовДляОбмена.Объект ССЫЛКА Документ.ЛК_ЗаявкиНаСправки
		               |	И ЛК_СоответствиеОбъектовДляОбмена.КлючОбъекта = &КлючОбъекта";
		
		Запрос.УстановитьПараметр("КлючОбъекта", Данные.pk);
		ВыборкаДокумента = Запрос.Выполнить().Выбрать();
		
		Если Не ВыборкаДокумента.Следующий() Тогда        
			
			СотрудникСсылка = Справочники.Сотрудники.ПолучитьСсылку(Новый УникальныйИдентификатор(Данные.employee_pk));
		
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
							|	ЛК_ПользователиЛК.ФизическоеЛицо КАК ФизическоеЛицо,
							|	КадроваяИсторияСотрудниковИнтервальный.Организация КАК Организация
							|ИЗ
							|	РегистрСведений.ЛК_ПользователиЛК КАК ЛК_ПользователиЛК
							|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудниковИнтервальный КАК КадроваяИсторияСотрудниковИнтервальный
							|		ПО (ЛК_ПользователиЛК.ФизическоеЛицо = КадроваяИсторияСотрудниковИнтервальный.Сотрудник.ФизическоеЛицо
							|				И КадроваяИсторияСотрудниковИнтервальный.Сотрудник = &Сотрудник
							|				И КадроваяИсторияСотрудниковИнтервальный.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием))
							|ГДЕ
							|	ЛК_ПользователиЛК.id = &id";
			Запрос.УстановитьПараметр("id", Данные.user_pk); 
			Запрос.УстановитьПараметр("Сотрудник", СотрудникСсылка);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			
			ДокументОбъкт = Документы.ЛК_ЗаявкиНаСправки.СоздатьДокумент();
			ДокументОбъкт.Дата 				= Данные.doc_date;
			ДокументОбъкт.Статус 			= Справочники.ЛК_СтатусыЗаявокНаСправки.НайтиПоКоду(2);
			ДокументОбъкт.Тип 				= Справочники.ЛК_ТипыСправок.ПолучитьСсылку(Новый УникальныйИдентификатор(Данные.type_id_1c));
			ДокументОбъкт.Описание 			= Данные.description;
			ДокументОбъкт.ФизическоеЛицо 	= Выборка.ФизическоеЛицо;
			ДокументОбъкт.Организация		= Выборка.Организация;
			ДокументОбъкт.Сотрудник			= СотрудникСсылка;
			ДокументОбъкт.ДополнительныеСвойства.Вставить("НеРегистрироватьВОбмене");
			ДокументОбъкт.Записать();
			
			Менеджер = РегистрыСведений.ЛК_СоответствиеОбъектовДляОбмена.СоздатьМенеджерЗаписи();
			Менеджер.Объект 	 = ДокументОбъкт.Ссылка;
			Менеджер.КлючОбъекта = Данные.pk;
			Менеджер.Записать();

			ТипОбъекта	= ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().ПодтвОбм;
			
			Структура = Новый Структура;
			Структура.Вставить("Ключ", КлючОбъекта);
			
			ДанныеJSON = ЛК_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);	
			
			ХешированиеДанных  = Новый ХешированиеДанных (ХешФункция.CRC32);
			ХешированиеДанных.Добавить(ДанныеJSON);
			ХешСумма = ХешированиеДанных.ХешСумма;
			
			РегистрыСведений.ЛК_ОчередьОбменаСЛКПроизвольнымиДанными.ЗарегистрироватьДобавлениеОбъекта(ТипОбъекта, "", ХешСумма, ДанныеJSON);
		
		КонецЕсли;
	
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОписаниеОшибки = ОписаниеОшибки();
		ЛК_РаботаСФункциямиКлиентСервер.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки);
		
		ОтменитьТранзакцию();
		
		ЛК_ЛогированиеСервер.ДобавитьЗаписьВЛог(	ЛК_ОбменДаннымиПовтИсп.УровниЛога().Ошибка,
											ЛК_ОбменДаннымиПовтИсп.СобытияЛога().ОшибкаОбработкиПолученихДанных, 
											ЛК_ОбменДаннымиПовтИсп.УровниСобытийЛога().Ошибка,			
											ЛК_ЛогированиеСервер.ДанныеJSONОбъектJSON(ЛК_ОбменДаннымиПовтИсп.УровниЛога().Ошибка, 
																				ЛК_ЛогированиеСервер.ТекущаяДатаЛК(),
																				ИД,
																				ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().ОБМ, 
																				"КлючОбъекта",
																				КлючОбъекта, 
																				"ЛК_ОбменДанными.СоздатьЗаявкуНаСправку",
																				ОписаниеОшибки));		
	КонецПопытки;

	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ОбновитьЗаявкуНаСправку(ИД, КлючОбъекта, Данные) 
	
	СтруктураВозврата = ЛК_РаботаСФункциямиКлиентСервер.СтруктураВозврата();
	
	НачатьТранзакцию();

	Попытка		
				
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЛК_СоответствиеОбъектовДляОбмена.Объект КАК Объект
		               |ИЗ
		               |	РегистрСведений.ЛК_СоответствиеОбъектовДляОбмена КАК ЛК_СоответствиеОбъектовДляОбмена
		               |ГДЕ
		               |	ЛК_СоответствиеОбъектовДляОбмена.Объект ССЫЛКА Документ.ЛК_ЗаявкиНаСправки
		               |	И ЛК_СоответствиеОбъектовДляОбмена.КлючОбъекта = &КлючОбъекта";
		
		Запрос.УстановитьПараметр("КлючОбъекта", Данные.pk);
		ВыборкаДокумента = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаДокумента.Следующий() Тогда
		
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ЛК_ПользователиЛК.ФизическоеЛицо КАК ФизическоеЛицо
			               |ИЗ
			               |	РегистрСведений.ЛК_ПользователиЛК КАК ЛК_ПользователиЛК
			               |ГДЕ
			               |	ЛК_ПользователиЛК.id = &id";
			Запрос.УстановитьПараметр("id", Данные.user_pk);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			
			ДокументОбъкт = ВыборкаДокумента.Объект.ПолучитьОбъект();
			ДокументОбъкт.Тип 				= Справочники.ЛК_ТипыСправок.ПолучитьСсылку(Новый УникальныйИдентификатор(Данные.type_id_1c));
			ДокументОбъкт.Описание 			= Данные.description;
			ДокументОбъкт.Записать();
			
			ТипОбъекта	= ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().ПодтвОбм;
			
			Структура = Новый Структура;
			Структура.Вставить("Ключ", КлючОбъекта);
			
			ДанныеJSON = ЛК_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);	
			
			ХешированиеДанных  = Новый ХешированиеДанных (ХешФункция.CRC32);
			ХешированиеДанных.Добавить(ДанныеJSON);
			ХешСумма = ХешированиеДанных.ХешСумма;
			
			РегистрыСведений.ЛК_ОчередьОбменаСЛКПроизвольнымиДанными.ЗарегистрироватьДобавлениеОбъекта(ТипОбъекта, "", ХешСумма, ДанныеJSON);
			
		Иначе 
			ВызватьИсключение "Соответствие объктов обмена не найдено";
		КонецЕсли;
	
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОписаниеОшибки = ОписаниеОшибки();
		ЛК_РаботаСФункциямиКлиентСервер.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки);
		
		ОтменитьТранзакцию();
		
		ЛК_ЛогированиеСервер.ДобавитьЗаписьВЛог(	ЛК_ОбменДаннымиПовтИсп.УровниЛога().Ошибка,
											ЛК_ОбменДаннымиПовтИсп.СобытияЛога().ОшибкаОбработкиПолученихДанных, 
											ЛК_ОбменДаннымиПовтИсп.УровниСобытийЛога().Ошибка,			
											ЛК_ЛогированиеСервер.ДанныеJSONОбъектJSON(ЛК_ОбменДаннымиПовтИсп.УровниЛога().Ошибка, 
																				ЛК_ЛогированиеСервер.ТекущаяДатаЛК(),
																				ИД,
																				ЛК_ОбменДаннымиПовтИсп.ТипыОбъектов().ОБМ, 
																				"КлючОбъекта",
																				КлючОбъекта, 
																				"ЛК_ОбменДанными.ОбновитьЗаявкуНаСправку",
																				ОписаниеОшибки));		
	КонецПопытки;

	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти



#КонецОбласти