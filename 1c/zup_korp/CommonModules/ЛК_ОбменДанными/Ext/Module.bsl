#Область ПрограммныйИнтерфейс

Функция Логин(НастройкиСервиса) Экспорт
	
	РесурсНаСервере = "/api/auth/login";
	
	Токен = "";
	
	СтруктураВозврата = ЛК_РаботаСФункциями.СтруктураВозврата();
			
	Попытка
		Соединение = Новый HTTPСоединение(НастройкиСервиса.АдресСервера, , , , );
	Исключение
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки());
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	Попытка
		HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
		HTTPЗапрос.УстановитьТелоИзСтроки(СтрШаблон("{""email"": ""%1"", ""password"": ""%2""}", НастройкиСервиса.ЛогинПользователя, НастройкиСервиса.ПарольПользователя));
		HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		
		HTTPОтвет  = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		Соединение = Неопределено;
		Если HTTPОтвет.КодСостояния > 299 Тогда
			ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, "Код состояния " + HTTPОтвет.КодСостояния + ". Действие не выполнена");
			Возврат СтруктураВозврата;
		КонецЕсли;
	Исключение
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки());
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	Результат = HTTPОтвет.ПолучитьТелоКакСтроку();
	РезультатОбъект = ЛК_РаботаСJSON.ПрочитатьJSON_АП(Результат);
	
	ЛК_РаботаСФункциями.ДобавитьРезультат(СтруктураВозврата, РезультатОбъект["token"]);
	
	Возврат СтруктураВозврата;
	
КонецФункции	

Функция НастройкиСервиса() Экспорт 
	
	Возврат РегистрыСведений.ЛК_НастройкиСервисов.НастройкиСервиса();
	
КонецФункции	

Процедура ВыполнитьОбмен(СообщатьОбОшибках = Истина) Экспорт  

	НастройкиСервиса = ЛК_РаботаСФункциями.Результат(ЛК_ОбменДанными.НастройкиСервиса());
	Токен = ЛК_РаботаСФункциями.Результат(ЛК_ОбменДанными.Логин(НастройкиСервиса)); 
	
	РезультатОбмена = ЛК_РаботаСФункциями.СтруктураВозврата();
	
	РезультатОбменСсылочнымиДанными = ВыполнитьОбменСсылочнымиДанными(НастройкиСервиса, Токен);
	ЛК_РаботаСФункциями.ОбъединитьОшибки(РезультатОбмена, РезультатОбменСсылочнымиДанными);
	
	РезультатОбменПроизвольнымиДанными = ВыполнитьОбменПроизвольнымиДанными(НастройкиСервиса, Токен);
	ЛК_РаботаСФункциями.ОбъединитьОшибки(РезультатОбмена, РезультатОбменПроизвольнымиДанными);
	
	Если СообщатьОбОшибках И ЛК_РаботаСФункциями.Ошибка(РезультатОбмена) Тогда
		ЛК_РаботаСФункциями.СообщитьОбОшибках(РезультатОбмена);
	КонецЕсли;	

КонецПроцедуры

Функция ВыполнитьОбменСсылочнымиДанными(НастройкиСервиса, Токен)
	
	СтруктураВозврата = ЛК_РаботаСФункциями.СтруктураВозврата();
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЛК_ОчередьОбменаСЛКСсылочнымиДанными.Объект КАК Объект,
	|	ЛК_ОчередьОбменаСЛКСсылочнымиДанными.ВидСобытия КАК ВидСобытия
	|ИЗ
	|	РегистрСведений.ЛК_ОчередьОбменаСЛКСсылочнымиДанными КАК ЛК_ОчередьОбменаСЛКСсылочнымиДанными
	|ГДЕ
	|	ЛК_ОчередьОбменаСЛКСсылочнымиДанными.Статус <> ЗНАЧЕНИЕ(Перечисление.ЛК_СтатусОбменаСЛК.Выполнен)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидСобытия,
	|	Объект";   
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл	
		
		Если ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.Организации") Тогда
			Если Выборка.ВидСобытия = Перечисления.ЛК_ВидыСобытийСОбъектамиЛК.Добавление Тогда
				Результат = ЛК_ОбменДанными.ДобавитьОрганизацию(НастройкиСервиса, Токен, Выборка.Объект);
			ИначеЕсли Выборка.ВидСобытия = Перечисления.ЛК_ВидыСобытийСОбъектамиЛК.Изменение Тогда
				Результат = ЛК_ОбменДанными.ОбновитьОрганизацию(НастройкиСервиса, Токен, Выборка.Объект);		
			КонецЕсли;			
		КонецЕсли;	
		
		Если ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			Если Выборка.ВидСобытия = Перечисления.ЛК_ВидыСобытийСОбъектамиЛК.Добавление Тогда
				Результат = ЛК_ОбменДанными.ДобавитьПодразделение(НастройкиСервиса, Токен, Выборка.Объект);
			ИначеЕсли Выборка.ВидСобытия = Перечисления.ЛК_ВидыСобытийСОбъектамиЛК.Изменение Тогда
				Результат = ЛК_ОбменДанными.ОбновитьПодразделение(НастройкиСервиса, Токен, Выборка.Объект);		
			КонецЕсли;			
		КонецЕсли;
		
		Если ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.Должности") Тогда
			Если Выборка.ВидСобытия = Перечисления.ЛК_ВидыСобытийСОбъектамиЛК.Добавление Тогда
				Результат = ЛК_ОбменДанными.ДобавитьДолжность(НастройкиСервиса, Токен, Выборка.Объект);
			ИначеЕсли Выборка.ВидСобытия = Перечисления.ЛК_ВидыСобытийСОбъектамиЛК.Изменение Тогда
				Результат = ЛК_ОбменДанными.ОбновитьДолжность(НастройкиСервиса, Токен, Выборка.Объект);		
			КонецЕсли;			
		КонецЕсли;
		
		Если Результат <> Неопределено И Не ЛК_РаботаСФункциями.Ошибка(Результат) Тогда
			РегистрыСведений.ЛК_ОчередьОбменаСЛКСсылочнымиДанными.ЗарегистрироватьУспехОбработки(Выборка.Объект, Выборка.ВидСобытия);
		КонецЕсли;
		
		Если Результат <> Неопределено Тогда
			ЛК_РаботаСФункциями.ОбъединитьОшибки(СтруктураВозврата, Результат); 
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураВозврата;

КонецФункции	

Функция ВыполнитьОбменПроизвольнымиДанными(НастройкиСервиса, Токен)
	
	СтруктураВозврата = ЛК_РаботаСФункциями.СтруктураВозврата();

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЛК_ОчередьОбменаСЛКПроизвольнымиДанными.Описание КАК Описание,
	               |	ЛК_ОчередьОбменаСЛКПроизвольнымиДанными.ВидСобытия КАК ВидСобытия,
	               |	ЛК_ОчередьОбменаСЛКПроизвольнымиДанными.ХЭШ КАК ХЭШ,
	               |	ЛК_ОчередьОбменаСЛКПроизвольнымиДанными.Данные КАК Данные,
	               |	ЛК_ОчередьОбменаСЛКПроизвольнымиДанными.ДатаСобытия КАК ДатаСобытия
	               |ИЗ
	               |	РегистрСведений.ЛК_ОчередьОбменаСЛКПроизвольнымиДанными КАК ЛК_ОчередьОбменаСЛКПроизвольнымиДанными
	               |ГДЕ
	               |	ЛК_ОчередьОбменаСЛКПроизвольнымиДанными.Статус <> ЗНАЧЕНИЕ(Перечисление.ЛК_СтатусОбменаСЛК.Выполнен)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаСобытия,
	               |	ВидСобытия,
	               |	Описание,
	               |	ХЭШ";   
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Описание = "РегистрСведенийНаборЗаписей.ФотографииФизическихЛиц" Тогда
			ДанныеСтрутура = ЛК_РаботаСJSON.ПрочитатьJSON_АП(Выборка.Данные);
			НаборЗаписнй = ЛК_РаботаСJSON.ЧтениеJSON(ДанныеСтрутура["Объект"]);
			Для Каждого Запись Из НаборЗаписнй Цикл 	
				ФизическоеЛицоСсылка = Запись.ФизическоеЛицо;
				Результат = ЛК_ОбменДанными.ОбновитьФотоПользователя(НастройкиСервиса, Токен, ФизическоеЛицоСсылка); 
				ЛК_РаботаСФункциями.ОбъединитьОшибки(СтруктураВозврата, Результат);
			КонецЦикла;
		КонецЕсли;
		
		Если Выборка.Описание = "РегистрСведенийНаборЗаписей.КадроваяИсторияСотрудниковИнтервальный" Тогда
			Если Выборка.ВидСобытия = Перечисления.ЛК_ВидыСобытийСОбъектамиЛК.Удаление Тогда
				ДанныеСтрутура = ЛК_РаботаСJSON.ПрочитатьJSON_АП(Выборка.Данные);
				НаборЗаписнй = ЛК_РаботаСJSON.ЧтениеJSON(ДанныеСтрутура["Объект"]);
				
				СотрудникСсылка = НаборЗаписнй.Отбор.Сотрудник.Значение;
				Год = НаборЗаписнй.Отбор.Год.Значение; 
				ДатаНачала = НаборЗаписнй.Отбор.ДатаНачала.Значение;
				
				Результат = ЛК_ОбменДанными.УдалитьЗаписьКадровойИстории(НастройкиСервиса, Токен, СотрудникСсылка);
			ИначеЕсли Выборка.ВидСобытия = Перечисления.ЛК_ВидыСобытийСОбъектамиЛК.Добавление Тогда
				ДанныеСтрутура = ЛК_РаботаСJSON.ПрочитатьJSON_АП(Выборка.Данные);
				НаборЗаписнй = ЛК_РаботаСJSON.ЧтениеJSON(ДанныеСтрутура["Объект"]);
				
				Соответсвие = Новый Соответствие;
				Для Каждого Запись Из НаборЗаписнй Цикл 
					Соответсвие.Вставить(Запись.Сотрудник);
				КонецЦикла;
				
				Для Каждого Запись Из Соответсвие Цикл 
					Результат = ЛК_ОбменДанными.УдалитьЗаписьКадровойИстории(НастройкиСервиса, Токен, Запись.Ключ); 
					ЛК_РаботаСФункциями.ОбъединитьОшибки(СтруктураВозврата, Результат); 
				КонецЦикла;
								
				Если Не ЛК_РаботаСФункциями.Ошибка(СтруктураВозврата) Тогда
					Для Каждого Запись Из Соответсвие Цикл
						СотрудникСсылка = Запись.Ключ; 
						Запрос = Новый Запрос;
						Запрос.Текст = "ВЫБРАТЬ
						|	КадроваяИсторияСотрудниковИнтервальный.ФизическоеЛицо КАК ФизическоеЛицо,
						|	КадроваяИсторияСотрудниковИнтервальный.ДатаНачала КАК ДатаНачала,
						|	КадроваяИсторияСотрудниковИнтервальный.Подразделение КАК Подразделение,
						|	КадроваяИсторияСотрудниковИнтервальный.Должность КАК Должность,
						|	КадроваяИсторияСотрудниковИнтервальный.Сотрудник КАК Сотрудник
						|ИЗ
						|	РегистрСведений.КадроваяИсторияСотрудниковИнтервальный КАК КадроваяИсторияСотрудниковИнтервальный
						|ГДЕ
						|	КадроваяИсторияСотрудниковИнтервальный.Сотрудник = &Сотрудник";
						
						Запрос.УстановитьПараметр("Сотрудник",СотрудникСсылка);
						
						НастройкиСервиса = ЛК_РаботаСФункциями.Результат(ЛК_ОбменДанными.НастройкиСервиса());
						Токен = ЛК_РаботаСФункциями.Результат(ЛК_ОбменДанными.Логин(НастройкиСервиса));
						
						ВыборкаСотрудника = Запрос.Выполнить().Выбрать();
						
						Пока ВыборкаСотрудника.Следующий() Цикл
							Результат = ЛК_ОбменДанными.СоздатьЗаписьКадровойИстории(НастройкиСервиса, Токен, ВыборкаСотрудника.Сотрудник, 
							ВыборкаСотрудника.Подразделение, ВыборкаСотрудника.Должность, ВыборкаСотрудника.ДатаНачала);
							
							ЛК_РаботаСФункциями.ОбъединитьОшибки(СтруктураВозврата, Результат); 
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Выборка.Описание = "РасчетныйЛист" Тогда
			ДанныеСтрутура = ЛК_РаботаСJSON.ЧтениеJSON(Выборка.Данные);
			СотрудникСсылка = ДанныеСтрутура["Сотрудник"];
			Месяц = ДанныеСтрутура["Месяц"];
			ФизическоеЛицоСсылка = ДанныеСтрутура["ФизическоеЛицо"];
			ОрганизацияСсылка = ДанныеСтрутура["Организация"];
			
			Результат = ЛК_ОбменДанными.ДобавитьОбновитьРасчетныйЛист(НастройкиСервиса, Токен, Месяц, СотрудникСсылка, ФизическоеЛицоСсылка); 
		КонецЕсли;
		
		Если Результат <> Неопределено И Не ЛК_РаботаСФункциями.Ошибка(Результат) Тогда
			РегистрыСведений.ЛК_ОчередьОбменаСЛКПроизвольнымиДанными.ЗарегистрироватьУспехОбработки(Выборка.Описание, Выборка.ХЭШ, Выборка.Данные, Выборка.ВидСобытия);
		КонецЕсли;
		
		Если Результат <> Неопределено Тогда
			ЛК_РаботаСФункциями.ОбъединитьОшибки(СтруктураВозврата, Результат); 
		КонецЕсли;		
	КонецЦикла;
	
	Возврат СтруктураВозврата;

КонецФункции	

#Область НСИ

Функция ДобавитьОрганизацию(НастройкиСервиса, Токен, ОрганизацияСсылка) Экспорт
	
	Возврат ДобавитьОбновитьОрганизацию(НастройкиСервиса, Токен, ОрганизацияСсылка);
	
КонецФункции

Функция ОбновитьОрганизацию(НастройкиСервиса, Токен, ОрганизацияСсылка) Экспорт
	
	Возврат ДобавитьОбновитьОрганизацию(НастройкиСервиса, Токен, ОрганизацияСсылка);
	
КонецФункции

Функция ДобавитьПодразделение(НастройкиСервиса, Токен, ПодразделениеСсылка) Экспорт
	
	Возврат ДобавитьОбновитьПодразделение(НастройкиСервиса, Токен, ПодразделениеСсылка);
	
КонецФункции

Функция ОбновитьПодразделение(НастройкиСервиса, Токен, ПодразделениеСсылка) Экспорт
	
	Возврат ДобавитьОбновитьПодразделение(НастройкиСервиса, Токен, ПодразделениеСсылка);
	
КонецФункции

Функция ДобавитьДолжность(НастройкиСервиса, Токен, ДолжностьСсылка) Экспорт 
	
	РесурсНаСервере = "/api/common/employee-position"; 
	СтруктураВозврата = ЛК_РаботаСФункциями.СтруктураВозврата();	
	
	Попытка
		Соединение = Новый HTTPСоединение(НастройкиСервиса.АдресСервера, , , , );
	Исключение
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки());
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	Попытка
		HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
		
		НаименованиеДолжности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДолжностьСсылка, "Наименование");

		Структура = Новый Структура;
		Структура.Вставить("position_name", НаименованиеДолжности);
		Структура.Вставить("base_pk",    	НастройкиСервиса.ИДБазы);
		Структура.Вставить("pk",            Строка(ДолжностьСсылка.УникальныйИдентификатор()));
		
		HTTPЗапрос.УстановитьТелоИзСтроки(ЛК_РаботаСJSON.ЗаписатьJSON_АП(Структура));
		HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
		
		HTTPОтвет  = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		Соединение = Неопределено;
		Если HTTPОтвет.КодСостояния > 299 Тогда
			ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, "Код состояния " + HTTPОтвет.КодСостояния + ". Действие не выполнена");
			Возврат СтруктураВозврата;
		КонецЕсли;
	Исключение
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки());
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	Результат = HTTPОтвет.ПолучитьТелоКакСтроку();
	РезультатОбъект = ЛК_РаботаСJSON.ПрочитатьJSON_АП(Результат);
	
	Если РезультатОбъект.Получить("pk") <> Неопределено Тогда
		ЛК_РаботаСФункциями.ДобавитьРезультат(СтруктураВозврата, РезультатОбъект["pk"]);
	Иначе
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, "Ошибка создания должности");		
	КонецЕсли;
		
	Возврат СтруктураВозврата;	

КонецФункции	

Функция ОбновитьДолжность(НастройкиСервиса, Токен, ДолжностьСсылка) Экспорт 
	
	РесурсНаСервере = "/api/common/employee-position"; 
	СтруктураВозврата = ЛК_РаботаСФункциями.СтруктураВозврата();	
	
	Попытка
		Соединение = Новый HTTPСоединение(НастройкиСервиса.АдресСервера, , , , );
	Исключение
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки());
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	Попытка
		HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
		
		НаименованиеДолжности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДолжностьСсылка, "Наименование");

		Структура = Новый Структура;
		Структура.Вставить("position_name", НаименованиеДолжности);
		Структура.Вставить("base_pk",    	НастройкиСервиса.ИДБазы);
		Структура.Вставить("pk",            Строка(ДолжностьСсылка.УникальныйИдентификатор()));
		
		HTTPЗапрос.УстановитьТелоИзСтроки(ЛК_РаботаСJSON.ЗаписатьJSON_АП(Структура));
		HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
		
		HTTPОтвет  = Соединение.ВызватьHTTPМетод("PUT", HTTPЗапрос);
		Соединение = Неопределено;
		Если HTTPОтвет.КодСостояния > 299 Тогда
			ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, "Код состояния " + HTTPОтвет.КодСостояния + ". Действие не выполнена");
			Возврат СтруктураВозврата;
		КонецЕсли;
	Исключение
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки());
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	Результат = HTTPОтвет.ПолучитьТелоКакСтроку();
	РезультатОбъект = ЛК_РаботаСJSON.ПрочитатьJSON_АП(Результат);
	
	Если РезультатОбъект.Получить("pk") <> Неопределено Тогда
		ЛК_РаботаСФункциями.ДобавитьРезультат(СтруктураВозврата, РезультатОбъект["pk"]);
	Иначе
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, "Ошибка обновления должности");		
	КонецЕсли;
		
	Возврат СтруктураВозврата;	

КонецФункции

#КонецОбласти

#Область Пользователи

Функция СоздатьПользователя(НастройкиСервиса, Токен, ФизЛицоСсылка, ЛогинПользователя, ПарольПользователя) Экспорт 
	
	РесурсНаСервере = "/api/user"; 
	СтруктураВозврата = ЛК_РаботаСФункциями.СтруктураВозврата();	
	
	Попытка
		Соединение = Новый HTTPСоединение(НастройкиСервиса.АдресСервера, , , , );
	Исключение
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки());
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	Попытка
		HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
				
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
		               |	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
		               |	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество
		               |ИЗ
		               |	РегистрСведений.ФИОФизическихЛиц.СрезПоследних КАК ФИОФизическихЛицСрезПоследних
		               |ГДЕ
		               |	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо = &ФизическоеЛицо";

		Запрос.УстановитьПараметр("ФизическоеЛицо", ФизЛицоСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();

		Структура = Новый Структура;
		Структура.Вставить("user_name",     Выборка.Имя);
		Структура.Вставить("surname",       Выборка.Фамилия);
		Структура.Вставить("patronymic",    Выборка.Отчество);
		Структура.Вставить("id_1c",         Строка(ФизЛицоСсылка.УникальныйИдентификатор()));
		Структура.Вставить("email",         ЛогинПользователя);
		Структура.Вставить("user_password", ПарольПользователя);
		
		HTTPЗапрос.УстановитьТелоИзСтроки(ЛК_РаботаСJSON.ЗаписатьJSON_АП(Структура));
		HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
		
		HTTPОтвет  = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		Соединение = Неопределено;
		Если HTTPОтвет.КодСостояния > 299 Тогда
			ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, "Код состояния " + HTTPОтвет.КодСостояния + ". Действие не выполнена");
			Возврат СтруктураВозврата;
		КонецЕсли;
	Исключение
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки());
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	Результат = HTTPОтвет.ПолучитьТелоКакСтроку();
	РезультатОбъект = ЛК_РаботаСJSON.ПрочитатьJSON_АП(Результат);
	
	Если РезультатОбъект.Получить("pk") <> Неопределено Тогда
		ЛК_РаботаСФункциями.ДобавитьРезультат(СтруктураВозврата, РезультатОбъект["pk"]);
		
		МенеджерЗаписи = РегистрыСведений.ЛК_ПользователиЛК.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ФизическоеЛицо = ФизЛицоСсылка;
		МенеджерЗаписи.id = ЛК_РаботаСФункциями.Результат(СтруктураВозврата);
		МенеджерЗаписи.Логин = ЛогинПользователя;
		МенеджерЗаписи.Пароль = ПарольПользователя;
		МенеджерЗаписи.Записать();
	Иначе
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, "Ошибка создания пользователя");		
	КонецЕсли;
		
	Возврат СтруктураВозврата;	
	
КонецФункции	

Функция ОбновитьПользователя(НастройкиСервиса, Токен, ФизЛицоСсылка, ЛогинПользователя, ПарольПользователя) Экспорт
	
	РесурсНаСервере = "/api/user"; 
	СтруктураВозврата = ЛК_РаботаСФункциями.СтруктураВозврата();	
	
	Попытка
		Соединение = Новый HTTPСоединение(НастройкиСервиса.АдресСервера, , , , );
	Исключение
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки());
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	Попытка
		HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
			
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
						|	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
						|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
						|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество,
						|	ЛК_ПользователиЛК.id КАК id,
						|	ЛК_ПользователиЛК.Логин КАК Логин,
						|	ЛК_ПользователиЛК.Пароль КАК Пароль
						
						|ИЗ
						|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних КАК ФИОФизическихЛицСрезПоследних
						|  				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛК_ПользователиЛК КАК ЛК_ПользователиЛК
						|			ПО ФИОФизическихЛицСрезПоследних.ФизическоеЛицо = ЛК_ПользователиЛК.ФизическоеЛицо
						
						|ГДЕ
						|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо = &ФизическоеЛицо";
		
		Запрос.УстановитьПараметр("ФизическоеЛицо", ФизЛицоСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();

		Структура = Новый Структура;
		Структура.Вставить("user_name",     Выборка.Имя);
		Структура.Вставить("surname",       Выборка.Фамилия);
		Структура.Вставить("patronymic",    Выборка.Отчество);
		Структура.Вставить("id_1c",         Строка(ФизЛицоСсылка.УникальныйИдентификатор()));
		Структура.Вставить("email",         Выборка.Логин);
		Структура.Вставить("user_password", Выборка.Пароль);
		Структура.Вставить("pk",            Выборка.id);
		
		HTTPЗапрос.УстановитьТелоИзСтроки(ЛК_РаботаСJSON.ЗаписатьJSON_АП(Структура));
		HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
		
		HTTPОтвет  = Соединение.ВызватьHTTPМетод("put", HTTPЗапрос);
		Соединение = Неопределено;
		Если HTTPОтвет.КодСостояния > 299 Тогда
			ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, "Код состояния " + HTTPОтвет.КодСостояния + ". Действие не выполнена");
			Возврат СтруктураВозврата;
		КонецЕсли;
	Исключение
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки());
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	Результат = HTTPОтвет.ПолучитьТелоКакСтроку();
	РезультатОбъект = ЛК_РаботаСJSON.ПрочитатьJSON_АП(Результат);
	
	Если РезультатОбъект.Получить("pk") <> Неопределено Тогда
		ЛК_РаботаСФункциями.ДобавитьРезультат(СтруктураВозврата, РезультатОбъект["pk"]);
		
		МенеджерЗаписи = РегистрыСведений.ЛК_ПользователиЛК.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ФизическоеЛицо = ФизЛицоСсылка;
		МенеджерЗаписи.id = ЛК_РаботаСФункциями.Результат(СтруктураВозврата);
		МенеджерЗаписи.Логин = ЛогинПользователя;
		МенеджерЗаписи.Пароль = ПарольПользователя;
		МенеджерЗаписи.Записать();
	Иначе
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, "Ошибка создания пользователя");		
	КонецЕсли;

	
	Возврат СтруктураВозврата;	
	
КонецФункции

Функция ОбновитьФотоПользователя(НастройкиСервиса, Токен, ФизЛицоСсылка) Экспорт 
	
	РесурсНаСервере = "/api/picture"; 
	СтруктураВозврата = ЛК_РаботаСФункциями.СтруктураВозврата();	
	
	Попытка
		Соединение = Новый HTTPСоединение(НастройкиСервиса.АдресСервера, , , , );
	Исключение
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки());
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ 
		|	ФотографииФизическихЛиц.ФизическоеЛицо,
		|	ФотографииФизическихЛиц.Фотография
		|ИЗ
		|	РегистрСведений.ФотографииФизическихЛиц КАК ФотографииФизическихЛиц
		|ГДЕ
		|	ФотографииФизическихЛиц.ФизическоеЛицо = &ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизЛицоСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ФотоДвочныеДанные = Неопределено;
	                                 
	Если Не РезультатЗапроса.Пустой() Тогда		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ФотоДвочныеДанные = Выборка.Фотография.Получить();
	КонецЕсли;

	
	Попытка
		
		HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);		
					
		Если ФотоДвочныеДанные <> Неопределено Тогда  
			Разделитель = "--------------------------469740299757949141411855";
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + Разделитель);

			СообщениеТекст = СоздатьСообщение_Текст("""userId1c""", Строка(ФизЛицоСсылка.УникальныйИдентификатор()));
			СообщениеКартинка = СоздатьСообщение_Изображение("""image""", """" + Строка(ФизЛицоСсылка.УникальныйИдентификатор()) + ".png""", ФотоДвочныеДанные);

			Тело = Новый ПотокВПамяти();
			ЗаписьДанных = Новый ЗаписьДанных(Тело);               
			ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
			ЗаписьДанных.Записать(СообщениеТекст);        
			ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
			ЗаписьДанных.Записать(СообщениеКартинка);
			ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
			ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель + "--");
			ЗаписьДанных.Закрыть();
			ДанныеТела = Тело.ЗакрытьИПолучитьДвоичныеДанные();
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ДанныеТела);
			
		Иначе 
			Структура = Новый Структура;
			Структура.Вставить("userId1c", ""+ Строка(ФизЛицоСсылка.УникальныйИдентификатор()) + "");
			ИДПользователя = ЛК_РаботаСJSON.ЗаписатьJSON_АП(Структура);
			
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
			HTTPЗапрос.УстановитьТелоИзСтроки(ЛК_РаботаСJSON.ЗаписатьJSON_АП(Структура));			
		КонецЕсли;	 
		
		HTTPОтвет  = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		
		Если HTTPОтвет.КодСостояния > 299 Тогда
			ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, "Код состояния " + HTTPОтвет.КодСостояния + ". Действие не выполнена");
			Возврат СтруктураВозврата;
		КонецЕсли;
	Исключение
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки());
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	Результат = HTTPОтвет.ПолучитьТелоКакСтроку();
		
	Возврат СтруктураВозврата;	
	
КонецФункции

#КонецОбласти

#Область Сотрудники

Функция СоздатьСотрудника(НастройкиСервиса, Токен, СотрудникСсылка) Экспорт 
	
	РесурсНаСервере = "/api/employee"; 
	СтруктураВозврата = ЛК_РаботаСФункциями.СтруктураВозврата();	
	
	Попытка
		Соединение = Новый HTTPСоединение(НастройкиСервиса.АдресСервера, , , , );
	Исключение
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки());
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	Попытка
		HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
				
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
						|	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
						|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
						|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество,
						|	ЛК_ПользователиЛК.id КАК id,
						|	ЛК_ПользователиЛК.Логин КАК Логин,
						|	ЛК_ПользователиЛК.Пароль КАК Пароль,
						|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
						|ИЗ
						|	Справочник.Сотрудники КАК Сотрудники
               			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних КАК ФИОФизическихЛицСрезПоследних
               			|			ПО Сотрудники.ФизическоеЛицо = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо
						|  		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛК_ПользователиЛК КАК ЛК_ПользователиЛК
						|			ПО ФИОФизическихЛицСрезПоследних.ФизическоеЛицо = ЛК_ПользователиЛК.ФизическоеЛицо		
						|ГДЕ
						|	Сотрудники.Ссылка = &СотрудникСсылка";


		Запрос.УстановитьПараметр("СотрудникСсылка", СотрудникСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();

		Структура = Новый Структура;
		Структура.Вставить("pk",         Строка(СотрудникСсылка.УникальныйИдентификатор()));
		Структура.Вставить("user_id_1c", Строка(Выборка.ФизическоеЛицо.УникальныйИдентификатор()));
		Структура.Вставить("base_pk",    НастройкиСервиса.ИДБазы);

		HTTPЗапрос.УстановитьТелоИзСтроки(ЛК_РаботаСJSON.ЗаписатьJSON_АП(Структура));
		HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
		
		HTTPОтвет  = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		Соединение = Неопределено;
		Если HTTPОтвет.КодСостояния > 299 Тогда
			ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, "Код состояния " + HTTPОтвет.КодСостояния + ". Действие не выполнена");
			Возврат СтруктураВозврата;
		КонецЕсли;
	Исключение
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки());
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	Результат = HTTPОтвет.ПолучитьТелоКакСтроку();
	РезультатОбъект = ЛК_РаботаСJSON.ПрочитатьJSON_АП(Результат);
	
	Если РезультатОбъект.Получить("pk") <> Неопределено Тогда
		ЛК_РаботаСФункциями.ДобавитьРезультат(СтруктураВозврата, РезультатОбъект["pk"]);		
	Иначе
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, "Ошибка создания сотрудника");
	КонецЕсли;
	
	Возврат СтруктураВозврата;	
	
КонецФункции	

#КонецОбласти

#Область КадроваяИстория

Функция СоздатьЗаписьКадровойИстории(НастройкиСервиса, Токен, СотрудникСсылка, ПодразделениеСсылка, ДолжностьСсылка, ДатаНачала) Экспорт 
	
	РесурсНаСервере = "/api/employee/workplace"; 
	СтруктураВозврата = ЛК_РаботаСФункциями.СтруктураВозврата();	
	
	Попытка
		Соединение = Новый HTTPСоединение(НастройкиСервиса.АдресСервера, , , , );
	Исключение
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки());
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	Попытка
		HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
				
		Структура = Новый Структура;
		Структура.Вставить("position_pk",    Строка(ДолжностьСсылка.УникальныйИдентификатор()));
		Структура.Вставить("subdivision_pk", Строка(ПодразделениеСсылка.УникальныйИдентификатор()));
		Структура.Вставить("employee_pk",    Строка(СотрудникСсылка.УникальныйИдентификатор()));
		Структура.Вставить("date_from",      ДатаНачала);
		Структура.Вставить("base_pk",        НастройкиСервиса.ИДБазы);
				
		HTTPЗапрос.УстановитьТелоИзСтроки(ЛК_РаботаСJSON.ЗаписатьJSON_АП(Структура));
		HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
		
		HTTPОтвет  = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		Соединение = Неопределено;
		Если HTTPОтвет.КодСостояния > 299 Тогда
			ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, "Код состояния " + HTTPОтвет.КодСостояния + ". Действие не выполнена");
			Возврат СтруктураВозврата;
		КонецЕсли;
	Исключение
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки());
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	Результат = HTTPОтвет.ПолучитьТелоКакСтроку();
	РезультатОбъект = ЛК_РаботаСJSON.ПрочитатьJSON_АП(Результат);
	
	Если РезультатОбъект.Получить("pk") <> Неопределено Тогда
		ЛК_РаботаСФункциями.ДобавитьРезультат(СтруктураВозврата, РезультатОбъект["pk"]);
	Иначе
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, "Ошибка создания пользователя");		
	КонецЕсли;

	
	Возврат СтруктураВозврата;	
	
КонецФункции	

Функция УдалитьЗаписьКадровойИстории(НастройкиСервиса, Токен, СотрудникСсылка) Экспорт 
	
	РесурсНаСервере = "/api/employee/workplace"; 
	СтруктураВозврата = ЛК_РаботаСФункциями.СтруктураВозврата();	
	
	Попытка
		Соединение = Новый HTTPСоединение(НастройкиСервиса.АдресСервера, , , , );
	Исключение
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки());
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	Попытка
		HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
				
		Структура = Новый Структура;
		Структура.Вставить("employee_pk",    Строка(СотрудникСсылка.УникальныйИдентификатор()));
		Структура.Вставить("base_pk",        НастройкиСервиса.ИДБазы);
		
		HTTPЗапрос.УстановитьТелоИзСтроки(ЛК_РаботаСJSON.ЗаписатьJSON_АП(Структура));
		HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
		
		HTTPОтвет  = Соединение.ВызватьHTTPМетод("DELETE", HTTPЗапрос);
		Соединение = Неопределено;
		Если HTTPОтвет.КодСостояния > 299 Тогда
			ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, "Код состояния " + HTTPОтвет.КодСостояния + ". Действие не выполнена");
			Возврат СтруктураВозврата;
		КонецЕсли;
	Исключение
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки());
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	Результат = HTTPОтвет.ПолучитьТелоКакСтроку();
	РезультатОбъект = ЛК_РаботаСJSON.ПрочитатьJSON_АП(Результат);
	
	ЛК_РаботаСФункциями.ДобавитьРезультат(СтруктураВозврата, РезультатОбъект["pk"]);
	
	Возврат СтруктураВозврата;	
	
КонецФункции	

#КонецОбласти

Функция ДобавитьОбновитьРасчетныйЛист(НастройкиСервиса, Токен, МесяцРасчетногоЛистка, Сотрудник, ФизическоеЛицо) Экспорт 
	
	РесурсНаСервере = "/api/employee/payment-list"; 
	СтруктураВозврата = ЛК_РаботаСФункциями.СтруктураВозврата();	
	
	Попытка
		Соединение = Новый HTTPСоединение(НастройкиСервиса.АдресСервера, , , , );
	Исключение
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки());
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	Попытка
		HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
		HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
		
		УстановитьПривилегированныйРежим(Истина);
		
		НачалоПериода = НачалоМесяца(МесяцРасчетногоЛистка);
		ОкончаниеПериода = КонецМесяца(МесяцРасчетногоЛистка);
		ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
		
		ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудников.НачалоПериода = НачалоПериода;
		ПараметрыПолученияСотрудников.ОкончаниеПериода = ОкончаниеПериода;
		ПараметрыПолученияСотрудников.СписокФизическихЛиц = ФизическиеЛица;
		ПараметрыПолученияСотрудников.КадровыеДанные = "Организация";
		
		ДанныеФизическихЛиц = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
		
		Если ДанныеФизическихЛиц.Количество() = 0 Тогда 
			ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, "Не найдены кадровые данные сотрудника");
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		КадровыеДанные = ДанныеФизическихЛиц[0];
				
		ДанныеРасчетногоЛистка = Отчеты.АнализНачисленийИУдержаний.ДанныеРасчетныхЛистков(ФизическиеЛица, КадровыеДанные.Организация, ОкончаниеПериода, ОкончаниеПериода, Неопределено);
				
		УстановитьПривилегированныйРежим(Ложь);
		МассивСтрок = Новый Массив;
		
		Если ДанныеРасчетногоЛистка.ДанныеРасчетныхЛистков <> Неопределено Тогда
			ТЗ = ДанныеРасчетногоЛистка.ДанныеРасчетныхЛистков.ДанныеРасчетныхЛистков;
			ТЗ.Свернуть("ВидРасчета, Группа", "Сумма");
			Для Каждого СтрокаТЗ Из ТЗ Цикл
				Структура = Новый Структура;
                Структура.Вставить("payment_position", Строка(СтрокаТЗ.ВидРасчета));
                Структура.Вставить("payment_sum", СтрокаТЗ.Сумма);
                Структура.Вставить("payment_group", Строка(СтрокаТЗ.Группа));
				Структура.Вставить("payment_group_id", Перечисления.ГруппыНачисленияУдержанияВыплаты.Индекс(СтрокаТЗ.Группа));
				МассивСтрок.Добавить(Структура);
			КонецЦикла; 
		КонецЕсли;

		Структура = Новый Структура;
		Структура.Вставить("employee_pk", Строка(Сотрудник.УникальныйИдентификатор()));
		Структура.Вставить("base_pk",    	НастройкиСервиса.ИДБазы);
		Структура.Вставить("payment_month", УниверсальноеВремя(МесяцРасчетногоЛистка));
		Структура.Вставить("payments", МассивСтрок);
		
		ЗаписьJSON = ЛК_РаботаСJSON.ЗаписатьJSON_АП(Структура);
		
		HTTPЗапрос.УстановитьТелоИзСтроки(ЗаписьJSON);
		
		HTTPОтвет  = Соединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
		Соединение = Неопределено;
		Если HTTPОтвет.КодСостояния > 299 Тогда
			ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, "Код состояния " + HTTPОтвет.КодСостояния + ". Действие не выполнена");
			Возврат СтруктураВозврата;
		КонецЕсли;
	Исключение
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки());
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	Результат = HTTPОтвет.ПолучитьТелоКакСтроку();
	РезультатОбъект = ЛК_РаботаСJSON.ПрочитатьJSON_АП(Результат);
	
	Если РезультатОбъект.Получить("pk") <> Неопределено Тогда
		ЛК_РаботаСФункциями.ДобавитьРезультат(СтруктураВозврата, РезультатОбъект["pk"]);
	Иначе
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, "Ошибка создания должности");		
	КонецЕсли;
		
	Возврат СтруктураВозврата;	

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДобавитьОбновитьОрганизацию(НастройкиСервиса, Токен, ОрганизацияСсылка) 
	
	РесурсНаСервере = "/api/common/organisation";
	
	НаименованиеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОрганизацияСсылка, "НаименованиеСокращенное");
	
	СтруктураВозврата = ЛК_РаботаСФункциями.СтруктураВозврата();

	Попытка
		Соединение = Новый HTTPСоединение(НастройкиСервиса.АдресСервера, , , , );
	Исключение
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки());
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	Попытка
		HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
		
		Структура = Новый Структура;
		Структура.Вставить("organization_name", НаименованиеОрганизации);
		Структура.Вставить("pk",                Строка(ОрганизацияСсылка.УникальныйИдентификатор()));
		Структура.Вставить("base_pk",           НастройкиСервиса.ИДБазы);
		
		HTTPЗапрос.УстановитьТелоИзСтроки(ЛК_РаботаСJSON.ЗаписатьJSON_АП(Структура));
		HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
		
		HTTPОтвет  = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		Соединение = Неопределено;
		Если HTTPОтвет.КодСостояния > 299 Тогда
			ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, "Код состояния " + HTTPОтвет.КодСостояния + ". Действие не выполнена");
			Возврат СтруктураВозврата;
		КонецЕсли;
	Исключение
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки());
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	Результат = HTTPОтвет.ПолучитьТелоКакСтроку();
	РезультатОбъект = ЛК_РаботаСJSON.ПрочитатьJSON_АП(Результат);
	
	Если РезультатОбъект.Получить("pk") <> Неопределено Тогда
		ЛК_РаботаСФункциями.ДобавитьРезультат(СтруктураВозврата, РезультатОбъект["pk"]);
	Иначе
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, "Ошибка создания организации");		
	КонецЕсли;
	
	Возврат СтруктураВозврата;		
	
КонецФункции	

Функция ДобавитьОбновитьПодразделение(НастройкиСервиса, Токен, ПодразделениеСсылка) 
	
	РесурсНаСервере = "/api/common/subdivision";
	
	РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПодразделениеСсылка, "Наименование, Родитель, Владелец");
	
	СтруктураВозврата = ЛК_РаботаСФункциями.СтруктураВозврата();

	Попытка
		Соединение = Новый HTTPСоединение(НастройкиСервиса.АдресСервера, , , , );
	Исключение
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки());
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	Попытка
		HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
		
		Структура = Новый Структура;
		Структура.Вставить("subdivision_name", РеквизитыПодразделения.Наименование);
		Структура.Вставить("pk",                Строка(ПодразделениеСсылка.УникальныйИдентификатор()));
		Структура.Вставить("parent_pk",         Строка(РеквизитыПодразделения.Родитель.УникальныйИдентификатор()));
		Структура.Вставить("organization_pk",   Строка(РеквизитыПодразделения.Владелец.УникальныйИдентификатор()));
		Структура.Вставить("base_pk",           НастройкиСервиса.ИДБазы);

		
		HTTPЗапрос.УстановитьТелоИзСтроки(ЛК_РаботаСJSON.ЗаписатьJSON_АП(Структура));
		HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
		
		HTTPОтвет  = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		Соединение = Неопределено;
		Если HTTPОтвет.КодСостояния > 299 Тогда
			ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, "Код состояния " + HTTPОтвет.КодСостояния + ". Действие не выполнена");
			Возврат СтруктураВозврата;
		КонецЕсли;
	Исключение
		ЛК_РаботаСФункциями.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки());
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	Результат = HTTPОтвет.ПолучитьТелоКакСтроку();
	РезультатОбъект = ЛК_РаботаСJSON.ПрочитатьJSON_АП(Результат);
	
	ЛК_РаботаСФункциями.ДобавитьРезультат(СтруктураВозврата, РезультатОбъект["pk"]);
	
	Возврат СтруктураВозврата;		
	
КонецФункции

// Возвращается HTTP-сообщение в виде ДвоичныеДанные
Функция СоздатьСообщение_Текст(ИмяСообщения, Текст)
        Поток = Новый ПотокВПамяти();
        ЗаписьДанных = Новый ЗаписьДанных(Поток);
        // Заголовки
        ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=" + ИмяСообщения);
        ЗаписьДанных.ЗаписатьСтроку("");
        // Тело
        ЗаписьДанных.ЗаписатьСтроку(Текст);
        ЗаписьДанных.Закрыть();
        Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
КонецФункции

// Возвращается HTTP-сообщение в виде ДвоичныеДанные
Функция СоздатьСообщение_Изображение(ИмяСообщения, ИмяФайла, КартинкаДвоичныеДанные)       
        Поток = Новый ПотокВПамяти();
        ЗаписьДанных = Новый ЗаписьДанных(Поток);
        // Заголовки
        ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=" + ИмяСообщения + "; filename=" + имяФайла);
        ЗаписьДанных.ЗаписатьСтроку("Content-Type: image/png");
        ЗаписьДанных.ЗаписатьСтроку("");
        // Тело
        ЗаписьДанных.Записать(КартинкаДвоичныеДанные);
        ЗаписьДанных.Закрыть();
        
        Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
КонецФункции

#КонецОбласти